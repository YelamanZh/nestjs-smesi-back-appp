var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.716,1,2.054]],["body/guards/AccessTokenGuard.html",[1,2.511,2,2.627,3,0.101,4,0.091,5,0.091,6,4.249,7,3.489,8,3.133,9,0.233,10,1.086,11,1.646,12,5.23,13,1.874,14,5.135,15,1.29,16,2.843,17,5.329,18,4.129,19,4.249,20,5.943,21,0.561,22,3.573,23,1.309,24,0.011,25,0.945,26,0.412,27,0.887,28,4.086,29,4.514,30,3.573,31,2.31,32,1.086,33,2.511,34,5.135,35,4.436,36,3.573,37,1.218,38,2.511,39,0.311,40,1.167,41,0.643,42,2.187,43,3.573,44,0.479,45,1.561,46,2.079,47,2.079,48,2.843,49,2.454,50,2.627,51,2.627,52,2.187,53,4.086,54,2.843,55,2.079,56,2.843,57,0.101,58,0.053,59,2.31,60,1.426,61,2.454,62,2.657,63,3.573,64,4.686,65,3.573,66,2.371,67,1.695,68,3.573,69,3.573,70,1.68,71,4.503,72,1.1,73,3.133,74,3.573,75,3.133,76,5.135,77,3.573,78,2.843,79,3.573,80,3.573,81,3.573,82,2.627,83,2.843,84,1.118,85,1.561,86,1.818,87,2.843,88,3.573,89,3.573,90,3.573,91,0.007,92,0.007]],["title/interfaces/ActiveUserData.html",[93,2.332,94,2.054]],["body/interfaces/ActiveUserData.html",[3,0.165,4,0.149,5,0.149,9,0.382,24,0.011,26,0.527,37,1.981,57,0.165,91,0.009,92,0.009,93,3.251,94,3.488,95,4.022,96,3.585,97,1.472,98,5.136,99,1.793,100,3.915,101,5.888,102,5.888,103,1.99]],["title/guards/AllowGuard.html",[0,2.716,104,3.089]],["body/guards/AllowGuard.html",[0,2.473,1,3.052,2,4.589,3,0.108,4,0.097,5,0.097,7,2.031,9,0.249,10,1.14,11,1.048,12,6.293,13,1.753,15,0.961,20,4.968,21,0.357,23,0.833,24,0.011,25,0.601,26,0.262,27,0.565,28,4.968,29,4.908,31,2.473,32,1.14,33,1.87,39,0.296,41,0.675,42,3.299,44,0.512,51,2.812,52,2.341,57,0.108,58,0.081,59,4.036,60,1.608,62,2.587,66,1.509,67,1.52,72,1.177,78,3.044,82,3.963,83,3.044,84,1.174,85,2.962,87,3.044,91,0.007,92,0.007,97,1.355,104,3.963,105,3.044,106,3.825,107,3.963,108,3.044,109,2.812,110,2.226,111,2.341,112,2.812,113,2.627,114,3.963,115,2.627,116,3.354,117,3.354,118,4.727,119,3.354,120,3.354,121,3.354,122,3.354,123,4.29,124,3.354,125,3.354,126,3.354,127,3.354,128,3.354,129,3.354,130,1.87,131,3.188,132,3.354,133,3.354,134,3.354,135,3.354,136,2.812,137,3.044,138,3.354,139,2.473,140,3.354,141,3.354,142,2.627,143,3.354,144,3.044,145,3.354,146,2.226,147,3.354,148,3.354,149,3.354]],["title/controllers/AppController.html",[150,1.373,151,3.089]],["body/controllers/AppController.html",[3,0.175,4,0.157,5,0.157,24,0.011,39,0.295,44,0.829,57,0.175,58,0.093,60,1.469,91,0.009,92,0.009,150,2.41,151,5.424,152,2.15,153,5.429,154,5.096,155,5.429,156,4.003]],["title/modules/AppModule.html",[157,1.256,158,3.089]],["body/modules/AppModule.html",[1,2.15,3,0.082,4,0.074,5,0.074,7,1.538,24,0.011,26,0.198,39,0.337,40,0.946,44,0.388,45,1.266,46,1.686,47,1.686,52,1.773,57,0.082,58,0.043,62,1.106,85,1.266,91,0.006,92,0.006,97,1.105,110,1.686,115,3.021,151,3.908,152,1.527,154,4.344,155,2.54,157,1.589,158,6.197,159,1.223,160,1.266,161,1.363,162,1.363,163,1.266,164,2.5,165,1.363,166,2.54,167,2.54,168,2.54,169,3.729,170,4.614,171,4.614,172,4.614,173,4.614,174,4.344,175,4.344,176,4.344,177,4.614,178,4.112,179,2.069,180,1.363,181,1.313,182,2.305,183,2.706,184,2.897,185,2.897,186,2.897,187,1.608,188,0.946,189,2.897,190,1.538,191,1.686,192,2.897,193,3.233,194,3.838,195,2.897,196,2.335,197,2.897,198,2.897,199,2.897,200,4.398,201,2.897,202,4.398,203,2.897,204,4.398,205,2.897,206,2.897,207,2.305,208,3.857,209,4.398,210,2.897,211,2.897,212,3.233,213,2.897,214,2.305,215,2.897,216,2.897,217,2.897,218,2.897,219,1.922,220,2.897,221,2.823,222,2.897,223,2.897,224,4.23,225,2.54,226,2.897,227,2.897,228,4.398,229,2.897,230,2.897,231,2.897,232,2.897,233,2.897,234,2.54,235,2.897,236,2.897,237,2.897,238,2.54,239,2.897,240,2.897,241,2.897,242,1.873,243,2.897,244,2.54,245,2.897,246,2.897,247,2.897,248,2.305,249,2.897,250,2.54,251,2.54,252,3.857,253,3.857]],["title/injectables/AppService.html",[41,0.526,154,2.716]],["body/injectables/AppService.html",[3,0.17,4,0.153,5,0.153,9,0.392,10,1.535,21,0.562,24,0.011,32,1.273,37,1.721,39,0.24,41,0.909,44,0.806,57,0.17,58,0.09,84,1.311,91,0.009,92,0.009,154,4.69,254,1.799,255,5.278,256,8.084,257,6.02,258,6.02,259,6.02]],["title/controllers/AuthController.html",[150,1.373,260,3.089]],["body/controllers/AuthController.html",[3,0.125,4,0.113,5,0.113,9,0.289,10,1.262,11,2.125,13,1.146,15,1.114,21,0.557,23,1.299,24,0.011,25,0.938,26,0.409,27,0.881,32,1.262,39,0.31,44,0.594,57,0.125,58,0.066,60,1.052,84,1.299,91,0.008,92,0.008,111,2.713,113,3.044,150,1.448,152,1.539,260,4.387,261,3.887,262,2.353,263,3.925,264,2.387,265,4.748,266,4.748,267,4.432,268,4.665,269,1.416,270,5.967,271,4.432,272,4.432,273,5.967,274,2.072,275,3.527,276,5.015,277,5.967,278,4.432,279,4.432,280,2.167,281,4.432,282,3.887,283,1.364,284,4.361,285,3.887,286,3.527,287,3.887,288,3.887,289,3.527,290,3.044,291,4.432,292,3.259,293,3.259,294,5.967,295,4.748,296,4.432,297,4.432,298,3.527,299,4.748,300,4.432,301,4.432]],["title/modules/AuthModule.html",[157,1.256,169,2.332]],["body/modules/AuthModule.html",[1,3.797,3,0.107,4,0.097,5,0.097,7,2.018,24,0.011,39,0.333,44,0.509,45,1.661,46,2.211,47,2.211,57,0.107,58,0.057,91,0.007,92,0.007,110,2.211,152,1.863,157,1.859,159,1.604,160,1.661,161,1.787,162,1.787,163,1.661,164,2.926,165,2.926,169,4.68,178,3.284,179,2.524,180,1.787,181,1.722,183,1.934,193,4.573,207,4.27,250,3.332,251,3.332,252,3.332,253,3.332,260,4.573,284,5.283,285,3.332,302,3.332,303,3.332,304,3.332,305,4.519,306,4.305,307,4.783,308,4.783,309,4.783,310,3.8,311,3.122,312,3.8,313,3.332,314,3.8,315,3.945,316,3.8,317,3.8,318,3.332,319,2.794,320,3.8,321,3.8,322,3.685,323,3.8,324,2.794,325,3.8,326,3.8,327,3.8,328,3.332]],["title/injectables/AuthService.html",[41,0.526,284,2.716]],["body/injectables/AuthService.html",[3,0.115,4,0.104,5,0.104,9,0.266,10,1.192,11,2.072,13,1.67,15,1.416,21,0.65,23,1.407,24,0.011,25,1.015,26,0.443,27,0.953,32,1.367,39,0.302,40,2.11,41,0.706,44,0.546,57,0.115,58,0.061,60,1.533,72,1.735,84,1.407,85,1.782,91,0.007,92,0.007,107,2.998,254,1.219,264,2.469,265,4.485,266,4.485,268,4.729,274,1.957,275,4.485,276,4.729,284,3.644,286,3.245,289,3.245,290,2.8,298,3.245,308,5.11,309,5.11,311,2.373,318,3.575,322,2.8,329,3.575,330,6.969,331,4.078,332,3.576,333,4.078,334,5.637,335,4.078,336,4.943,337,4.078,338,4.078,339,2.636,340,4.078,341,2.8,342,4.078,343,4.078]],["title/guards/AuthenticationGuardTsGuard.html",[0,2.716,115,2.886]],["body/guards/AuthenticationGuardTsGuard.html",[0,2.349,1,3.669,2,4.461,3,0.103,4,0.092,5,0.092,7,1.929,9,0.237,10,1.099,11,1.662,12,6.108,13,1.885,15,1.306,20,5.8,21,0.485,23,1.131,24,0.011,25,0.817,26,0.356,27,0.767,28,4.828,29,4.812,31,2.349,32,1.099,33,2.541,39,0.291,41,0.651,42,3.181,44,0.487,51,2.671,52,2.223,57,0.103,58,0.078,59,3.36,60,1.73,62,2.528,66,1.433,67,1.465,72,1.118,78,2.891,82,3.821,83,2.891,84,1.131,85,2.894,87,2.891,91,0.007,92,0.007,97,1.306,99,0.913,104,2.671,105,2.891,107,2.671,108,2.891,109,2.671,110,2.114,111,2.223,112,2.671,113,2.495,114,3.821,115,3.569,116,4.557,117,4.557,118,4.557,119,4.557,120,3.185,121,3.185,122,3.185,123,4.135,124,3.185,125,3.185,126,3.185,127,3.185,128,3.185,129,3.185,130,1.776,131,3.115,132,3.185,133,3.185,134,3.185,135,3.185,136,2.671,137,2.891,138,3.185,139,2.349,140,3.185,141,3.185,142,2.495,143,3.185,144,2.891,145,3.185,146,2.114,147,3.185,148,3.185,149,3.185,344,3.633,345,3.633,346,3.633]],["title/injectables/BcryptProvider.html",[41,0.526,315,3.089]],["body/injectables/BcryptProvider.html",[3,0.135,4,0.122,5,0.122,9,0.312,10,1.329,11,1.92,21,0.586,23,1.367,24,0.011,25,0.987,26,0.43,27,0.927,32,1.329,33,3.638,37,1.967,39,0.28,41,0.787,44,0.641,57,0.135,58,0.072,59,3.096,62,1.828,72,1.474,84,1.367,91,0.008,92,0.008,254,1.431,264,2.157,305,3.655,315,4.617,347,4.198,348,5.507,349,5.507,350,5.507,351,6.953,352,6.525,353,4.788,354,3.844,355,5.507,356,4.788,357,4.198,358,5.507,359,3.288,360,7.009,361,4.788,362,4.788,363,4.788]],["title/controllers/CatalogController.html",[150,1.373,364,3.089]],["body/controllers/CatalogController.html",[1,1.309,3,0.076,4,0.068,5,0.068,6,1.731,7,1.422,9,0.174,10,0.876,21,0.608,23,1.418,24,0.011,25,1.023,26,0.446,27,0.961,32,1.378,39,0.294,44,0.359,54,2.131,55,1.558,56,2.131,57,0.076,58,0.04,60,0.635,67,1.606,84,1.418,91,0.005,92,0.005,103,1.965,110,1.558,150,0.875,152,0.93,156,1.731,219,3.147,262,1.422,269,1.545,280,2.475,283,0.824,364,3.044,365,2.348,366,2.678,367,3.631,368,3.631,369,3.631,370,3.631,371,4.439,372,4.439,373,2.348,374,4.473,375,4.788,376,1.394,377,5.062,378,4.188,379,2.41,380,4.189,381,4.188,382,2.678,383,2.678,384,2.348,385,3.789,386,3.631,387,5.062,388,2.678,389,2.678,390,2.348,391,3.77,392,4.818,393,4.188,394,2.678,395,2.678,396,2.362,397,2.348,398,2.678,399,2.678,400,2.348,401,4.818,402,3.912,403,4.188,404,2.678,405,2.678,406,2.348,407,4.293,408,2.678,409,2.678,410,1.969,411,1.969,412,1.839,413,1.839,414,4.39,415,4.664,416,1.092,417,1.839,418,3.273,419,2.348,420,2.409,421,2.348,422,2.844,423,2.534,424,2.348,425,2.678,426,2.678,427,2.348,428,4.21,429,3.315,430,4.473,431,5.182,432,2.678,433,2.678,434,2.678,435,2.678,436,4.14,437,2.678,438,2.678,439,2.678,440,2.678,441,2.678,442,2.678,443,2.678,444,2.678,445,2.678,446,2.678,447,2.678,448,2.678]],["title/modules/CatalogModule.html",[157,1.256,170,2.886]],["body/modules/CatalogModule.html",[3,0.139,4,0.125,5,0.125,24,0.011,39,0.329,44,0.658,45,2.146,57,0.139,58,0.073,91,0.008,92,0.008,152,2.217,157,2.12,159,2.072,160,2.146,161,2.309,162,2.309,163,2.146,164,3.337,165,2.309,169,4.512,170,5.66,179,3.003,180,2.309,181,2.225,183,3.25,187,2.725,188,1.604,193,4.694,219,2.791,364,5.216,380,2.857,418,5.162,419,4.305,449,4.305,450,4.305,451,4.91,452,4.91,453,4.305,454,2.857,455,4.91,456,3.61,457,4.91]],["title/injectables/CatalogService.html",[41,0.526,418,2.716]],["body/injectables/CatalogService.html",[3,0.078,4,0.07,5,0.07,9,0.18,10,0.896,11,2.215,13,1.095,15,1.065,21,0.641,23,1.494,24,0.011,25,1.079,26,0.47,27,1.013,32,1.394,33,3.625,39,0.29,41,0.531,44,0.37,57,0.078,58,0.041,60,1.005,62,2.704,66,2.463,67,1.76,72,2.282,84,1.26,91,0.005,92,0.005,103,1.979,188,0.901,219,3.096,254,0.824,274,0.958,367,4.523,368,3.715,369,3.715,370,3.715,371,4.523,372,4.523,373,2.419,374,4.527,380,4.389,384,3.715,385,3.835,390,3.715,391,2.593,396,2.54,397,3.715,400,2.419,401,4.865,402,2.91,406,2.419,407,4.335,418,2.739,420,2.465,421,2.419,422,2.91,423,2.593,424,2.419,453,2.419,454,1.605,458,2.419,459,2.759,460,2.896,461,4.523,462,2.759,463,4.237,464,2.759,465,2.759,466,2.759,467,2.759,468,2.759,469,2.759,470,2.195,471,1.25,472,0.875,473,2.759,474,2.195,475,2.759,476,4.237,477,5.158,478,5.158,479,4.59,480,2.759,481,2.759,482,3.715,483,4.237,484,2.759,485,3.715,486,4.237,487,3.371,488,2.419,489,2.419]],["title/modules/CategoriesModule.html",[157,1.256,490,3.343]],["body/modules/CategoriesModule.html",[3,0.182,4,0.164,5,0.164,24,0.011,39,0.257,44,0.863,57,0.182,58,0.096,91,0.01,92,0.01,157,2.258,159,2.72,490,6.012,491,6.445]],["title/entities/Category.html",[380,2.445,492,1.713]],["body/entities/Category.html",[3,0.144,4,0.129,5,0.129,9,0.332,21,0.674,24,0.011,25,1.135,26,0.522,37,1.552,39,0.261,57,0.144,58,0.076,91,0.008,92,0.008,99,1.644,103,1.691,196,2.707,219,3.525,269,1.714,380,3.806,396,2.432,472,1.616,492,2.668,493,4.47,494,6.334,495,4.203,496,5.098,497,3.12,498,4.229,499,4.229,500,5.206,501,3.806,502,3.33,503,5.098,504,3.501,505,6.542,506,5.098,507,3.806,508,4.493,509,5.098]],["title/entities/Comment.html",[221,2.231,492,1.713]],["body/entities/Comment.html",[3,0.099,4,0.089,5,0.089,9,0.229,21,0.724,24,0.011,25,0.936,26,0.531,37,1.204,39,0.26,57,0.099,58,0.053,85,2.603,91,0.006,92,0.006,97,1.948,99,1.275,103,1.312,196,1.866,219,3.388,221,4.276,269,1.839,283,2.386,396,2.006,454,2.045,472,1.114,492,2.07,495,3.466,501,3.795,504,2.414,507,2.045,508,3.485,510,3.082,511,3.851,512,5.956,513,5.956,514,5.956,515,5.956,516,5.075,517,3.515,518,3.795,519,4.379,520,3.515,521,3.515,522,5.191,523,5.075,524,3.515,525,5.075,526,3.515,527,3.731,528,3.515,529,5.075,530,5.191,531,3.515,532,3.731,533,3.515,534,5.075,535,3.515,536,4.379,537,3.515,538,5.075,539,5.075,540,3.515,541,3.731,542,3.515,543,5.505,544,5.191,545,2.151,546,2.414,547,2.584,548,3.082]],["title/controllers/CommentsController.html",[150,1.373,549,3.089]],["body/controllers/CommentsController.html",[1,1.513,3,0.087,4,0.079,5,0.079,6,2,7,1.643,9,0.202,10,0.978,11,2.054,13,1.195,15,0.777,21,0.516,23,1.204,24,0.011,25,0.869,26,0.379,27,0.816,32,1.17,39,0.31,44,0.414,57,0.087,58,0.046,60,1.097,67,1.303,84,1.204,91,0.006,92,0.006,94,3,96,1.894,97,1.731,103,2.071,110,1.8,130,2.259,150,1.011,152,1.074,188,1.011,221,3.258,262,1.643,269,1.313,274,1.921,280,2.259,283,1.888,375,4.067,376,1.556,378,3.397,379,2.184,381,3.397,392,4.214,410,2.275,412,2.125,413,2.125,414,3.967,415,4.214,416,1.262,427,2.713,428,3.576,429,2.815,430,2.125,460,1.95,471,1.402,472,0.981,527,3.397,532,3.397,545,1.894,549,3.397,550,2.713,551,4.903,552,4.85,553,4.85,554,4.85,555,2.713,556,4.731,557,3.094,558,3.094,559,3.094,560,2.713,561,4.073,562,4.491,563,3.094,564,5.38,565,3.094,566,3.094,567,3.397,568,2.462,569,4.214,570,4.511,571,2.713,572,4.621,573,2.713,574,3.094,575,3.094,576,2.125,577,3.576,578,2.713,579,1.455,580,2.713,581,3.174,582,2.275,583,2.713,584,1.8,585,2.462,586,3.094,587,3.094,588,2.713,589,2.713,590,3.094,591,3.094,592,4.052,593,4.052,594,3.094,595,3.094,596,3.094,597,3.094]],["title/modules/CommentsModule.html",[157,1.256,171,2.886]],["body/modules/CommentsModule.html",[3,0.125,4,0.113,5,0.113,24,0.011,39,0.332,44,0.594,57,0.125,58,0.066,91,0.008,92,0.008,97,1.499,152,2.072,157,2.016,159,1.87,160,1.937,161,2.085,162,2.085,163,1.937,164,3.173,165,3.173,169,4.306,171,5.796,175,5.015,179,2.807,180,2.085,181,2.008,183,3.037,187,2.46,188,1.448,219,2.608,221,2.353,311,2.579,454,2.579,456,3.259,545,2.713,549,4.959,577,5.422,578,3.887,585,3.527,598,3.887,599,3.887,600,3.887,601,3.887,602,5.444,603,4.432,604,4.432,605,4.432,606,4.432,607,4.432]],["title/injectables/CommentsService.html",[41,0.526,577,2.716]],["body/injectables/CommentsService.html",[3,0.079,4,0.071,5,0.071,9,0.182,10,0.904,11,1.996,13,1.505,15,1.074,21,0.543,23,1.267,24,0.011,25,0.915,26,0.399,27,0.859,32,1.099,38,2.089,39,0.291,41,0.535,44,0.374,57,0.079,58,0.042,60,1.381,62,2.527,66,2.048,67,1.464,72,1.931,84,1.131,91,0.005,92,0.005,94,2.846,96,1.707,97,1.731,103,2.03,130,2.089,188,0.911,219,3.012,221,2.269,254,0.834,274,1.803,283,2.037,354,2.615,396,1.749,454,1.623,460,3.278,470,2.22,471,1.264,472,0.884,474,2.22,479,3.818,487,2.22,511,1.804,527,3.818,532,4.279,545,1.707,546,1.916,551,4.31,552,3.747,553,3.747,554,3.747,555,3.747,556,4.31,560,3.747,561,3.945,562,4.552,567,3.142,568,2.22,569,4.547,570,4.279,571,3.747,577,2.763,579,1.312,580,2.446,581,3.567,584,1.623,585,2.22,588,2.446,589,3.747,608,2.446,609,2.79,610,5.194,611,3.358,612,5.194,613,2.79,614,2.79,615,2.79,616,2.79,617,1.804,618,2.22,619,2.22,620,2.79,621,2.79,622,4.273,623,2.79,624,2.79,625,4.273,626,2.79,627,2.79,628,2.79,629,2.79,630,2.446,631,2.22,632,5.194,633,4.273,634,2.79,635,4.273,636,2.79,637,4.273,638,4.273,639,4.273,640,4.273,641,5.821,642,4.273,643,2.79]],["title/classes/CreateCategoryDto.html",[58,0.063,374,2.886]],["body/classes/CreateCategoryDto.html",[3,0.168,4,0.151,5,0.151,9,0.387,21,0.554,24,0.011,25,1.216,26,0.407,37,1.707,39,0.237,57,0.168,58,0.108,91,0.009,92,0.009,99,1.808,269,1.409,374,4.941,420,4.186,644,2.195,645,5.206,646,5.937,647,5.937,648,3.26,649,3.82,650,4.365,651,2.266,652,5.206]],["title/classes/CreateCommentDto.html",[58,0.063,556,2.886]],["body/classes/CreateCommentDto.html",[3,0.147,4,0.132,5,0.132,9,0.339,21,0.681,24,0.011,26,0.5,27,1.134,37,1.573,39,0.208,57,0.147,58,0.099,91,0.008,92,0.008,99,1.666,103,1.986,269,1.731,396,1.753,511,4.716,527,5.363,532,5.363,556,4.553,644,1.924,648,3.004,649,3.52,651,1.987,653,6.734,654,4.564,655,4.564,656,5.205,657,5.813,658,5.205,659,5.205,660,5.805,661,3.713]],["title/injectables/CreateGoogleUserProvider.html",[41,0.526,662,2.716]],["body/injectables/CreateGoogleUserProvider.html",[3,0.132,4,0.119,5,0.119,9,0.304,10,1.307,11,1.897,13,1.208,15,1.553,21,0.577,23,1.346,24,0.011,25,0.971,26,0.423,27,0.912,32,0.988,39,0.306,40,1.526,41,0.774,44,0.626,57,0.132,58,0.07,60,1.108,62,1.783,66,1.842,67,1.742,70,2.197,72,1.438,84,1.017,91,0.008,92,0.008,97,1.74,188,1.526,254,1.396,264,2.131,274,1.622,376,1.573,379,1.481,460,3.11,471,2.117,472,1.481,611,4.477,617,3.02,662,3.995,663,5.511,664,4.238,665,3.717,666,5.419,667,3.208,668,4.672,669,5.419,670,5.264,671,4.672,672,3.434,673,2.859,674,4.096,675,4.096,676,4.672,677,4.672,678,4.096,679,4.096]],["title/classes/CreateManyUsersDto.html",[58,0.063,680,3.089]],["body/classes/CreateManyUsersDto.html",[3,0.147,4,0.132,5,0.132,9,0.338,21,0.484,24,0.011,26,0.543,39,0.306,57,0.147,58,0.109,85,3.184,91,0.008,92,0.008,97,1.304,99,1.663,269,1.231,376,1.748,416,2.116,644,1.918,648,2.998,651,1.981,680,4.865,681,5.265,682,5.265,683,4.551,684,4.458,685,4.258,686,5.19,687,5.802,688,5.265,689,5.802,690,5.19,691,4.551,692,5.19,693,5.802,694,5.802,695,4.544,696,3.355,697,3.02,698,4.551]],["title/classes/CreatePostDto.html",[58,0.063,699,2.572]],["body/classes/CreatePostDto.html",[3,0.068,4,0.061,5,0.061,9,0.157,21,0.666,24,0.011,26,0.541,27,1.093,31,2.467,37,1.728,39,0.249,57,0.068,58,0.071,85,2.725,91,0.005,92,0.005,99,1.19,103,0.987,131,1.795,190,2.026,269,1.694,283,2.28,379,2.349,416,0.984,429,2.41,502,1.943,511,4.031,518,3.412,548,3.347,561,2.118,569,1.657,644,0.892,648,2.657,649,2.858,650,1.774,651,0.921,661,3.324,687,3.347,688,3.037,689,3.347,691,2.116,693,4.152,694,3.347,695,4.027,697,1.404,698,4.72,699,2.336,700,6.387,701,1.92,702,4.152,703,3.768,704,5.388,705,4.152,706,3.481,707,4.027,708,3.791,709,4.72,710,4.666,711,5.386,712,2.413,713,2.413,714,3.817,715,3.817,716,4.584,717,2.413,718,2.413,719,3.294,720,2.413,721,5.863,722,2.413,723,2.413,724,3.817,725,4.72,726,5.382,727,3.347,728,2.413,729,2.413,730,4.152,731,3.817,732,3.817,733,2.413,734,2.413,735,3.817,736,4.72,737,3.817,738,3.817,739,2.413,740,2.413,741,2.413,742,2.413,743,3.037,744,4.283,745,2.413,746,4.72,747,4.72,748,3.037,749,3.347,750,3.347,751,3.347,752,3.347,753,3.347,754,2.413,755,4.666,756,3.347,757,3.347,758,3.347,759,2.413,760,2.413,761,3.037,762,2.413,763,2.413,764,2.413,765,2.413,766,1.774,767,1.92,768,1.92,769,3.037,770,3.347,771,3.037,772,3.037,773,2.116,774,2.116,775,1.774,776,1.774,777,4.801,778,2.413,779,2.116,780,2.336,781,2.116,782,2.413,783,2.116,784,2.116,785,2.413,786,2.413,787,2.413,788,2.413,789,2.413,790,2.413,791,3.037,792,2.413,793,2.116]],["title/classes/CreatePostMetaOptionsDto.html",[58,0.063,719,2.572]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.166,4,0.149,5,0.149,9,0.383,21,0.549,24,0.011,26,0.403,37,1.696,39,0.235,57,0.166,58,0.107,91,0.009,92,0.009,99,1.796,190,3.796,269,1.394,283,2.2,644,2.172,648,3.24,651,2.243,719,4.376,769,5.689,775,5.256,791,6.132,794,3.968,795,5.153,796,5.877,797,5.877]],["title/injectables/CreatePostProvider.html",[41,0.526,798,2.716]],["body/injectables/CreatePostProvider.html",[3,0.102,4,0.092,5,0.092,9,0.235,10,1.094,11,1.656,13,1.563,15,1.3,21,0.483,23,1.126,24,0.011,25,0.813,26,0.354,27,0.764,32,0.764,38,2.529,39,0.306,40,1.69,41,0.648,44,0.484,57,0.102,58,0.054,60,1.435,66,2.385,67,1.705,70,2.433,72,1.861,84,1.126,86,2.633,91,0.007,92,0.007,94,3.229,96,2.209,97,1.659,131,2.433,139,2.334,188,1.179,254,1.079,264,1.861,274,1.253,280,1.765,283,2.032,292,2.654,293,2.654,332,3.556,339,2.334,376,2.036,379,1.144,460,2.787,471,1.636,472,1.144,579,1.698,584,2.101,618,2.873,672,2.654,679,4.536,684,2.209,699,4.452,707,2.479,708,4.519,761,2.873,798,3.345,799,5.302,800,3.165,801,2.654,802,5.791,803,4.359,804,3.61,805,4.536,806,3.61,807,3.553,808,2.654,809,3.165,810,2.873,811,3.165,812,5.139,813,3.553,814,2.873,815,3.61,816,3.61,817,3.61,818,3.61,819,3.165,820,2.479,821,3.165,822,2.101,823,3.61,824,3.165,825,3.61,826,3.61,827,2.479,828,3.61,829,3.61]],["title/classes/CreateProductDto.html",[58,0.063,385,2.445]],["body/classes/CreateProductDto.html",[3,0.103,4,0.093,5,0.093,9,0.238,21,0.701,24,0.011,25,1.103,26,0.515,27,1.077,37,1.823,39,0.208,57,0.147,58,0.078,67,1.028,91,0.007,92,0.007,99,1.31,103,1.716,130,2.548,219,3.418,269,1.783,379,2.572,380,3.033,385,3.033,396,1.755,416,1.488,420,4.471,429,3.572,482,5.333,644,1.348,648,3.18,649,3.726,651,1.392,660,4.84,661,3.377,695,5.277,743,5.98,744,4.148,766,2.682,780,3.722,830,2.682,831,5.333,832,5.585,833,5.585,834,5.212,835,3.648,836,5.212,837,3.199,838,3.648,839,3.648,840,3.648,841,3.648,842,3.648,843,3.648,844,5.585,845,3.648,846,3.648,847,3.199,848,3.199,849,3.199,850,2.903,851,3.648,852,3.199,853,2.903]],["title/classes/CreateTagDto.html",[58,0.063,854,2.886]],["body/classes/CreateTagDto.html",[3,0.121,4,0.108,5,0.108,9,0.278,21,0.694,24,0.011,25,1.04,26,0.509,27,0.859,37,1.944,39,0.232,57,0.121,58,0.087,91,0.007,92,0.007,99,1.461,269,1.764,379,2.098,416,1.741,644,1.578,648,2.998,649,3.772,650,3.138,651,1.629,661,3.616,695,4.544,706,4.864,707,5.106,711,3.995,744,3.397,746,6.23,747,6.23,748,4.629,749,5.1,750,5.1,751,5.1,752,5.1,753,5.1,767,3.397,768,3.397,769,4.629,770,5.1,777,5.223,779,3.743,783,3.743,784,3.743,854,3.995,855,6.727,856,3.743,857,5.802,858,4.269,859,4.269,860,4.269,861,4.269,862,4.269,863,4.269,864,4.269,865,4.269,866,4.269,867,4.269,868,4.269,869,3.743,870,4.269]],["title/classes/CreateUserDto.html",[58,0.063,685,2.332]],["body/classes/CreateUserDto.html",[3,0.114,4,0.102,5,0.102,9,0.262,21,0.679,24,0.011,26,0.499,27,1.022,37,1.869,39,0.277,55,4.235,57,0.114,58,0.096,91,0.007,92,0.007,97,1.403,99,1.403,100,3.135,101,5.351,103,1.443,130,2.729,146,4.383,242,4.146,269,1.727,379,1.275,416,1.64,644,1.486,648,3.139,649,3.864,650,2.956,651,2.131,652,6.074,661,3.264,681,5.994,685,3.098,710,3.2,748,4.442,766,2.956,767,3.2,768,3.2,777,4.104,780,3.416,869,4.895,871,3.2,872,4.714,873,4.714,874,4.021,875,4.021,876,4.021,877,4.021,878,4.021,879,4.021,880,4.021,881,6.927,882,5.582,883,5.582,884,5.582,885,5.582,886,5.582,887,5.582,888,5.582,889,5.582,890,4.021,891,4.021,892,4.021,893,4.895,894,3.526,895,4.021,896,4.021,897,3.526,898,4.021]],["title/injectables/CreateUserProvider.html",[41,0.526,899,2.716]],["body/injectables/CreateUserProvider.html",[3,0.099,4,0.089,5,0.089,9,0.228,10,1.069,11,1.626,13,1.535,15,1.27,21,0.472,23,1.1,24,0.011,25,0.794,26,0.346,27,0.746,32,0.739,35,3.092,38,1.708,39,0.296,40,2.125,41,0.633,44,0.468,57,0.099,58,0.052,60,1.408,66,2.565,67,1.945,70,2.792,72,1.827,84,0.761,86,3.021,91,0.006,92,0.006,97,1.491,100,2.47,131,3.059,139,3.267,142,3.47,188,1.141,242,2.259,254,1.044,264,1.827,274,1.213,305,4.504,311,2.033,341,2.399,376,1.176,379,1.602,460,2.745,471,1.583,472,1.108,579,1.643,611,3.838,617,2.259,663,4.724,665,2.78,667,2.399,673,2.138,685,3.993,696,2.259,807,3.47,814,4.021,820,3.47,899,3.267,900,4.431,901,4.911,902,3.493,903,4.431,904,3.493,905,3.633,906,3.493,907,3.493,908,5.936,909,3.063,910,3.493,911,3.493,912,4.431,913,4.021,914,4.021,915,5.053,916,4.431,917,3.063,918,3.493,919,3.493,920,3.493,921,3.493,922,4.724,923,3.493,924,3.493,925,3.493,926,3.493,927,3.493,928,2.78]],["title/injectables/DataResponseInterceptor.html",[41,0.526,212,3.089]],["body/injectables/DataResponseInterceptor.html",[3,0.139,4,0.125,5,0.125,9,0.322,10,1.356,13,1.277,15,1.61,21,0.598,23,1.395,24,0.011,25,1.007,26,0.439,27,0.946,29,5.171,31,3.193,32,1.045,39,0.284,41,0.803,44,0.661,45,2.158,57,0.139,58,0.074,59,3.193,60,1.172,84,1.075,91,0.008,92,0.008,108,5.662,109,3.63,194,4.868,212,4.711,214,5.662,254,1.476,354,3.922,929,6.239,930,4.33,931,6.409,932,4.33,933,4.938,934,6.409,935,5.662,936,7.53,937,4.938,938,6.409,939,4.938,940,4.938,941,4.938,942,4.938,943,4.938,944,4.938,945,4.938]],["title/injectables/FindOneByGoogleIdProvider.html",[41,0.526,946,2.716]],["body/injectables/FindOneByGoogleIdProvider.html",[3,0.14,4,0.126,5,0.126,9,0.324,10,1.361,11,1.954,13,1.284,15,1.616,21,0.6,23,1.401,24,0.011,25,1.011,26,0.441,27,0.949,32,1.051,37,1.693,39,0.301,40,1.622,41,0.806,44,0.665,57,0.14,58,0.074,60,1.178,72,1.528,84,1.081,91,0.008,92,0.008,97,1.248,146,4.151,188,1.622,254,1.484,264,2.196,274,1.724,460,3.184,471,2.25,472,1.575,611,4.613,617,3.211,664,4.367,667,3.411,673,3.04,946,4.159,947,5.677,948,4.355,949,5.64,950,4.966,951,5.64,952,4.966,953,3.411,954,4.966]],["title/injectables/FindOneUserByEmailProvider.html",[41,0.526,955,2.716]],["body/injectables/FindOneUserByEmailProvider.html",[3,0.127,4,0.115,5,0.115,9,0.294,10,1.278,11,1.864,13,1.167,15,1.518,21,0.564,23,1.315,24,0.011,25,0.949,26,0.414,27,0.891,32,0.955,37,1.615,38,2.953,39,0.29,40,1.474,41,0.757,42,2.762,44,0.605,57,0.127,58,0.068,60,1.071,66,2.382,67,1.703,70,2.123,72,1.389,84,0.983,91,0.008,92,0.008,97,2.08,100,3.328,146,3.961,188,1.474,254,1.349,264,2.095,274,1.567,379,1.431,460,3.067,471,2.045,472,1.431,611,4.401,617,2.918,619,3.591,631,3.591,667,3.1,673,2.762,678,3.958,905,2.762,928,3.591,947,5.417,955,3.905,956,3.958,957,5.296,958,4.513,959,5.296,960,4.513,961,4.513,962,3.318]],["title/injectables/GenerateTokensProvider.html",[41,0.526,306,2.445]],["body/injectables/GenerateTokensProvider.html",[3,0.107,4,0.096,5,0.096,9,0.247,10,1.133,11,2.025,13,1.385,15,1.346,16,3.017,17,5.587,18,4.637,19,4.365,21,0.58,23,1.47,24,0.011,25,0.976,26,0.463,27,0.917,32,1.133,39,0.295,40,2.03,41,0.671,44,0.508,45,1.657,46,2.206,47,2.206,57,0.107,58,0.057,60,1.271,61,2.604,62,1.447,64,2.452,71,5.92,72,1.649,82,2.788,84,1.166,91,0.007,92,0.007,94,1.854,97,1.858,100,1.854,101,2.788,102,2.788,103,1.912,137,4.263,254,1.133,264,2.275,274,1.86,306,3.117,319,2.788,359,3.68,541,3.939,545,2.321,568,3.017,584,2.206,963,5.373,964,3.017,965,5.358,966,5.358,967,3.792,968,5.358,969,3.792,970,3.792,971,6.752,972,5.373,973,3.792,974,3.017,975,3.792,976,3.792,977,3.325,978,3.325,979,3.325,980,3.325,981,3.325,982,3.325,983,5.448,984,3.792,985,3.792,986,3.792,987,3.792,988,3.325,989,3.792,990,3.792,991,3.792]],["title/classes/GetPostsBaseDto.html",[58,0.063,992,3.089]],["body/classes/GetPostsBaseDto.html",[3,0.144,4,0.129,5,0.129,9,0.331,21,0.609,24,0.011,26,0.539,27,1.124,39,0.304,57,0.144,58,0.114,91,0.008,92,0.008,99,1.641,269,1.549,416,2.073,518,4.689,644,1.879,651,1.94,661,3.672,697,2.958,771,5.74,992,5.303,993,5.74,994,4.045,995,6.325,996,6.325,997,6.529,998,5.083,999,5.083,1000,5.725,1001,4.222,1002,3.737,1003,4.045,1004,3.286,1005,3.491]],["title/classes/GetPostsDto.html",[58,0.063,1004,2.716]],["body/classes/GetPostsDto.html",[3,0.154,4,0.139,5,0.139,24,0.011,26,0.511,39,0.312,57,0.154,58,0.117,91,0.009,92,0.009,416,2.23,518,4.55,644,2.021,651,2.087,661,3.798,697,3.182,771,5.938,992,5.486,993,4.351,994,4.351,995,4.795,996,4.795,1000,6.544,1001,4.825,1002,4.02,1003,4.351,1004,4.422,1005,4.697]],["title/classes/GetUsersParamDto.html",[58,0.063,1006,2.886]],["body/classes/GetUsersParamDto.html",[3,0.153,4,0.138,5,0.138,9,0.354,21,0.507,24,0.011,26,0.467,27,1.005,39,0.297,57,0.153,58,0.111,91,0.009,92,0.009,97,1.712,99,1.712,103,1.761,269,1.289,379,1.723,396,2.705,416,2.216,644,2.009,651,2.074,661,3.467,684,4.169,697,3.162,710,4.324,711,4.679,772,5.421,777,5.008,1006,4.679,1007,5.973,1008,4.765,1009,6.812,1010,5.434,1011,5.434,1012,5.434,1013,5.434]],["title/controllers/GoogleAuthenticationController.html",[150,1.373,324,3.089]],["body/controllers/GoogleAuthenticationController.html",[3,0.142,4,0.128,5,0.128,9,0.328,10,1.374,13,1.303,15,1.266,21,0.47,23,1.097,24,0.011,25,0.792,26,0.345,27,0.744,32,1.066,39,0.313,40,1.646,44,0.675,57,0.142,58,0.075,60,1.196,84,1.097,91,0.008,92,0.008,111,3.084,113,3.461,150,1.646,152,1.749,262,2.675,263,2.932,264,2.211,269,1.196,280,2.463,283,2.211,287,4.418,288,4.418,290,3.461,295,4.01,307,4.645,324,4.773,328,4.418,1014,5.693,1015,4.418,1016,5.039,1017,6.493,1018,5.693,1019,4.418,1020,5.211,1021,5.039,1022,5.039,1023,4.418,1024,5.039,1025,5.039,1026,5.039,1027,5.039,1028,5.039]],["title/injectables/GoogleAuthenticationService.html",[41,0.526,307,2.716]],["body/injectables/GoogleAuthenticationService.html",[3,0.095,4,0.085,5,0.085,9,0.218,10,1.037,11,1.588,13,1.833,15,1.232,18,4.381,19,4.124,21,0.595,23,1.067,24,0.011,25,0.77,26,0.397,27,0.724,32,1.037,39,0.292,40,2.084,41,0.614,42,2.051,44,0.449,45,1.465,47,1.95,48,2.667,57,0.095,58,0.05,59,2.167,60,1.375,61,2.302,62,2.706,64,3.17,66,1.934,67,1.634,70,1.576,72,1.784,84,1.067,86,1.706,91,0.006,92,0.006,97,1.705,99,1.232,100,2.834,102,2.464,131,1.576,254,1.002,263,1.95,264,1.784,274,1.164,290,2.302,299,2.667,306,4.369,307,3.17,311,1.95,322,2.302,332,3.671,339,2.167,341,2.302,359,3.367,376,1.129,664,3.548,801,2.464,813,2.302,814,2.667,872,4.262,873,4.262,922,2.667,953,4.381,962,2.464,963,2.667,1018,4.299,1019,4.299,1020,4.662,1023,2.939,1029,5.952,1030,2.939,1031,5.797,1032,7.09,1033,4.903,1034,3.351,1035,3.351,1036,2.939,1037,5.797,1038,2.939,1039,3.351,1040,3.351,1041,4.903,1042,3.351,1043,3.351,1044,3.351,1045,2.939,1046,3.351,1047,3.351,1048,3.351,1049,3.351,1050,3.351,1051,3.351,1052,3.351,1053,3.351,1054,3.351,1055,3.351,1056,3.351,1057,2.302,1058,3.351,1059,3.351,1060,3.351,1061,3.351,1062,3.351,1063,3.351,1064,2.939,1065,2.939]],["title/classes/GoogleTokenDto.html",[58,0.063,1020,2.886]],["body/classes/GoogleTokenDto.html",[3,0.171,4,0.153,5,0.153,9,0.394,21,0.564,24,0.011,26,0.414,37,1.725,39,0.241,57,0.171,58,0.109,64,5.042,91,0.009,92,0.009,99,1.827,269,1.433,644,2.233,648,3.534,651,2.306,1020,4.993,1066,6.375,1067,4.807,1068,6.041]],["title/interfaces/GoogleUser.html",[93,2.332,670,2.886]],["body/interfaces/GoogleUser.html",[3,0.162,4,0.145,5,0.145,9,0.373,24,0.011,26,0.544,37,2.063,57,0.162,91,0.009,92,0.009,93,3.176,95,3.929,99,1.767,100,3.884,670,4.831,872,5.841,873,5.841,953,5.456,1069,5.017,1070,5.017]],["title/injectables/HashingProvider.html",[41,0.526,305,2.445]],["body/injectables/HashingProvider.html",[3,0.146,4,0.131,5,0.131,9,0.337,10,1.397,21,0.616,23,1.438,24,0.011,25,1.038,26,0.452,27,0.975,32,1.397,33,3.746,37,1.977,39,0.207,41,0.827,44,0.693,57,0.146,58,0.077,91,0.008,92,0.008,254,1.546,305,3.843,348,6.379,349,5.791,350,4.537,351,6.942,352,6.379,354,4.042,355,5.791,1071,4.537,1072,8.229,1073,5.174,1074,5.174,1075,5.174]],["title/modules/MailModule.html",[157,1.256,172,2.886]],["body/modules/MailModule.html",[3,0.126,4,0.114,5,0.114,11,1.226,24,0.011,39,0.311,40,1.463,44,0.6,45,1.957,57,0.126,58,0.067,67,1.262,85,1.957,91,0.008,92,0.008,97,1.125,157,2.026,159,1.89,160,1.957,161,2.106,162,2.106,163,1.957,164,3.189,165,3.189,172,5.459,179,2.826,180,2.106,181,2.029,183,2.279,194,4.384,234,3.927,238,3.927,244,3.927,263,2.606,502,3.058,716,3.292,901,5.431,1076,3.927,1077,3.927,1078,3.927,1079,4.478,1080,6.008,1081,4.478,1082,4.478,1083,4.417,1084,3.564,1085,3.927,1086,3.076,1087,6.008,1088,4.478,1089,4.478,1090,4.478,1091,4.478,1092,4.478,1093,4.478,1094,4.478,1095,4.478,1096,4.478,1097,4.478,1098,4.478,1099,3.927,1100,4.478,1101,4.478,1102,4.478,1103,4.478,1104,4.478,1105,3.927,1106,4.478]],["title/injectables/MailService.html",[41,0.526,901,2.716]],["body/injectables/MailService.html",[3,0.136,4,0.122,5,0.122,9,0.314,10,1.334,11,1.925,15,1.21,21,0.588,23,1.372,24,0.011,25,1.104,26,0.432,27,0.93,31,4.076,32,1.018,33,3.082,39,0.281,41,0.79,44,0.645,57,0.136,58,0.072,72,1.482,91,0.008,92,0.008,97,1.945,100,3.082,130,2.354,156,3.113,254,1.439,545,2.947,716,3.539,901,4.076,988,5.527,1083,4.634,1084,3.831,1099,6.163,1107,4.222,1108,6.304,1109,4.815,1110,7.941,1111,4.815,1112,6.304,1113,4.815,1114,4.815,1115,4.815,1116,4.815,1117,4.815,1118,4.815,1119,6.304,1120,4.222,1121,4.222,1122,4.815,1123,4.815,1124,4.222,1125,4.815,1126,4.815,1127,4.815]],["title/entities/MetaOption.html",[492,1.713,1128,2.445]],["body/entities/MetaOption.html",[3,0.129,4,0.116,5,0.116,9,0.298,21,0.71,24,0.011,26,0.536,37,1.446,39,0.243,57,0.129,58,0.068,91,0.008,92,0.008,99,1.531,103,1.575,191,4.555,196,2.428,269,1.806,283,2.459,396,2.307,472,1.45,492,2.485,495,3.987,497,2.799,501,3.545,502,3.101,507,3.545,518,4.252,519,5.037,530,4.848,536,5.037,544,4.848,546,3.141,547,3.362,736,5.343,791,5.453,794,4.345,1128,3.545,1129,4.01,1130,5.453,1131,5.453,1132,4.573,1133,4.573,1134,4.573,1135,4.01,1136,4.573,1137,4.573,1138,4.573,1139,4.573,1140,4.01,1141,4.573,1142,4.573]],["title/controllers/MetaOptionsController.html",[150,1.373,1143,3.089]],["body/controllers/MetaOptionsController.html",[3,0.145,4,0.131,5,0.131,9,0.335,10,1.392,13,1.33,15,1.292,21,0.48,23,1.12,24,0.011,25,0.808,26,0.352,27,0.759,32,1.088,39,0.29,40,1.68,44,0.689,57,0.145,58,0.077,60,1.22,84,1.12,91,0.008,92,0.008,150,1.68,152,1.786,190,3.493,191,3.828,262,2.731,264,2.233,269,1.22,280,2.515,283,2.353,293,3.781,376,2.215,579,2.419,703,4.093,719,4.947,776,3.781,794,3.652,1105,5.769,1143,4.837,1144,4.51,1145,4.51,1146,5.143,1147,4.69,1148,4.51,1149,4.51,1150,5.143,1151,4.093,1152,5.143]],["title/modules/MetaOptionsModule.html",[157,1.256,173,2.886]],["body/modules/MetaOptionsModule.html",[3,0.15,4,0.135,5,0.135,24,0.011,39,0.319,44,0.712,57,0.15,58,0.08,91,0.009,92,0.009,152,2.333,157,2.202,159,2.244,160,2.324,161,2.501,162,2.501,163,2.324,164,3.465,165,2.501,173,5.599,179,3.161,180,2.501,181,2.409,183,2.706,187,2.951,188,1.737,190,3.568,191,3.094,794,2.951,1128,3.094,1143,5.416,1147,5.271,1148,4.662,1149,4.662,1153,4.662,1154,4.662,1155,5.317,1156,5.317,1157,3.652,1158,5.317]],["title/injectables/MetaOptionsService.html",[41,0.526,1147,2.716]],["body/injectables/MetaOptionsService.html",[3,0.137,4,0.124,5,0.124,9,0.317,10,1.343,11,1.935,13,1.259,15,1.595,21,0.593,23,1.383,24,0.011,25,0.998,26,0.435,27,0.937,32,1.03,39,0.31,40,1.59,41,0.795,44,0.652,57,0.137,58,0.073,60,1.155,72,1.498,84,1.06,91,0.008,92,0.008,188,1.59,190,3.371,254,1.455,264,2.175,274,1.69,283,1.498,376,2.138,460,3.16,471,2.206,472,1.544,579,2.29,719,4.875,776,3.579,794,3.922,1128,3.695,1145,5.568,1147,4.105,1157,3.344,1159,6.196,1160,4.269,1161,4.869,1162,4.869,1163,5.568,1164,4.869,1165,4.269,1166,4.869,1167,4.869]],["title/interfaces/Paginated.html",[93,2.332,1168,2.886]],["body/interfaces/Paginated.html",[3,0.155,4,0.139,5,0.139,9,0.357,24,0.011,26,0.571,37,1.912,57,0.155,91,0.009,92,0.009,93,3.045,95,3.768,99,1.722,103,2.024,190,4.156,354,4.791,935,4.365,972,5.947,1168,4.706,1169,4.81,1170,6.864,1171,7.828,1172,4.81,1173,4.81,1174,4.81,1175,4.81,1176,4.81,1177,4.81,1178,4.81,1179,4.81]],["title/modules/PaginationModule.html",[157,1.256,174,2.716]],["body/modules/PaginationModule.html",[3,0.157,4,0.142,5,0.142,24,0.011,39,0.276,44,0.747,57,0.157,58,0.083,91,0.009,92,0.009,157,2.249,159,2.352,160,2.436,161,2.622,162,2.622,163,2.436,164,3.54,165,3.54,174,5.408,179,3.255,180,2.622,181,2.526,1180,4.888,1181,4.888,1182,4.888,1183,5.603,1184,5.574,1185,5.574]],["title/injectables/PaginationProvider.html",[41,0.526,1183,2.716]],["body/injectables/PaginationProvider.html",[3,0.103,4,0.092,5,0.092,9,0.237,10,1.101,11,1.664,13,0.941,15,1.308,21,0.486,23,1.323,24,0.011,25,0.818,26,0.416,27,0.768,32,0.77,33,2.545,35,4.785,39,0.291,40,1.7,41,0.652,44,0.488,49,2.5,52,2.228,57,0.103,58,0.054,60,0.864,62,2.784,67,1.026,72,1.602,84,0.793,91,0.008,92,0.007,190,1.933,254,1.088,264,1.87,354,3.185,376,1.226,460,3.169,472,1.154,561,4.402,562,4.596,569,4.816,935,2.897,972,2.897,1001,4.286,1003,2.897,1168,2.5,1170,3.192,1172,3.192,1173,3.192,1174,3.192,1175,5.327,1176,3.192,1177,3.192,1178,3.192,1179,3.192,1183,3.365,1186,3.192,1187,6.075,1188,3.64,1189,3.64,1190,3.64,1191,3.64,1192,5.205,1193,3.64,1194,3.64,1195,3.64,1196,3.64,1197,3.64,1198,3.64,1199,5.205,1200,5.205,1201,5.205,1202,4.564,1203,3.64,1204,5.205,1205,3.64,1206,3.64,1207,3.64,1208,3.64,1209,3.64,1210,3.64,1211,3.64,1212,3.64,1213,3.64,1214,3.64,1215,3.64,1216,3.64,1217,3.64]],["title/classes/PaginationQueryDto.html",[58,0.063,1001,2.716]],["body/classes/PaginationQueryDto.html",[3,0.149,4,0.134,5,0.134,9,0.343,21,0.624,24,0.011,26,0.545,27,1.139,39,0.267,57,0.149,58,0.11,91,0.008,92,0.008,99,1.679,103,2.103,269,1.585,561,4.072,562,4.49,644,1.948,651,2.011,661,3.734,697,3.066,1001,4.319,1002,5.393,1218,4.62,1219,6.681,1220,5.269,1221,5.269,1222,7.336]],["title/classes/PatchPostDto.html",[58,0.063,1223,2.886]],["body/classes/PatchPostDto.html",[3,0.155,4,0.139,5,0.139,9,0.357,21,0.512,24,0.011,26,0.376,39,0.298,57,0.155,58,0.103,91,0.009,92,0.009,99,1.722,103,1.772,269,1.302,283,2.109,376,1.847,379,1.739,396,2.713,403,4.033,416,2.237,644,2.028,648,3.105,651,2.094,695,4.706,699,3.357,701,4.365,743,4.365,772,5.453,808,4.033,1005,4.706,1223,4.706,1224,6.009,1225,6.853,1226,5.453,1227,5.486,1228,5.486,1229,4.365]],["title/classes/PatchUserDto.html",[58,0.063,1230,3.089]],["body/classes/PatchUserDto.html",[3,0.175,4,0.158,5,0.158,24,0.011,39,0.295,57,0.175,58,0.093,91,0.009,92,0.009,376,2.092,644,2.297,685,3.449,696,4.018,871,4.945,1005,5.078,1229,4.945,1230,5.436,1231,5.449,1232,7.394,1233,5.449,1234,5.449]],["title/entities/Post.html",[283,1.293,492,1.713]],["body/entities/Post.html",[3,0.075,4,0.067,5,0.067,9,0.173,21,0.717,24,0.011,26,0.56,27,1.119,37,1.741,38,2.01,39,0.279,57,0.075,58,0.04,85,3.488,91,0.005,92,0.005,97,1.63,99,1.033,103,1.063,130,2.771,190,2.183,191,1.544,196,1.409,221,3.445,269,1.823,283,1.549,396,1.695,429,2.562,472,0.841,492,1.676,495,2.929,497,4.28,498,4.195,499,3.665,501,4.608,502,3.56,504,1.822,507,4.178,508,2.823,511,3.254,518,2.392,522,2.111,543,3.271,544,2.111,545,1.624,547,3.022,551,3.457,702,4.413,703,4.881,704,5.565,705,4.413,706,3.7,707,3.457,708,3.254,709,4.413,719,1.624,755,4.881,773,2.326,774,2.326,775,1.95,776,1.95,780,4.28,794,1.473,812,3.7,822,3.775,1128,3.298,1135,2.326,1140,3.605,1157,1.822,1235,2.326,1236,4.111,1237,6.488,1238,2.653,1239,4.111,1240,2.653,1241,4.511,1242,2.653,1243,2.653,1244,2.653,1245,4.111,1246,2.653,1247,2.653,1248,3.605,1249,2.653,1250,2.653,1251,3.605,1252,3.271,1253,2.653,1254,2.653,1255,2.326,1256,4.111,1257,2.653,1258,2.653,1259,4.111,1260,2.653,1261,4.111,1262,3.605,1263,2.653,1264,2.111,1265,2.653,1266,2.653,1267,2.653,1268,2.653]],["title/controllers/PostsController.html",[150,1.373,1269,3.089]],["body/controllers/PostsController.html",[3,0.085,4,0.077,5,0.077,9,0.197,10,0.96,21,0.566,23,1.32,24,0.011,25,0.952,26,0.415,27,0.895,32,1.282,35,1.847,37,1.293,39,0.312,44,0.404,50,2.219,51,2.219,54,2.402,55,1.756,56,2.402,57,0.085,58,0.045,60,0.716,67,1.832,84,1.32,91,0.006,92,0.006,94,2.963,96,1.847,97,1.632,103,1.409,150,0.986,152,1.048,156,1.951,262,1.603,264,2.403,269,1.438,280,2.218,283,2.242,375,3.335,376,1.528,378,5.017,379,2.164,381,4.455,391,2.776,392,4.162,396,1.528,403,3.335,411,3.335,412,2.073,413,2.073,414,3.918,415,4.162,416,1.231,417,2.073,428,3.524,429,2.774,430,3.743,431,4.337,541,4.007,573,3.978,576,3.116,579,1.42,581,3.116,582,2.219,583,2.647,584,1.756,699,4.177,716,4.455,808,3.335,827,2.073,909,3.978,1004,3.918,1223,4.687,1269,3.335,1270,2.647,1271,5.45,1272,4.536,1273,5.45,1274,4.536,1275,3.018,1276,4.536,1277,6.06,1278,3.018,1279,3.018,1280,3.018,1281,3.018,1282,3.018,1283,3.018,1284,3.018,1285,3.018,1286,4.779,1287,4.536,1288,3.018,1289,4.536,1290,3.018,1291,3.978,1292,3.018,1293,3.018,1294,3.61,1295,3.018,1296,3.524,1297,2.647,1298,2.402,1299,2.219,1300,2.647,1301,3.018,1302,3.018,1303,3.018,1304,3.018,1305,3.018,1306,3.018,1307,3.018,1308,3.018,1309,3.018,1310,3.018,1311,3.018]],["title/modules/PostsModule.html",[157,1.256,175,2.716]],["body/modules/PostsModule.html",[3,0.126,4,0.113,5,0.113,24,0.011,39,0.33,44,0.598,57,0.126,58,0.067,91,0.008,92,0.008,152,2.083,157,2.024,159,1.885,160,1.952,161,2.101,162,2.101,163,1.952,164,3.185,165,2.821,174,5.027,175,5.491,176,5.027,178,4.758,179,2.821,180,2.101,181,2.024,183,3.053,187,3.329,188,1.459,191,2.599,283,1.375,313,3.917,794,2.479,798,5.027,810,3.554,1128,3.49,1157,3.068,1269,4.978,1296,5.027,1297,3.917,1312,3.917,1313,3.917,1314,4.467,1315,4.467,1316,4.467,1317,4.467,1318,4.467,1319,3.917,1320,3.917,1321,4.467]],["title/injectables/PostsService.html",[41,0.526,1296,2.716]],["body/injectables/PostsService.html",[3,0.065,4,0.058,5,0.058,9,0.149,10,0.776,11,2.003,13,1.577,15,0.921,21,0.534,23,1.245,24,0.011,25,0.899,26,0.392,27,0.844,32,1.107,33,1.122,35,2.803,37,0.87,38,1.793,39,0.3,40,1.709,41,0.459,44,0.307,57,0.065,58,0.034,60,1.447,62,1.4,66,2.256,67,1.875,70,2.869,72,1.877,84,1.245,85,1.003,86,2.331,91,0.005,92,0.005,94,2.558,96,1.404,97,1.437,103,1.353,131,2.154,139,1.483,142,3.146,188,0.75,191,1.335,254,0.686,264,2.25,274,1.59,280,1.122,283,2.111,292,2.696,293,1.687,332,2.982,339,1.483,376,1.542,391,2.244,393,1.687,396,1.762,402,3.146,460,2.702,471,1.04,472,0.727,541,3.367,561,2.035,562,2.244,579,1.079,584,1.335,618,1.826,684,1.404,699,3.501,708,4.14,761,1.826,794,1.274,798,4.3,801,1.687,802,4.588,803,3.726,805,3.215,807,2.518,808,2.696,809,2.012,810,1.826,811,2.012,813,2.518,819,2.012,820,3.593,821,4.016,822,1.335,824,2.012,827,2.518,905,1.404,913,3.645,914,3.645,962,1.687,1004,3.383,1128,1.335,1157,1.576,1163,4.588,1165,2.012,1168,1.576,1183,4.14,1223,3.929,1286,2.012,1296,2.371,1298,1.826,1299,1.687,1300,2.012,1320,2.012,1322,2.012,1323,2.696,1324,2.294,1325,2.294,1326,3.667,1327,2.918,1328,2.294,1329,3.667,1330,2.294,1331,3.667,1332,2.294,1333,2.294,1334,2.294,1335,2.294,1336,2.012,1337,2.294,1338,2.294,1339,2.294,1340,2.294,1341,2.294,1342,2.294,1343,2.294,1344,4.58,1345,2.294,1346,2.294,1347,2.294,1348,2.012,1349,2.294,1350,2.294,1351,2.294,1352,2.012,1353,2.294,1354,3.667,1355,2.294,1356,3.667,1357,2.294,1358,3.667,1359,2.294,1360,3.667,1361,2.294,1362,3.667,1363,2.294,1364,3.667,1365,2.294,1366,3.667,1367,2.294,1368,2.294,1369,2.012,1370,2.294,1371,2.294,1372,2.294,1373,2.294]],["title/entities/Product.html",[219,1.836,492,1.713]],["body/entities/Product.html",[3,0.099,4,0.089,5,0.089,9,0.229,21,0.724,24,0.011,25,0.937,26,0.565,37,1.868,38,1.722,39,0.238,57,0.099,58,0.053,85,3.153,91,0.006,92,0.006,99,1.277,103,1.688,130,2.485,196,1.87,219,2.221,221,3.83,269,1.84,379,1.891,380,4.512,396,2.008,429,3.035,472,1.117,492,2.073,495,3.47,497,4.415,498,4.221,499,4.221,500,4.044,501,4.581,502,3.323,504,2.419,507,4.327,508,3.491,522,2.803,543,4.044,551,4.096,570,3.736,780,3.996,793,4.457,831,5.229,832,4.745,833,4.745,1241,5.195,1264,2.803,1374,3.088,1375,5.082,1376,3.522,1377,5.082,1378,3.522,1379,3.522,1380,3.522,1381,4.044,1382,3.522,1383,3.522,1384,5.082,1385,5.082,1386,5.082,1387,3.522,1388,3.522,1389,3.522,1390,3.522]],["title/controllers/ProductsController.html",[150,1.373,1391,3.089]],["body/controllers/ProductsController.html",[3,0.083,4,0.075,5,0.075,9,0.192,10,0.941,21,0.6,23,1.302,24,0.011,25,0.94,26,0.532,27,0.883,32,1.359,33,3.687,39,0.289,44,0.394,55,1.712,57,0.083,58,0.044,60,0.698,67,1.254,84,1.399,91,0.006,92,0.006,103,1.913,150,0.961,152,1.021,156,1.902,219,3.626,262,1.562,269,1.524,280,2.175,283,1.369,375,4.723,376,2.014,378,3.271,379,2.391,381,3.271,385,3.932,391,3.284,392,4.963,393,3.271,396,2.363,402,4.108,403,3.271,407,4.423,410,2.162,411,2.162,412,2.02,413,2.02,414,4.369,415,4.641,416,1.2,417,2.02,420,1.712,422,3.056,423,1.8,428,4.154,429,3.27,430,4.412,431,5.112,454,1.712,494,5.245,564,3.901,1151,2.341,1323,4.398,1391,3.271,1392,2.579,1393,4.449,1394,3.901,1395,2.579,1396,5.926,1397,5.366,1398,2.941,1399,2.941,1400,2.941,1401,2.941,1402,2.941,1403,2.941,1404,2.941,1405,4.449,1406,2.941,1407,2.941,1408,2.579,1409,2.941,1410,2.941,1411,2.579,1412,2.941,1413,2.941,1414,3.469,1415,2.579,1416,2.941,1417,2.941,1418,2.941,1419,2.941,1420,2.941,1421,2.941,1422,2.941,1423,2.941,1424,2.941,1425,2.941,1426,2.941,1427,2.941,1428,2.941,1429,2.941,1430,2.941]],["title/modules/ProductsModule.html",[157,1.256,602,2.886]],["body/modules/ProductsModule.html",[3,0.138,4,0.124,5,0.124,24,0.011,39,0.318,44,0.656,57,0.138,58,0.073,91,0.008,92,0.008,136,3.6,152,2.213,157,2.117,159,2.066,160,2.14,161,2.303,162,2.303,163,2.14,164,3.333,165,3.333,169,4.509,179,2.998,180,2.303,181,2.219,183,3.244,187,3.537,188,1.599,219,2.14,386,4.293,454,2.849,456,3.6,602,5.719,1391,5.209,1414,5.504,1415,4.293,1431,4.293,1432,4.293,1433,4.896,1434,4.293,1435,4.896,1436,4.896,1437,4.896]],["title/injectables/ProductsService.html",[41,0.526,1414,2.716]],["body/injectables/ProductsService.html",[3,0.102,4,0.092,5,0.092,9,0.235,10,1.094,11,2.268,13,0.933,15,1.3,21,0.679,23,1.522,24,0.011,25,1.098,26,0.479,27,1.032,32,1.479,33,3.87,39,0.29,41,0.648,44,0.484,57,0.102,58,0.054,60,0.857,62,2.521,66,1.424,67,1.018,72,2.032,84,1.438,91,0.007,92,0.007,103,2.017,188,1.179,219,3.274,254,1.079,376,1.742,385,4.067,396,2.224,402,3.553,407,4.69,420,2.101,422,3.553,423,2.209,454,2.101,460,2.787,461,4.536,470,2.873,471,1.636,472,1.144,474,2.873,479,2.654,485,4.536,487,2.873,488,3.165,489,3.165,1323,4.855,1394,4.536,1395,4.536,1408,4.536,1411,4.536,1414,3.345,1438,3.165,1439,5.174,1440,3.61,1441,3.61,1442,3.61,1443,3.61,1444,5.174,1445,3.61,1446,3.61,1447,3.61,1448,3.61,1449,3.61,1450,3.61,1451,5.174]],["title/classes/RefreshTokenDto.html",[58,0.063,268,2.716]],["body/classes/RefreshTokenDto.html",[3,0.169,4,0.152,5,0.152,9,0.391,21,0.56,24,0.011,26,0.411,37,1.718,39,0.239,57,0.169,58,0.108,91,0.009,92,0.009,99,1.819,268,4.68,269,1.423,644,2.217,648,3.28,649,3.844,651,2.29,655,5.26,983,6.818,1067,4.774,1452,6.348,1453,5.999]],["title/injectables/RefreshTokensProvider.html",[41,0.526,308,2.716]],["body/injectables/RefreshTokensProvider.html",[3,0.108,4,0.097,5,0.097,9,0.249,10,1.139,11,1.708,13,1.751,15,1.352,16,3.037,17,5.716,18,4.651,19,4.378,21,0.502,23,1.172,24,0.011,25,0.846,26,0.369,27,0.794,32,0.807,39,0.31,40,2.332,41,0.674,42,2.336,44,0.511,45,1.668,46,2.221,47,2.221,57,0.108,58,0.057,60,1.607,61,2.621,62,2.055,64,2.468,66,1.505,67,1.076,70,1.795,72,1.919,73,3.347,84,0.831,86,1.943,91,0.007,92,0.007,94,1.866,97,1.567,102,2.806,131,1.795,248,3.037,254,1.141,264,1.919,265,4.283,268,4.616,274,1.325,289,3.037,290,2.621,298,3.037,299,3.037,306,3.94,308,3.48,311,2.221,319,2.806,322,2.621,332,3.865,336,4.72,339,2.468,341,2.621,359,3.697,584,2.221,631,3.037,964,3.037,974,3.037,977,3.347,978,3.347,979,3.347,980,3.347,981,3.347,982,3.347,1045,3.347,1057,2.621,1065,3.347,1454,5.467,1455,5.938,1456,3.817,1457,3.817,1458,3.817,1459,3.817,1460,3.347]],["title/classes/SignInDto.html",[58,0.063,276,2.716]],["body/classes/SignInDto.html",[3,0.162,4,0.146,5,0.146,9,0.374,21,0.658,24,0.011,26,0.483,37,1.887,39,0.229,57,0.162,58,0.105,91,0.009,92,0.009,99,1.771,100,3.729,242,4.931,269,1.672,276,4.557,644,2.122,648,3.456,649,3.742,651,2.191,893,6.18,1461,5.033,1462,5.74,1463,5.74,1464,5.74,1465,5.74]],["title/injectables/SignInProvider.html",[41,0.526,309,2.716]],["body/injectables/SignInProvider.html",[3,0.102,4,0.091,5,0.091,9,0.235,10,1.093,11,1.654,13,1.806,15,1.298,17,5.63,18,4.531,19,4.265,21,0.482,23,1.125,24,0.011,25,0.812,26,0.354,27,0.762,32,0.762,39,0.311,40,2.282,41,0.647,42,2.205,44,0.483,45,1.574,46,2.096,47,2.096,57,0.102,58,0.054,60,1.657,61,2.474,66,2.382,67,1.456,70,1.694,72,1.859,84,0.784,86,1.834,91,0.007,92,0.007,94,1.761,97,1.658,100,1.761,107,2.648,131,1.694,242,3.34,254,1.077,264,1.859,266,4.111,274,1.251,275,4.111,276,4.516,286,2.867,305,4.456,306,3.839,309,3.34,311,2.096,319,2.648,322,2.474,332,3.744,339,2.329,341,2.474,357,3.159,359,2.474,379,1.142,396,1.213,479,2.648,502,1.834,584,2.096,801,2.648,813,2.474,905,2.205,928,2.867,974,2.867,1057,2.474,1064,3.159,1455,5.785,1460,3.159,1466,5.296,1467,3.159,1468,3.602,1469,3.602,1470,3.602,1471,3.602,1472,5.166,1473,3.602,1474,6.039,1475,3.602,1476,3.602,1477,3.602,1478,3.602,1479,3.602]],["title/entities/Tag.html",[492,1.713,822,2.445]],["body/entities/Tag.html",[3,0.1,4,0.09,5,0.09,9,0.231,21,0.736,24,0.011,25,0.941,26,0.566,27,0.967,37,1.872,39,0.204,57,0.1,58,0.053,85,3.447,91,0.007,92,0.007,99,1.285,103,1.322,196,1.885,269,1.872,283,2.137,379,1.899,396,2.017,472,1.126,492,2.085,495,3.486,497,4.251,498,4.677,499,4.677,501,4.59,502,3.336,507,4.209,518,4.209,519,4.404,530,4.068,536,4.404,546,2.439,547,3.759,706,4.404,707,4.114,822,2.975,827,4.114,857,5.253,1130,4.767,1131,4.767,1241,5.215,1251,5.747,1252,5.215,1255,3.114,1262,3.114,1369,4.483,1381,4.068,1480,3.114,1481,5.991,1482,3.551,1483,5.253,1484,3.551,1485,3.551,1486,3.551,1487,3.551,1488,3.551,1489,3.551,1490,3.551,1491,3.551,1492,3.551,1493,3.551]],["title/controllers/TagsController.html",[150,1.373,1494,3.089]],["body/controllers/TagsController.html",[3,0.123,4,0.11,5,0.11,9,0.283,10,1.245,11,2.112,13,1.123,15,1.091,21,0.623,23,1.454,24,0.011,25,1.049,26,0.457,27,0.985,32,1.412,39,0.267,40,1.419,44,0.582,57,0.123,58,0.065,60,1.031,84,1.454,91,0.007,92,0.007,103,1.85,150,1.419,152,1.508,262,2.306,264,2.503,269,1.584,274,2.044,280,2.124,283,2.055,376,1.982,391,4.91,396,1.982,576,2.983,579,2.043,708,2.808,803,4.164,854,5.296,1151,3.456,1294,5.312,1327,3.456,1494,4.327,1495,3.809,1496,5.161,1497,3.809,1498,4.343,1499,4.343,1500,4.343,1501,5.886,1502,4.343,1503,3.809,1504,3.809,1505,4.343,1506,4.343,1507,4.343,1508,5.886,1509,4.343,1510,4.343,1511,4.343,1512,4.343]],["title/modules/TagsModule.html",[157,1.256,176,2.716]],["body/modules/TagsModule.html",[3,0.147,4,0.133,5,0.133,24,0.011,39,0.317,44,0.699,57,0.147,58,0.078,91,0.008,92,0.008,152,2.306,157,2.183,159,2.203,160,2.282,161,2.456,162,2.456,163,2.282,164,3.436,165,3.436,176,5.331,179,3.124,180,2.456,181,2.366,183,2.657,187,2.898,188,1.706,803,4.999,822,3.038,1494,5.37,1504,4.578,1513,4.578,1514,4.578,1515,4.578,1516,5.221,1517,5.221,1518,4.578,1519,5.221]],["title/injectables/TagsService.html",[41,0.526,803,2.445]],["body/injectables/TagsService.html",[3,0.109,4,0.098,5,0.098,9,0.251,10,1.148,11,2.244,13,0.998,15,1.363,21,0.669,23,1.561,24,0.011,25,1.127,26,0.491,27,1.058,32,1.44,39,0.286,40,1.261,41,0.68,44,0.517,57,0.109,58,0.058,60,0.916,72,2.094,84,1.482,85,2.371,91,0.009,92,0.007,103,1.975,188,1.261,254,1.153,264,2.522,274,2.363,376,1.827,391,3.32,393,2.837,396,2.414,460,2.871,471,1.749,472,1.224,579,1.815,708,2.495,803,3.156,822,3.156,854,4.924,1327,3.071,1496,3.384,1497,4.757,1503,3.384,1518,3.384,1520,3.384,1521,5.425,1522,5.425,1523,3.859,1524,3.859,1525,6.273,1526,3.859,1527,3.859,1528,5.425,1529,3.859,1530,3.859,1531,3.859,1532,3.859,1533,3.859,1534,3.859,1535,3.859,1536,3.859,1537,3.859,1538,3.859,1539,3.859,1540,3.859]],["title/classes/UpdateCategoryDto.html",[58,0.063,401,2.886]],["body/classes/UpdateCategoryDto.html",[3,0.157,4,0.141,5,0.141,9,0.362,21,0.645,24,0.011,25,1.181,26,0.473,27,1.161,37,1.866,39,0.222,57,0.157,58,0.103,91,0.009,92,0.009,99,1.735,269,1.639,379,2.383,401,4.744,423,4.6,644,2.054,648,3.406,649,3.991,651,2.121,661,3.826,1541,4.872,1542,6.057,1543,5.556,1544,5.556]],["title/classes/UpdateProductDto.html",[58,0.063,407,2.572]],["body/classes/UpdateProductDto.html",[3,0.129,4,0.116,5,0.116,9,0.297,21,0.71,24,0.011,25,1.075,26,0.521,27,1.224,37,1.856,39,0.273,57,0.129,58,0.091,91,0.008,92,0.008,99,1.528,103,1.573,269,1.804,376,1.536,379,2.17,385,2.654,407,3.723,416,1.86,422,3.132,423,4.787,429,3.483,644,1.686,648,2.756,649,3.876,651,1.741,657,3.999,660,4.84,661,3.981,766,3.353,830,3.353,832,5.445,833,5.445,837,3.999,844,5.445,852,3.999,1005,4.177,1229,3.629,1542,3.999,1545,6.082,1546,6.082,1547,4.561,1548,4.561,1549,4.561,1550,4.561,1551,4.561]],["title/entities/Upload.html",[492,1.713,1552,2.572]],["body/entities/Upload.html",[3,0.108,4,0.097,5,0.097,9,0.25,21,0.726,24,0.011,25,0.982,26,0.576,37,1.847,38,1.874,39,0.216,57,0.108,58,0.057,91,0.007,92,0.007,99,1.357,103,1.754,130,2.64,196,2.035,269,1.847,396,2.105,472,1.215,492,2.202,495,3.637,497,4.377,498,5.032,499,5.032,501,4.666,502,4.082,507,4.317,518,3.948,519,4.595,536,4.595,780,4.153,1086,4.293,1130,4.974,1131,4.974,1381,5.904,1483,3.362,1552,3.305,1553,3.362,1554,4.974,1555,4.974,1556,3.834,1557,3.834,1558,5.399,1559,3.834,1560,3.834,1561,3.834,1562,3.834,1563,4.974,1564,3.834,1565,3.834,1566,3.362,1567,3.362,1568,3.362]],["title/interfaces/UploadFile.html",[93,2.332,1569,2.886]],["body/interfaces/UploadFile.html",[3,0.156,4,0.141,5,0.141,9,0.361,24,0.011,25,1.234,26,0.583,37,2.055,57,0.156,91,0.009,92,0.009,93,3.074,95,3.804,99,1.732,103,1.941,1086,5.394,1554,6.25,1555,6.25,1569,4.734,1570,4.856,1571,4.856]],["title/injectables/UploadToAwsProvider.html",[41,0.526,1572,2.716]],["body/injectables/UploadToAwsProvider.html",[3,0.112,4,0.1,5,0.175,9,0.258,10,1.168,11,1.741,13,1.644,15,0.994,21,0.593,23,1.384,24,0.011,25,1.137,26,0.435,27,0.938,32,1.168,33,1.934,37,1.31,39,0.299,41,0.691,44,0.53,45,1.729,49,3.791,57,0.112,58,0.059,60,0.939,62,2.107,66,1.56,67,1.792,70,1.861,72,1.218,84,1.202,86,2.014,91,0.007,92,0.007,131,2.596,156,2.558,194,4.845,254,1.182,264,1.957,274,1.374,280,1.934,905,2.421,932,3.469,1086,3.791,1121,3.469,1248,4.84,1552,3.378,1572,3.569,1573,6.032,1574,3.469,1575,5.52,1576,5.52,1577,3.956,1578,5.52,1579,5.964,1580,3.956,1581,5.52,1582,3.956,1583,7.235,1584,3.148,1585,3.469,1586,3.956,1587,3.956,1588,3.956,1589,3.956,1590,3.956,1591,3.956,1592,3.956,1593,3.956,1594,3.956,1595,3.956,1596,5.52,1597,3.956,1598,3.956,1599,3.469,1600,3.956,1601,3.956,1602,3.469,1603,3.956,1604,3.956,1605,3.148,1606,3.956,1607,3.956,1608,3.956,1609,3.956,1610,3.956]],["title/controllers/UploadsController.html",[150,1.373,1611,3.089]],["body/controllers/UploadsController.html",[3,0.132,4,0.119,5,0.176,9,0.304,10,1.307,13,1.208,15,1.174,21,0.436,23,1.017,24,0.011,25,1.088,26,0.423,27,0.69,32,0.988,39,0.306,40,1.526,44,0.626,49,4.756,57,0.132,58,0.07,60,1.108,64,3.02,67,1.742,84,1.017,91,0.008,92,0.008,150,1.526,152,1.622,262,2.48,264,2.131,269,1.108,283,1.438,354,2.859,379,1.959,414,3.995,416,1.905,428,3.02,511,3.02,853,4.918,1552,3.782,1569,4.244,1579,5.511,1611,4.543,1612,4.096,1613,4.672,1614,4.096,1615,4.672,1616,4.672,1617,4.672,1618,4.672,1619,4.672,1620,4.096,1621,4.672,1622,4.096,1623,6.18,1624,4.765,1625,4.096,1626,4.672,1627,4.672,1628,4.672,1629,4.672,1630,4.096,1631,4.096,1632,4.672,1633,4.672,1634,4.672]],["title/modules/UploadsModule.html",[157,1.256,177,2.886]],["body/modules/UploadsModule.html",[3,0.146,4,0.131,5,0.131,24,0.011,39,0.323,44,0.693,57,0.146,58,0.077,91,0.008,92,0.008,152,2.293,157,2.174,159,2.183,160,2.261,161,2.434,162,2.434,163,2.261,164,3.421,165,2.434,177,5.722,179,3.106,180,2.434,181,2.345,183,2.634,187,2.872,188,1.69,1552,3.167,1572,5.234,1611,5.348,1624,5.234,1625,4.537,1635,4.537,1636,4.537,1637,5.174,1638,5.174,1639,5.174,1640,4.537,1641,4.537,1642,5.174]],["title/injectables/UploadsService.html",[41,0.526,1624,2.716]],["body/injectables/UploadsService.html",[3,0.11,4,0.099,5,0.16,9,0.253,10,1.153,11,1.724,13,1.628,15,1.369,21,0.509,23,1.187,24,0.011,25,0.989,26,0.468,27,0.804,32,0.822,39,0.312,40,2.057,41,0.683,44,0.52,45,1.698,57,0.11,58,0.058,60,1.293,62,2.403,66,2.15,67,1.537,70,1.827,72,1.677,84,0.846,86,1.978,91,0.007,92,0.007,131,2.564,188,1.269,194,5.049,254,1.161,264,1.938,274,1.349,460,2.88,471,1.761,472,1.232,672,2.856,807,2.668,1086,4.324,1552,4.177,1554,3.092,1555,3.092,1563,3.092,1566,3.407,1567,3.407,1568,3.407,1569,4.936,1572,4.947,1579,5.01,1602,3.407,1605,3.092,1614,4.779,1624,3.524,1640,3.407,1641,3.407,1643,3.407,1644,3.885,1645,6.825,1646,3.885,1647,3.885,1648,3.885,1649,3.885,1650,3.885,1651,3.885,1652,3.885,1653,3.885,1654,3.885,1655,3.885,1656,3.885,1657,3.885,1658,3.885,1659,3.885,1660,3.885,1661,3.885,1662,3.885]],["title/entities/User.html",[97,1.056,492,1.713]],["body/entities/User.html",[3,0.096,4,0.087,5,0.087,9,0.222,21,0.718,24,0.011,26,0.562,27,0.949,37,1.855,38,1.668,39,0.273,55,3.977,57,0.096,58,0.074,85,3.118,91,0.006,92,0.006,97,1.248,99,1.248,100,2.863,101,4.305,103,1.284,130,2.428,196,1.811,221,3.788,242,3.786,269,1.826,283,2.196,396,1.972,472,1.081,492,2.025,495,3.407,497,4.366,498,5.054,499,4.879,500,6.005,501,4.548,502,3.274,504,3.411,507,4.285,508,4.022,546,2.343,551,4.022,697,1.985,780,3.937,827,4.022,872,4.305,873,4.305,894,2.991,897,2.991,953,4.022,1252,3.952,1264,2.714,1663,2.991,1664,4.966,1665,3.411,1666,3.411,1667,3.411,1668,4.966,1669,3.411,1670,3.411,1671,3.411,1672,3.411,1673,4.966,1674,3.411,1675,3.411,1676,5.856]],["title/controllers/UsersController.html",[150,1.373,1677,3.089]],["body/controllers/UsersController.html",[1,1.424,3,0.082,4,0.074,5,0.074,6,1.883,7,1.546,9,0.19,10,0.934,13,0.753,15,0.732,21,0.555,23,1.296,24,0.011,25,1.058,26,0.494,27,0.878,32,1.259,39,0.3,44,0.39,57,0.082,58,0.044,60,0.691,62,1.111,67,1.245,84,1.466,91,0.006,92,0.006,103,2.048,110,1.694,111,1.782,112,2.141,113,2,150,0.951,152,1.011,262,1.546,263,1.694,264,2.385,269,1.412,280,2.158,283,1.359,295,2.317,332,2.607,379,2.134,392,3.032,410,2.141,411,3.92,412,3.032,413,2,414,2.854,415,3.032,416,1.187,428,1.883,429,1.482,430,3.032,502,3.029,561,3.999,562,4.12,569,3.032,570,2.141,576,4.087,579,2.077,592,2.553,593,2.553,680,4.949,682,4.243,684,3.915,685,3.737,688,4.736,696,2.854,711,4.087,850,2.317,1006,4.087,1230,5.297,1294,4.243,1298,2.317,1299,2.141,1620,2.553,1677,3.246,1678,2.553,1679,4.415,1680,5.333,1681,5.333,1682,4.415,1683,2.912,1684,4.415,1685,2.912,1686,2.912,1687,2.912,1688,2.912,1689,2.912,1690,2.912,1691,4.415,1692,4.415,1693,4.415,1694,2.912,1695,4.415,1696,3.871,1697,2.912,1698,4.415,1699,4.415,1700,4.415,1701,2.912,1702,4.415,1703,4.415,1704,4.415,1705,3.871,1706,2.912,1707,3.871,1708,2.912,1709,2.912,1710,2.912,1711,2.912,1712,2.912,1713,2.553,1714,2.553,1715,5.333,1716,2.912,1717,2.912,1718,2.912,1719,2.912,1720,2.912,1721,2.553,1722,2.912,1723,2.912,1724,2.912,1725,2.912,1726,2.912,1727,2.912,1728,2.912,1729,2.912,1730,2.912,1731,2.912]],["title/injectables/UsersCreateManyProvider.html",[41,0.526,1732,2.716]],["body/injectables/UsersCreateManyProvider.html",[3,0.11,4,0.099,5,0.099,9,0.253,10,1.153,11,1.724,13,1.005,15,1.369,21,0.509,23,1.187,24,0.011,25,0.857,26,0.373,27,0.804,32,0.822,39,0.272,40,1.269,41,0.683,44,0.52,57,0.11,58,0.058,62,1.483,66,2.483,67,1.775,70,2.961,72,2.293,84,0.846,86,3.204,91,0.007,92,0.007,97,1.715,131,2.961,248,3.092,254,1.161,264,1.938,274,1.349,376,2.12,379,1.232,472,1.232,576,3.743,579,1.827,672,2.856,673,2.378,685,3.788,696,2.512,905,3.336,922,3.092,1226,3.092,1732,3.524,1733,5.52,1734,3.407,1735,4.779,1736,3.885,1737,6.848,1738,3.885,1739,4.779,1740,3.885,1741,4.779,1742,5.45,1743,5.45,1744,3.885,1745,5.45,1746,3.885,1747,3.885,1748,3.407,1749,5.45,1750,3.885,1751,3.885,1752,3.885,1753,3.885,1754,3.885,1755,3.885,1756,3.885,1757,3.885,1758,3.885,1759,3.885,1760,3.885,1761,3.885,1762,3.885,1763,3.885,1764,3.885,1765,3.885,1766,3.885,1767,5.45,1768,3.885,1769,3.885,1770,3.885,1771,3.885,1772,3.885]],["title/modules/UsersModule.html",[157,1.256,178,2.572]],["body/modules/UsersModule.html",[1,1.883,3,0.109,4,0.098,5,0.098,6,2.49,7,2.045,24,0.011,39,0.337,44,0.516,45,1.683,46,2.241,47,2.241,48,3.064,52,2.357,57,0.109,58,0.058,91,0.007,92,0.007,97,1.361,110,2.241,146,3.152,152,1.881,157,1.872,159,1.625,160,1.683,161,1.811,162,1.811,163,1.683,164,2.947,165,2.947,169,3.006,178,5.169,179,2.548,180,1.811,181,1.745,183,1.96,187,2.137,188,1.258,193,2.831,207,3.064,208,3.377,311,3.152,332,4.005,376,1.297,456,2.831,662,4.804,664,3.315,673,2.357,899,4.804,946,4.804,955,4.804,1319,4.749,1677,4.606,1714,3.377,1732,4.804,1773,3.377,1774,3.377,1775,3.377,1776,3.851,1777,3.851,1778,3.851,1779,3.377,1780,4.749,1781,3.377,1782,3.377,1783,5.416,1784,3.377,1785,3.377,1786,3.851,1787,3.851]],["title/injectables/UsersService.html",[41,0.526,332,2.054]],["body/injectables/UsersService.html",[3,0.061,4,0.055,5,0.055,9,0.14,10,0.735,11,2.117,13,1.678,15,0.873,19,3.255,21,0.606,23,1.413,24,0.011,25,1.02,26,0.445,27,0.958,32,1.318,35,2.68,37,1.404,38,1.049,39,0.296,40,2.036,41,0.435,44,0.288,45,0.938,57,0.061,58,0.066,60,1.479,66,1.727,67,1.419,70,1.635,72,1.702,84,1.289,86,1.093,91,0.004,92,0.004,97,1.834,100,1.049,103,1.733,131,2.368,142,1.474,144,2.766,146,2.929,150,1.135,188,0.701,194,1.388,254,0.641,264,2.486,274,2.055,282,1.882,292,1.578,332,1.699,376,1.475,379,1.388,396,1.862,429,1.093,460,2.334,471,0.973,472,0.681,561,2.431,562,2.68,579,1.01,611,2.247,617,1.388,619,1.708,630,4.414,662,4.195,664,2.127,666,3.048,667,1.474,669,3.048,670,3.798,673,1.314,674,1.882,675,1.882,684,3.622,685,3.602,696,1.388,807,1.474,813,3.457,820,1.474,899,4.195,900,3.048,903,3.048,905,2.127,912,1.882,913,1.708,914,1.708,916,1.882,917,1.882,946,4.029,949,3.048,951,3.048,953,1.474,955,4.195,957,3.048,959,3.048,962,3.22,1006,3.457,1036,1.882,1057,2.387,1299,1.578,1323,3.22,1336,1.882,1352,1.882,1605,1.708,1705,4.414,1707,3.048,1713,1.882,1732,4.029,1735,3.048,1737,5.69,1739,3.048,1741,1.882,1779,1.882,1780,3.048,1781,1.882,1782,1.882,1784,1.882,1785,1.882,1788,1.882,1789,5.919,1790,3.476,1791,4.379,1792,2.147,1793,2.147,1794,2.147,1795,2.147,1796,2.147,1797,2.147,1798,3.476,1799,3.476,1800,2.147,1801,2.147,1802,3.476,1803,2.147,1804,3.476,1805,2.147,1806,2.147,1807,2.147,1808,2.147,1809,3.476,1810,2.147,1811,2.147,1812,2.147,1813,2.147,1814,2.147,1815,2.147,1816,2.147,1817,2.147,1818,2.147,1819,2.147,1820,2.147,1821,2.147]],["title/coverage.html",[1822,4.579]],["body/coverage.html",[0,2.868,1,1.069,5,0.056,6,1.414,7,1.161,8,1.918,24,0.011,26,0.15,41,1.019,50,1.608,53,1.74,58,0.117,67,0.617,91,0.004,92,0.004,93,2.825,94,1.069,96,1.339,97,1.114,98,1.918,104,1.608,105,2.808,114,1.608,115,1.502,146,2.053,150,2.314,151,1.608,153,1.918,154,1.414,163,0.956,182,1.74,190,1.161,191,2.053,212,1.608,214,1.74,219,0.956,221,1.161,224,1.74,255,1.918,260,1.608,261,1.918,263,1.273,268,1.414,276,1.414,283,1.086,284,1.414,305,1.273,306,1.273,307,1.414,308,1.414,309,1.414,315,1.608,324,1.608,329,1.918,332,1.069,347,1.918,364,1.608,365,1.918,374,1.502,376,0.736,380,1.273,385,1.273,401,1.502,407,1.339,417,1.502,418,1.414,420,2.053,423,2.16,458,1.918,492,2.665,493,1.918,510,1.918,549,1.608,550,1.918,556,1.502,577,1.414,581,1.502,582,1.608,608,1.918,645,1.918,653,1.918,654,1.918,662,1.414,663,2.808,664,2.16,665,2.808,670,1.502,680,1.608,681,2.808,682,1.74,683,1.918,684,1.339,685,1.214,699,1.339,700,1.918,701,2.808,719,1.339,775,1.608,794,2.825,795,1.918,798,1.414,799,1.918,800,1.918,803,1.273,822,1.273,830,2.594,854,1.502,855,1.918,856,1.918,871,2.808,899,1.414,901,1.414,929,1.918,930,1.918,946,1.414,947,2.808,948,1.918,955,1.414,956,1.918,963,1.74,964,2.808,992,1.608,993,2.808,994,2.808,1001,1.414,1002,1.608,1004,1.414,1006,1.502,1007,1.918,1008,1.918,1014,1.918,1015,1.918,1020,1.502,1029,1.918,1030,1.918,1066,1.918,1067,2.808,1069,1.918,1070,1.918,1071,1.918,1107,1.918,1128,1.273,1129,1.918,1143,1.608,1144,1.918,1147,1.414,1159,1.918,1160,1.918,1168,1.502,1169,1.918,1183,1.414,1186,1.918,1218,1.918,1223,1.502,1224,1.918,1230,1.608,1231,1.918,1235,1.918,1269,1.608,1270,1.918,1296,1.414,1322,1.918,1374,1.918,1391,1.608,1392,1.918,1414,1.414,1438,1.918,1452,1.918,1454,1.918,1461,1.918,1466,1.918,1467,1.918,1480,1.918,1494,1.608,1495,1.918,1520,1.918,1541,1.918,1552,1.339,1553,1.918,1569,1.502,1570,1.918,1571,1.918,1572,1.414,1573,1.918,1574,1.918,1611,1.608,1612,1.918,1624,1.414,1643,1.918,1663,1.918,1677,1.608,1678,1.918,1732,1.414,1733,1.918,1734,1.918,1788,1.918,1822,1.74,1823,1.918,1824,2.187,1825,2.187,1826,8.761,1827,7.821,1828,6.28,1829,7.218,1830,7.877,1831,3.094,1832,1.918,1833,1.918,1834,3.094,1835,6.535,1836,5.97,1837,3.529,1838,3.529,1839,5.97,1840,1.918,1841,2.187,1842,2.187,1843,2.187,1844,2.187,1845,2.187,1846,2.187,1847,2.187,1848,2.187,1849,2.187,1850,2.187]],["title/dependencies.html",[160,2.211,1851,3.068]],["body/dependencies.html",[24,0.011,44,0.706,45,2.303,46,3.066,49,3.619,52,3.225,58,0.1,91,0.008,92,0.008,109,3.873,160,2.303,188,1.721,263,3.066,358,4.62,416,2.149,472,1.67,651,2.011,664,3.225,697,3.066,1038,4.62,1083,3.873,1084,4.193,1120,4.62,1233,4.62,1234,4.62,1584,4.193,1585,4.62,1622,4.62,1852,5.269,1853,5.269,1854,5.269,1855,7.336,1856,5.269,1857,5.269,1858,5.269,1859,5.269,1860,5.269,1861,5.269,1862,5.269,1863,5.269,1864,5.269,1865,5.269,1866,5.269,1867,5.269,1868,5.269,1869,5.269,1870,5.269,1871,5.269,1872,5.269,1873,5.269,1874,5.269,1875,5.269,1876,5.269,1877,5.269]],["title/miscellaneous/enumerations.html",[1878,2.262,1879,4.436]],["body/miscellaneous/enumerations.html",[9,0.321,24,0.011,55,3.722,67,1.388,91,0.008,92,0.008,97,1.607,111,3.915,112,3.62,283,1.969,420,2.865,561,3.551,567,6.37,704,5.09,727,5.609,730,5.609,755,5.09,756,5.609,757,5.609,758,5.609,781,5.609,830,4.703,844,5.09,847,4.318,848,4.318,849,4.318,850,5.09,853,5.09,1396,5.609,1563,5.09,1630,4.318,1878,3.184,1879,4.318,1880,4.924,1881,6.397,1882,4.924,1883,6.397,1884,4.924,1885,4.924,1886,4.924,1887,4.924,1888,4.924,1889,4.924,1890,4.924,1891,4.924]],["title/miscellaneous/functions.html",[1878,2.262,1892,4.436]],["body/miscellaneous/functions.html",[9,0.433,24,0.01,91,0.01,92,0.01,163,3.547,1840,5.825,1878,4.295,1892,5.825,1893,6.643]],["title/index.html",[9,0.228,1894,3.499,1895,3.499]],["body/index.html",[4,0.089,24,0.011,91,0.006,92,0.006,136,2.584,139,4.66,181,3.266,379,1.114,460,1.483,711,4.48,725,3.082,812,2.584,820,3.485,1057,2.414,1083,5.593,1085,3.082,1202,3.082,1226,2.797,1291,3.082,1348,3.082,1584,4.038,1599,3.082,1631,3.082,1696,3.082,1721,6.321,1748,3.082,1822,2.797,1823,4.45,1896,3.515,1897,3.515,1898,5.956,1899,5.075,1900,3.515,1901,3.515,1902,3.515,1903,5.075,1904,5.956,1905,3.515,1906,3.515,1907,6.523,1908,3.515,1909,7.608,1910,3.515,1911,7.431,1912,3.515,1913,3.515,1914,5.075,1915,3.515,1916,5.075,1917,3.515,1918,5.956,1919,3.515,1920,5.075,1921,3.515,1922,3.515,1923,3.515,1924,3.515,1925,3.515,1926,6.523,1927,5.075,1928,3.515,1929,3.515,1930,5.075,1931,6.523,1932,3.515,1933,5.075,1934,3.515,1935,5.075,1936,7.208,1937,6.523,1938,3.515,1939,3.515,1940,3.515,1941,3.515,1942,3.515,1943,6.523,1944,3.515,1945,3.515,1946,3.515,1947,3.515,1948,5.075,1949,3.515,1950,3.515,1951,3.515,1952,3.515,1953,3.515,1954,5.075,1955,3.515,1956,3.515,1957,3.515,1958,5.075,1959,3.515,1960,3.515,1961,5.72,1962,3.515,1963,3.515,1964,3.515,1965,3.515,1966,3.515,1967,3.515,1968,3.515,1969,3.515,1970,5.075,1971,3.515,1972,3.082,1973,3.515,1974,3.515,1975,5.956,1976,3.515,1977,3.515,1978,3.515,1979,3.515,1980,5.075,1981,3.515,1982,3.515,1983,3.515,1984,3.515,1985,5.075,1986,3.515,1987,3.515,1988,3.515,1989,5.075,1990,5.075,1991,3.515,1992,3.515,1993,3.515,1994,3.515,1995,3.515,1996,3.515,1997,3.515,1998,3.515,1999,3.515,2000,3.515,2001,3.515,2002,3.515,2003,3.515,2004,3.515,2005,3.515,2006,3.082]],["title/modules.html",[159,2.428]],["body/modules.html",[24,0.009,91,0.009,92,0.009,158,4.008,159,2.3,169,3.026,170,3.744,171,3.744,172,3.744,173,3.744,174,3.524,175,3.524,176,3.524,177,3.744,178,3.336,490,4.338,602,3.744,1124,4.78,1961,7.577,1972,4.78,2007,8.641,2008,8.641,2009,8.677]],["title/overview.html",[2010,5.046]],["body/overview.html",[1,2.897,2,2.123,24,0.011,91,0.006,92,0.006,95,1.983,152,1.003,154,3.43,157,0.863,158,6.155,159,1.218,160,1.262,161,1.358,162,1.358,163,1.262,164,1.358,165,1.358,166,2.532,167,2.532,168,2.532,169,4.548,170,4.79,171,5.312,172,4.609,173,4.377,174,4.509,175,5.112,176,4.509,177,4.79,178,4.956,179,2.063,180,1.358,181,1.308,196,1.533,254,0.863,284,4.509,302,2.532,303,2.532,304,2.532,305,3.448,306,3.087,307,3.43,308,3.43,309,3.43,332,3.41,418,3.43,449,2.532,450,2.532,577,4.509,598,2.532,599,2.532,600,2.532,601,2.532,602,4.935,644,1.067,662,3.43,798,3.43,803,4.058,899,3.43,901,4.509,946,3.43,955,3.43,1076,2.532,1077,2.532,1078,2.532,1147,3.43,1153,2.532,1154,2.532,1180,2.532,1181,2.532,1182,2.532,1183,4.509,1296,3.43,1312,2.532,1313,2.532,1414,4.509,1431,2.532,1432,2.532,1434,2.532,1513,2.532,1514,2.532,1515,2.532,1572,3.43,1624,3.43,1635,2.532,1636,2.532,1732,3.43,1773,2.532,1774,2.532,1775,2.532,2010,2.532,2011,2.888,2012,2.888,2013,2.888,2014,2.888,2015,2.888,2016,2.888,2017,2.888]],["title/properties.html",[99,1.271,1851,3.068]],["body/properties.html",[24,0.011,91,0.01,92,0.01,99,1.65,379,2.082,812,4.828,2006,5.759,2018,6.568,2019,6.568,2020,6.568]],["title/miscellaneous/variables.html",[1878,2.262,2021,4.436]],["body/miscellaneous/variables.html",[9,0.32,24,0.011,26,0.486,29,3.372,35,3.005,37,1.684,38,2.401,50,4.694,53,5.081,55,2.857,62,2.437,75,4.305,84,1.069,91,0.008,92,0.008,94,3.122,97,1.783,111,3.908,114,4.694,123,5.081,130,3.974,182,3.907,224,5.081,225,4.305,263,3.715,417,5.349,567,5.976,581,4.385,582,3.61,1831,4.305,1832,5.599,1833,4.305,1834,4.305,1878,3.175,2021,4.305,2022,4.91,2023,4.91,2024,6.385,2025,4.91,2026,6.385,2027,4.91,2028,6.385,2029,4.91,2030,4.91,2031,4.91,2032,4.91,2033,4.91,2034,4.91]],["title/routes.html",[2035,5.046]],["body/routes.html",[24,0.01,91,0.01,92,0.01,2035,5.986]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"guards/AllowGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"modules/CategoriesModule.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":1826,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":2019,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1864,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1875,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1877,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1863,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1827,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1842,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1829,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1830,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1835,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1836,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1839,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1837,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1838,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":732,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":569,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":1853,"title":{},"body":{"dependencies.html":{}}}],["1/5",{"_index":1844,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1846,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":570,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"entities/Product.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1855,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1860,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1857,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":1381,"title":{},"body":{"entities/Product.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["10})@apiquery({name",{"_index":1701,"title":{},"body":{"controllers/UsersController.html":{}}}],["11",{"_index":2012,"title":{},"body":{"overview.html":{}}}],["12",{"_index":1012,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["12'})@isoptional()@isint()@type(undefined",{"_index":1010,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["128",{"_index":1558,"title":{},"body":{"entities/Upload.html":{}}}],["13",{"_index":2011,"title":{},"body":{"overview.html":{}}}],["16",{"_index":1845,"title":{},"body":{"coverage.html":{}}}],["16t07:46:32+0000",{"_index":790,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isdate()@isoptional()@type(undefined",{"_index":733,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.12.2",{"_index":1868,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":2015,"title":{},"body":{"overview.html":{}}}],["2",{"_index":793,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Product.html":{}}}],["2.0.2",{"_index":1854,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":1858,"title":{},"body":{"dependencies.html":{}}}],["2.1643.0",{"_index":1861,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1843,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":392,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":378,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["2024",{"_index":731,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2525",{"_index":1094,"title":{},"body":{"modules/MailModule.html":{}}}],["256",{"_index":1251,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["26",{"_index":2014,"title":{},"body":{"overview.html":{}}}],["3",{"_index":2016,"title":{},"body":{"overview.html":{}}}],["3.1.10",{"_index":1865,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":1856,"title":{},"body":{"dependencies.html":{}}}],["3/9",{"_index":1848,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1847,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":2017,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1862,"title":{},"body":{"dependencies.html":{}}}],["512",{"_index":1259,"title":{},"body":{"entities/Post.html":{}}}],["6.9.13",{"_index":1870,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":1859,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1876,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":2013,"title":{},"body":{"overview.html":{}}}],["8.11.5",{"_index":1872,"title":{},"body":{"dependencies.html":{}}}],["88",{"_index":1813,"title":{},"body":{"injectables/UsersService.html":{}}}],["9",{"_index":747,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["9.11.0",{"_index":1866,"title":{},"body":{"dependencies.html":{}}}],["96",{"_index":500,"title":{},"body":{"entities/Category.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["_",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["abstract",{"_index":1072,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["acces",{"_index":141,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["access",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["accesskeyid",{"_index":1589,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["accesstoken",{"_index":137,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/AuthenticationGuardTsGuard.html":{},"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["activeuser",{"_index":581,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuser.sub",{"_index":620,"title":{},"body":{"injectables/CommentsService.html":{}}}],["activeuserdata",{"_index":94,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adapter",{"_index":1103,"title":{},"body":{"modules/MailModule.html":{}}}],["add",{"_index":386,"title":{},"body":{"controllers/CatalogController.html":{},"modules/ProductsModule.html":{}}}],["admin",{"_index":1396,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/enumerations.html":{}}}],["allowguard",{"_index":104,"title":{"guards/AllowGuard.html":{}},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"coverage.html":{}}}],["allowing",{"_index":1949,"title":{},"body":{"index.html":{}}}],["already",{"_index":919,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["amazing",{"_index":1995,"title":{},"body":{"index.html":{}}}],["api",{"_index":1705,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["apiheaders",{"_index":1623,"title":{},"body":{"controllers/UploadsController.html":{}}}],["apioperation",{"_index":414,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":375,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["apiproperty",{"_index":695,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@matches(/^[a",{"_index":866,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":862,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":743,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":724,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":686,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["apipropertyoptional",{"_index":777,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":864,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":858,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":860,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":710,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":720,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":1715,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":415,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":413,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apitags('catalog",{"_index":425,"title":{},"body":{"controllers/CatalogController.html":{}}}],["apitags('comments",{"_index":586,"title":{},"body":{"controllers/CommentsController.html":{}}}],["apitags('posts",{"_index":1303,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('products",{"_index":1418,"title":{},"body":{"controllers/ProductsController.html":{}}}],["apitags('users",{"_index":1719,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiversion",{"_index":944,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app.controller",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":155,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["app_interceptor",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":151,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appended",{"_index":1122,"title":{},"body":{"injectables/MailService.html":{}}}],["application",{"_index":1721,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1694,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":1903,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":158,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":154,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":687,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["assign",{"_index":1368,"title":{},"body":{"injectables/PostsService.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CatalogService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["audience",{"_index":977,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["auth",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/UsersController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["auth.controller",{"_index":312,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":1416,"title":{},"body":{"controllers/ProductsController.html":{}}}],["auth/google",{"_index":1016,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["auth/guards/access",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication.guard.ts/authentication.guard.ts.guard",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":114,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":260,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":1018,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(@body",{"_index":1026,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(googletokendto",{"_index":1019,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication",{"_index":1017,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{}}}],["authentication.controller.ts",{"_index":1015,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:18",{"_index":1021,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":1030,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:17",{"_index":1033,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:36",{"_index":1035,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:42",{"_index":1034,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticationguardtsguard",{"_index":115,"title":{"guards/AuthenticationGuardTsGuard.html":{}},"body":{"guards/AllowGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuardTsGuard.html":{},"coverage.html":{}}}],["authenticationguardtsguard.defaultauthtype",{"_index":126,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["authmodule",{"_index":169,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/CommentsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":812,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":815,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["authorised",{"_index":147,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["authorization",{"_index":1629,"title":{},"body":{"controllers/UploadsController.html":{}}}],["authservice",{"_index":284,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":111,"title":{},"body":{"guards/AllowGuard.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuardTsGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":118,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["authtype.none",{"_index":122,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["authtypeguardmap",{"_index":119,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["authtypes",{"_index":123,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":127,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["autoloadentities",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":1123,"title":{},"body":{"injectables/MailService.html":{}}}],["available",{"_index":1124,"title":{},"body":{"injectables/MailService.html":{},"modules.html":{}}}],["await",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CatalogService.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1584,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{},"index.html":{}}}],["aws.provider",{"_index":1640,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["aws.provider.ts",{"_index":1574,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["aws.provider.ts:11",{"_index":1577,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:14",{"_index":1580,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:39",{"_index":1582,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["backers",{"_index":1996,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":807,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('mime",{"_index":1655,"title":{},"body":{"injectables/UploadsService.html":{}}}],["badrequestexception('the",{"_index":1352,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":1696,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["baseurl",{"_index":1204,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":358,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":363,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":361,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":362,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":315,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1630,"title":{},"body":{"controllers/UploadsController.html":{},"miscellaneous/enumerations.html":{}}}],["blog",{"_index":716,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":1988,"title":{},"body":{"index.html":{}}}],["body",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"injectables/CreatePostProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"controllers/TagsController.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":107,"title":{},"body":{"guards/AllowGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/SignInProvider.html":{}}}],["bootstrap",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/CommentsModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":2009,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2007,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1596,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["buffer",{"_index":351,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1899,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":936,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["canactivate(context",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["cascade",{"_index":547,"title":{},"body":{"entities/Comment.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":1137,"title":{},"body":{"entities/MetaOption.html":{}}}],["cascade'})@joincolumn({name",{"_index":531,"title":{},"body":{"entities/Comment.html":{}}}],["catalog",{"_index":366,"title":{},"body":{"controllers/CatalogController.html":{}}}],["catalog.controller",{"_index":455,"title":{},"body":{"modules/CatalogModule.html":{}}}],["catalogcontroller",{"_index":364,"title":{"controllers/CatalogController.html":{}},"body":{"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"coverage.html":{}}}],["catalogmodule",{"_index":170,"title":{"modules/CatalogModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CatalogModule.html":{},"modules.html":{},"overview.html":{}}}],["catalogs/catalogs.module",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["catalogservice",{"_index":418,"title":{"injectables/CatalogService.html":{}},"body":{"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"coverage.html":{},"overview.html":{}}}],["catch",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["catch((err",{"_index":149,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["catch(error",{"_index":678,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["categories/product.entity",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["categoriesmodule",{"_index":490,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/CategoriesModule.html":{},"modules.html":{}}}],["category",{"_index":380,"title":{"entities/Category.html":{}},"body":{"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"entities/Category.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"coverage.html":{}}}],["category'})@apiresponse({status",{"_index":377,"title":{},"body":{"controllers/CatalogController.html":{}}}],["category.dto",{"_index":421,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{}}}],["category.dto.ts",{"_index":645,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:7",{"_index":647,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.entity",{"_index":1390,"title":{},"body":{"entities/Product.html":{}}}],["category.products",{"_index":1375,"title":{},"body":{"entities/Product.html":{}}}],["categoryid",{"_index":482,"title":{},"body":{"injectables/CatalogService.html":{},"classes/CreateProductDto.html":{}}}],["categoryrepository",{"_index":463,"title":{},"body":{"injectables/CatalogService.html":{}}}],["categoty.dto",{"_index":424,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{}}}],["categoty.dto.ts",{"_index":1541,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["categoty.dto.ts:12",{"_index":1543,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["categoty.dto.ts:7",{"_index":1544,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["cause",{"_index":1605,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["changes",{"_index":1760,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["channel",{"_index":1963,"title":{},"body":{"index.html":{}}}],["character",{"_index":889,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":886,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":139,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["class",{"_index":58,"title":{"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"modules/CategoriesModule.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":644,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":1711,"title":{},"body":{"controllers/UsersController.html":{}}}],["clicks",{"_index":1948,"title":{},"body":{"index.html":{}}}],["clientid",{"_index":1039,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":1041,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cloud",{"_index":1934,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":302,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":304,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":303,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_catalogmodule",{"_index":449,"title":{},"body":{"modules/CatalogModule.html":{},"overview.html":{}}}],["cluster_catalogmodule_imports",{"_index":451,"title":{},"body":{"modules/CatalogModule.html":{}}}],["cluster_catalogmodule_providers",{"_index":450,"title":{},"body":{"modules/CatalogModule.html":{},"overview.html":{}}}],["cluster_commentsmodule",{"_index":598,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_commentsmodule_exports",{"_index":599,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_commentsmodule_imports",{"_index":600,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_commentsmodule_providers",{"_index":601,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":1076,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":1077,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":1078,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":1153,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":1154,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":1180,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":1182,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":1181,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1312,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1314,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1313,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1431,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_exports",{"_index":1434,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_imports",{"_index":1433,"title":{},"body":{"modules/ProductsModule.html":{}}}],["cluster_productsmodule_providers",{"_index":1432,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1513,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1514,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1515,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule",{"_index":1635,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule_providers",{"_index":1636,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1773,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1774,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1775,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":507,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["column('text",{"_index":516,"title":{},"body":{"entities/Comment.html":{}}}],["column({type",{"_index":497,"title":{},"body":{"entities/Category.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["come",{"_index":1955,"title":{},"body":{"index.html":{}}}],["comment",{"_index":221,"title":{"entities/Comment.html":{}},"body":{"modules/AppModule.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/User.html":{},"coverage.html":{}}}],["comment'})@apiresponse({status",{"_index":557,"title":{},"body":{"controllers/CommentsController.html":{}}}],["comment.dto",{"_index":580,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["comment.dto.ts",{"_index":654,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:10",{"_index":659,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:14",{"_index":658,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:6",{"_index":656,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.entity",{"_index":585,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{}}}],["comment.parent",{"_index":534,"title":{},"body":{"entities/Comment.html":{}}}],["comment.post",{"_index":1239,"title":{},"body":{"entities/Post.html":{}}}],["comment.product",{"_index":1377,"title":{},"body":{"entities/Product.html":{}}}],["comment.replies",{"_index":523,"title":{},"body":{"entities/Comment.html":{}}}],["comment.user",{"_index":1664,"title":{},"body":{"entities/User.html":{}}}],["comments",{"_index":551,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["comments'})@apiresponse({status",{"_index":563,"title":{},"body":{"controllers/CommentsController.html":{}}}],["comments.'})@get",{"_index":565,"title":{},"body":{"controllers/CommentsController.html":{}}}],["comments.controller",{"_index":604,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments/comment.entity",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["comments/comments.module",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["commentscontroller",{"_index":549,"title":{"controllers/CommentsController.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"coverage.html":{}}}],["commentsmodule",{"_index":171,"title":{"modules/CommentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules.html":{},"overview.html":{}}}],["commentsrepository",{"_index":589,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["commentsservice",{"_index":577,"title":{"injectables/CommentsService.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"coverage.html":{},"overview.html":{}}}],["common/interceptors/data",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/pagination.module",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":1472,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["comparepassword",{"_index":348,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":350,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["complete",{"_index":1764,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["compodoc/compodoc",{"_index":1852,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":1090,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.mailhost",{"_index":1092,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.smtppassword",{"_index":1097,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.smtpusername",{"_index":1095,"title":{},"body":{"modules/MailModule.html":{}}}],["config/app.config",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["config/enviroment.validation",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["config/profile.config",{"_index":1782,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":250,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1787,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"modules/MailModule.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice:configservice",{"_index":941,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UsersService.html":{}}}],["confiramtion",{"_index":1373,"title":{},"body":{"injectables/PostsService.html":{}}}],["conflictexception",{"_index":672,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":1763,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception('failed",{"_index":1662,"title":{},"body":{"injectables/UploadsService.html":{}}}],["conflictexception(error",{"_index":679,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{}}}],["connect",{"_index":1745,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["connecting",{"_index":916,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["connection",{"_index":1772,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["console.log(newurl",{"_index":1209,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(postquery",{"_index":1305,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CatalogService.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":134,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/CatalogService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(categoryrepository",{"_index":459,"title":{},"body":{"injectables/CatalogService.html":{}}}],["constructor(commentsrepository",{"_index":609,"title":{},"body":{"injectables/CommentsService.html":{}}}],["constructor(configservice",{"_index":932,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/UploadToAwsProvider.html":{}}}],["constructor(datasource",{"_index":1736,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["constructor(mailerservice",{"_index":1109,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(metaoptionsrepository",{"_index":1161,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":156,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatalogController.html":{},"injectables/MailService.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"injectables/UploadToAwsProvider.html":{}}}],["constructor(productrepository",{"_index":1440,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(reflector",{"_index":344,"title":{},"body":{"guards/AuthenticationGuardTsGuard.html":{}}}],["constructor(request",{"_index":1188,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(tagsrepository",{"_index":1523,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(uploadtoawsprovider",{"_index":1644,"title":{},"body":{"injectables/UploadsService.html":{}}}],["constructor(usersrepository",{"_index":667,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":801,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{}}}],["constructor(usersservise",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":511,"title":{},"body":{"entities/Comment.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UploadsController.html":{}}}],["content'})@isstring()@isoptional",{"_index":712,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["contenttype",{"_index":1601,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["context",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"classes/CreatePostDto.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailService.html":{}}}],["context.getclass",{"_index":125,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["context.gethandler",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":150,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["controller('auth",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('auth/google",{"_index":1024,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('catalog",{"_index":426,"title":{},"body":{"controllers/CatalogController.html":{}}}],["controller('comments",{"_index":587,"title":{},"body":{"controllers/CommentsController.html":{}}}],["controller('meta",{"_index":1150,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":1302,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('products",{"_index":1419,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('tags",{"_index":1505,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('uploads",{"_index":1626,"title":{},"body":{"controllers/UploadsController.html":{}}}],["controller('users",{"_index":1718,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":152,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["correct",{"_index":1349,"title":{},"body":{"injectables/PostsService.html":{}}}],["courses",{"_index":1969,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1822,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":376,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateProductDto.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["create(@body",{"_index":1151,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/ProductsController.html":{},"controllers/TagsController.html":{}}}],["create(createpostdto",{"_index":805,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["create(createpostmetaoptionsdto",{"_index":1145,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["create(createproductdto",{"_index":1395,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["create(createtagdto",{"_index":1497,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createcategory",{"_index":367,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{}}}],["createcategory(@body",{"_index":433,"title":{},"body":{"controllers/CatalogController.html":{}}}],["createcategory(createcategorydto",{"_index":373,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{}}}],["createcategorydto",{"_index":374,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["createcomment",{"_index":552,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["createcomment(createcommentdto",{"_index":555,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["createcommentdto",{"_index":556,"title":{"classes/CreateCommentDto.html":{}},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["createcommentdto.content",{"_index":628,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createcommentdto.postid",{"_index":622,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createcommentdto.productid",{"_index":625,"title":{},"body":{"injectables/CommentsService.html":{}}}],["created",{"_index":381,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["createdat",{"_index":512,"title":{},"body":{"entities/Comment.html":{}}}],["createdate",{"_index":1130,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["createdatecolumn",{"_index":519,"title":{},"body":{"entities/Comment.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["creategoogleuser",{"_index":666,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["creategoogleuser(googleuser",{"_index":669,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["creategoogleuserprovider",{"_index":662,"title":{"injectables/CreateGoogleUserProvider.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["createmany",{"_index":1735,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmany(createusersdto",{"_index":1739,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmanyusers",{"_index":1679,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":1728,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":1683,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":680,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":1729,"title":{},"body":{"controllers/UsersController.html":{}}}],["createparamdecorator",{"_index":2027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1271,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":1275,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":699,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdto.tags.length",{"_index":818,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["createpostmetaoptionsdto",{"_index":719,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["createpostprovider",{"_index":798,"title":{"injectables/CreatePostProvider.html":{}},"body":{"injectables/CreatePostProvider.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["createproduct",{"_index":368,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{}}}],["createproduct(@body",{"_index":442,"title":{},"body":{"controllers/CatalogController.html":{}}}],["createproduct(createproductdto",{"_index":384,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{}}}],["createproductdto",{"_index":385,"title":{"classes/CreateProductDto.html":{}},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"classes/CreateProductDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["creates",{"_index":1276,"title":{},"body":{"controllers/PostsController.html":{}}}],["createtagdto",{"_index":854,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":900,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":903,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":685,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":911,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":899,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":1680,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":1686,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusersdto",{"_index":1741,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["creating",{"_index":1326,"title":{},"body":{"injectables/PostsService.html":{}}}],["ctx",{"_index":2030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":1178,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":1174,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data",{"_index":354,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CommentsService.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/UploadsController.html":{}}}],["data.interface",{"_index":584,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["data.interface.ts",{"_index":98,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["data:string|buffer",{"_index":1075,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["database",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["databaseconfig",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":212,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":1737,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["datbase",{"_index":1817,"title":{},"body":{"injectables/UsersService.html":{}}}],["date",{"_index":518,"title":{},"body":{"entities/Comment.html":{},"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["date().gettime().tostring().trim",{"_index":1609,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["datetime",{"_index":1267,"title":{},"body":{"entities/Post.html":{}}}],["db",{"_index":814,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["decalre",{"_index":133,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["decimal",{"_index":1384,"title":{},"body":{"entities/Product.html":{}}}],["declarations",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/CommentsModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declare",{"_index":129,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["decorators",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CatalogController.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"controllers/UploadsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/auth.decorator",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["deeper",{"_index":1965,"title":{},"body":{"index.html":{}}}],["default",{"_index":130,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/MailService.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/Upload.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":117,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["defaults",{"_index":1098,"title":{},"body":{"modules/MailModule.html":{}}}],["defaultvaluepipe",{"_index":1710,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":1723,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":1722,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":391,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete(':id",{"_index":1424,"title":{},"body":{"controllers/ProductsController.html":{}}}],["delete('categories/:id",{"_index":438,"title":{},"body":{"controllers/CatalogController.html":{}}}],["delete('products/:id",{"_index":446,"title":{},"body":{"controllers/CatalogController.html":{}}}],["delete('soft",{"_index":1501,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":1507,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(id",{"_index":1327,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete(id:number",{"_index":1537,"title":{},"body":{"injectables/TagsService.html":{}}}],["deletecategory",{"_index":369,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{}}}],["deletecategory(@param('id",{"_index":439,"title":{},"body":{"controllers/CatalogController.html":{}}}],["deletecategory(id",{"_index":390,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{}}}],["deleted",{"_index":393,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":1481,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":1483,"title":{},"body":{"entities/Tag.html":{},"entities/Upload.html":{}}}],["deletepost",{"_index":1272,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":1310,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1282,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleteproduct",{"_index":370,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{}}}],["deleteproduct(@param('id",{"_index":447,"title":{},"body":{"controllers/CatalogController.html":{}}}],["deleteproduct(id",{"_index":397,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{}}}],["deleting",{"_index":1371,"title":{},"body":{"injectables/PostsService.html":{}}}],["dependencies",{"_index":160,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/CommentsModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1926,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1938,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1930,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1947,"title":{},"body":{"index.html":{}}}],["desc",{"_index":640,"title":{},"body":{"injectables/CommentsService.html":{}}}],["description",{"_index":379,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":1405,"title":{},"body":{"controllers/ProductsController.html":{}}}],["development",{"_index":1912,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1976,"title":{},"body":{"index.html":{}}}],["dir",{"_index":1100,"title":{},"body":{"modules/MailModule.html":{}}}],["discord",{"_index":1962,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1964,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1823,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":756,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":579,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":1299,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/google",{"_index":1023,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/pagination",{"_index":1193,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":1298,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["dtos/refresh",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/signin.dto",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["duplicate",{"_index":829,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["e2e",{"_index":1921,"title":{},"body":{"index.html":{}}}],["each",{"_index":698,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":1237,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1900,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1929,"title":{},"body":{"index.html":{}}}],["eight",{"_index":885,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ejs",{"_index":1120,"title":{},"body":{"injectables/MailService.html":{},"dependencies.html":{}}}],["ejsadapter",{"_index":1087,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":100,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"injectables/MailService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["email.provider",{"_index":1784,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":956,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:16",{"_index":960,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["email.provider.ts:7",{"_index":958,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["encrypted",{"_index":352,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["enddate",{"_index":995,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["endpoint",{"_index":1789,"title":{},"body":{"injectables/UsersService.html":{}}}],["ensure",{"_index":1348,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["enterprise",{"_index":1979,"title":{},"body":{"index.html":{}}}],["entities",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":492,"title":{"entities/Category.html":{},"entities/Comment.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":1698,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":780,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["enumerations",{"_index":1879,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["enums/file",{"_index":1566,"title":{},"body":{"entities/Upload.html":{},"injectables/UploadsService.html":{}}}],["enums/poststatus.enum",{"_index":773,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/posttype.enum",{"_index":774,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/userrole.enum",{"_index":894,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["env",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["enviromentvalidation",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["equal",{"_index":1345,"title":{},"body":{"injectables/PostsService.html":{}}}],["err",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["erroe",{"_index":926,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["error",{"_index":131,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["errors",{"_index":1757,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["even",{"_index":145,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["example",{"_index":711,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":1064,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["exclude",{"_index":1676,"title":{},"body":{"entities/User.html":{}}}],["execption",{"_index":918,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["executioncontext",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":962,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":909,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{}}}],["existinguser",{"_index":908,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":920,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["experience",{"_index":1967,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":971,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"guards/AllowGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"modules/CategoriesModule.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/CommentsModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1579,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["extends",{"_index":1005,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/UpdateProductDto.html":{}}}],["extension",{"_index":1121,"title":{},"body":{"injectables/MailService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["extract",{"_index":1051,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["extracttokenfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extracttokenfromheader(request",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["false",{"_index":502,"title":{},"body":{"entities/Category.html":{},"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Product.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["family_name",{"_index":1055,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["fast",{"_index":1941,"title":{},"body":{"index.html":{}}}],["featured",{"_index":714,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":857,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featuredimageurls",{"_index":702,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["features",{"_index":1951,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":631,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["fetched",{"_index":1695,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":1691,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":1943,"title":{},"body":{"index.html":{}}}],["field",{"_index":2028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"guards/AllowGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"modules/CategoriesModule.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1598,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.interface",{"_index":1649,"title":{},"body":{"injectables/UploadsService.html":{}}}],["file.interface.ts",{"_index":1571,"title":{},"body":{"interfaces/UploadFile.html":{},"coverage.html":{}}}],["file.mimetype",{"_index":1602,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["file.originalname.split('.')[0].replace(/\\s/g",{"_index":1606,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.size",{"_index":1659,"title":{},"body":{"injectables/UploadsService.html":{}}}],["fileinterceptor",{"_index":1621,"title":{},"body":{"controllers/UploadsController.html":{}}}],["filename",{"_index":1810,"title":{},"body":{"injectables/UsersService.html":{}}}],["filetypes",{"_index":1563,"title":{},"body":{"entities/Upload.html":{},"injectables/UploadsService.html":{},"miscellaneous/enumerations.html":{}}}],["filetypes.image",{"_index":1568,"title":{},"body":{"entities/Upload.html":{},"injectables/UploadsService.html":{}}}],["fileupload",{"_index":1575,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["fileupload(file",{"_index":1578,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["finally",{"_index":1766,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["find",{"_index":813,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":1323,"title":{},"body":{"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuseresparamdto",{"_index":1796,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(postquery",{"_index":1329,"title":{},"body":{"injectables/PostsService.html":{}}}],["findbyid",{"_index":1439,"title":{},"body":{"injectables/ProductsService.html":{}}}],["findbyid(id",{"_index":1444,"title":{},"body":{"injectables/ProductsService.html":{}}}],["findmultipletags",{"_index":1521,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":1528,"title":{},"body":{"injectables/TagsService.html":{}}}],["findone",{"_index":1393,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findone(@param('id",{"_index":1429,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findone(id",{"_index":1403,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findonebyemail",{"_index":957,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":959,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleid",{"_index":949,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleid(googleid",{"_index":951,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleidprovider",{"_index":946,"title":{"injectables/FindOneByGoogleIdProvider.html":{}},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebygoogleidprovier",{"_index":1807,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":1790,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":1802,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneuserbyemailprovider",{"_index":955,"title":{"injectables/FindOneUserByEmailProvider.html":{}},"body":{"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["fired",{"_index":138,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["first",{"_index":1176,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":872,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"entities/User.html":{}}}],["focus",{"_index":1950,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1982,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["forbiddenexception('you",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["forwardref",{"_index":311,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommentsModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":479,"title":{},"body":{"injectables/CatalogService.html":{},"injectables/CommentsService.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{}}}],["framework",{"_index":1898,"title":{},"body":{"index.html":{}}}],["full",{"_index":1978,"title":{},"body":{"index.html":{}}}],["function",{"_index":1841,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1892,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1946,"title":{},"body":{"index.html":{}}}],["generate",{"_index":359,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatefilename",{"_index":1576,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatefilename(file",{"_index":1581,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatetokenprovider",{"_index":1455,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokens",{"_index":965,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":968,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":306,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["get('/:id",{"_index":1720,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":1690,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":1287,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':id",{"_index":1428,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('post/:postid",{"_index":595,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getallcomments",{"_index":553,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["getallcomments(productid",{"_index":560,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["getcommentsforpost",{"_index":554,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["getcommentsforpost(postid",{"_index":571,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["gethello",{"_index":256,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":1273,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":1285,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostsbasedto",{"_index":992,"title":{"classes/GetPostsBaseDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"coverage.html":{}}}],["getpostsdto",{"_index":1004,"title":{"classes/GetPostsDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["getting",{"_index":1894,"title":{"index.html":{}},"body":{}}],["getuseresparamdto",{"_index":1707,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":1681,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuseresparamdto",{"_index":1689,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":1006,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["given_name",{"_index":1054,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["global",{"_index":1080,"title":{},"body":{"modules/MailModule.html":{}}}],["google",{"_index":664,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["googleauthenticationcontroller",{"_index":324,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["googleauthenticationserivce",{"_index":1025,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["googleauthenticationservice",{"_index":307,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleid",{"_index":953,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["googletokendto",{"_index":1020,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":1050,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googletokendto:googletokendto",{"_index":1027,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["googleuser",{"_index":670,"title":{"interfaces/GoogleUser.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"interfaces/GoogleUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["gooleid",{"_index":1059,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["graph",{"_index":1972,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":1992,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"overview.html":{}}}],["guards/access",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{}}}],["handle",{"_index":917,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["handling",{"_index":1799,"title":{},"body":{"injectables/UsersService.html":{}}}],["hands",{"_index":1966,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1956,"title":{},"body":{"index.html":{}}}],["hash",{"_index":1473,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["hashing.provider",{"_index":357,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":305,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":349,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":355,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hello",{"_index":258,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1970,"title":{},"body":{"index.html":{}}}],["here",{"_index":136,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"modules/ProductsModule.html":{},"index.html":{}}}],["hit",{"_index":849,"title":{},"body":{"classes/CreateProductDto.html":{},"miscellaneous/enumerations.html":{}}}],["host",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["http",{"_index":1301,"title":{},"body":{"controllers/PostsController.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":789,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@isarray()@isurl",{"_index":717,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost:3000",{"_index":1127,"title":{},"body":{"injectables/MailService.html":{}}}],["httpcode",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":1804,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://${this.configservice.get('appconfig.awscloudfronturl')}/${path",{"_index":1658,"title":{},"body":{"injectables/UploadsService.html":{}}}],["https://nestjs.com",{"_index":2003,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":739,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":787,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.moved_permanently",{"_index":1809,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":396,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["id'})@apiresponse({status",{"_index":1404,"title":{},"body":{"controllers/ProductsController.html":{}}}],["id.provider",{"_index":1785,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["id.provider.ts",{"_index":948,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:16",{"_index":952,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["id.provider.ts:7",{"_index":950,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["id:number",{"_index":1508,"title":{},"body":{"controllers/TagsController.html":{}}}],["identifier",{"_index":1824,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":761,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["idtoken",{"_index":1049,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["iject",{"_index":1470,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["image",{"_index":853,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/UploadsController.html":{},"miscellaneous/enumerations.html":{}}}],["image'})@isstring()@isoptional",{"_index":838,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["image/gif",{"_index":1651,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpeg",{"_index":1652,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpg",{"_index":1653,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/png'].includes(file.mimetype",{"_index":1654,"title":{},"body":{"injectables/UploadsService.html":{}}}],["images",{"_index":715,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["imageurl",{"_index":831,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["implements",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["import",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"modules/CategoriesModule.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["importing",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/CommentsModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["in')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(tags",{"_index":1536,"title":{},"body":{"injectables/TagsService.html":{}}}],["in.provider",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1467,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:12",{"_index":1468,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:45",{"_index":1469,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"guards/AllowGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"guards/AllowGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"modules/CategoriesModule.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":1932,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1953,"title":{},"body":{"index.html":{}}}],["inject",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(profileconfig.key",{"_index":1805,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject(request",{"_index":1196,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":41,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CatalogService.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CatalogService.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":254,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CatalogService.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":471,"title":{},"body":{"injectables/CatalogService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(category",{"_index":473,"title":{},"body":{"injectables/CatalogService.html":{}}}],["injectrepository(comment",{"_index":588,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["injectrepository(metaoption",{"_index":1165,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":618,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["injectrepository(product",{"_index":474,"title":{},"body":{"injectables/CatalogService.html":{},"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["injectrepository(tag",{"_index":1532,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(upload",{"_index":1650,"title":{},"body":{"injectables/UploadsService.html":{}}}],["injectrepository(user",{"_index":617,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["inlinecssenabled",{"_index":1104,"title":{},"body":{"modules/MailModule.html":{}}}],["install",{"_index":1945,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1910,"title":{},"body":{"index.html":{}}}],["instance",{"_index":132,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["instance.canactivate(context",{"_index":148,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["instantiated",{"_index":1769,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["inteface/active",{"_index":974,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["interact",{"_index":1973,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":931,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":934,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":93,"title":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleUser.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleUser.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{},"coverage.html":{}}}],["interfaces",{"_index":95,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleUser.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{},"overview.html":{}}}],["interfaces/google",{"_index":674,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["interfaces/paginated.interface",{"_index":1195,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["interfaces/upload",{"_index":1648,"title":{},"body":{"injectables/UploadsService.html":{}}}],["intersectiontype",{"_index":1000,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["isarray",{"_index":693,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isauth",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":771,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["isdate()@isoptional()@type(undefined",{"_index":997,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["isemail",{"_index":893,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty",{"_index":1462,"title":{},"body":{"classes/SignInDto.html":{}}}],["isenum",{"_index":766,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateProductDto.html":{}}}],["isenum(poststatus",{"_index":785,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":782,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(productstatus",{"_index":852,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["isenum(userrole",{"_index":898,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isequal",{"_index":1474,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isglobal",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":772,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isjson",{"_index":769,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":648,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isnotempty()@isjson",{"_index":796,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isnotempty()@isstring",{"_index":655,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isnumber",{"_index":660,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["isoptional",{"_index":661,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isoptional()@isenum(productstatus",{"_index":1550,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["isoptional()@isjson",{"_index":741,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isnumber",{"_index":657,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/UpdateProductDto.html":{}}}],["isoptional()@ispositive()@type(undefined",{"_index":1219,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional()@isstring",{"_index":1546,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["isoptional()@isstring()@isnotempty",{"_index":1542,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{}}}],["ispositive",{"_index":1222,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":649,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isstring()@isemail()@isnotempty()@maxlength(96",{"_index":874,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":1464,"title":{},"body":{"classes/SignInDto.html":{}}}],["isstring()@isnotempty()@maxlength(96",{"_index":646,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":876,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":880,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":878,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issuer",{"_index":979,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["isurl",{"_index":770,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":689,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["itemsperpage",{"_index":1172,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["job",{"_index":1985,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1987,"title":{},"body":{"index.html":{}}}],["joi",{"_index":1867,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1085,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":1101,"title":{},"body":{"modules/MailModule.html":{}}}],["joincolumn",{"_index":544,"title":{},"body":{"entities/Comment.html":{},"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":1261,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":736,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["jwt",{"_index":1053,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["jwtconfig",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["jwtmodule",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":251,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["kamil",{"_index":2000,"title":{},"body":{"index.html":{}}}],["key",{"_index":1599,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"index.html":{}}}],["keyof",{"_index":2029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":1177,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":873,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"entities/User.html":{}}}],["later",{"_index":142,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["learn",{"_index":1959,"title":{},"body":{"index.html":{}}}],["leftjoinandselect('comment.product",{"_index":634,"title":{},"body":{"injectables/CommentsService.html":{}}}],["leftjoinandselect('comment.user",{"_index":635,"title":{},"body":{"injectables/CommentsService.html":{}}}],["legend",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/CommentsModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":499,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["lets",{"_index":1758,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["letter",{"_index":887,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":750,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["library",{"_index":1038,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":2006,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1990,"title":{},"body":{"index.html":{}}}],["limit",{"_index":562,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linenumber",{"_index":1812,"title":{},"body":{"injectables/UsersService.html":{}}}],["linkedin",{"_index":1984,"title":{},"body":{"index.html":{}}}],["links",{"_index":1170,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":564,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/ProductsController.html":{}}}],["literal",{"_index":1171,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost:3000/posts/:userid",{"_index":1289,"title":{},"body":{"controllers/PostsController.html":{}}}],["loginticket",{"_index":1047,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":1056,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginurl",{"_index":1126,"title":{},"body":{"injectables/MailService.html":{}}}],["looking",{"_index":1933,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1981,"title":{},"body":{"index.html":{}}}],["made",{"_index":1761,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["mail/mail.module",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule",{"_index":1082,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":1089,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":1110,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":172,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":901,"title":{"injectables/MailService.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["make",{"_index":825,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["makes",{"_index":1939,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1952,"title":{},"body":{"index.html":{}}}],["manually",{"_index":1768,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many",{"_index":682,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["many.provider",{"_index":1779,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["many.provider.ts",{"_index":1734,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:16",{"_index":1740,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many.provider.ts:8",{"_index":1738,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["manytomany",{"_index":1262,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(()=>post",{"_index":1493,"title":{},"body":{"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":1255,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":543,"title":{},"body":{"entities/Comment.html":{},"entities/Post.html":{},"entities/Product.html":{}}}],["manytoone(undefined",{"_index":522,"title":{},"body":{"entities/Comment.html":{},"entities/Post.html":{},"entities/Product.html":{}}}],["map",{"_index":940,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":943,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["matches",{"_index":767,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":896,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":784,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"guards/AllowGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"modules/CategoriesModule.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["math.ceil(totalitems",{"_index":1210,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["mau",{"_index":1936,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":650,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":870,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":783,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":779,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":652,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{}}}],["message",{"_index":748,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":1874,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":1128,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptions",{"_index":703,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{}}}],["metaoptions.post",{"_index":1245,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":1143,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":173,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":1163,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":1147,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":791,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":630,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["mime",{"_index":1554,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["minimum",{"_index":884,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":768,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":869,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":778,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":895,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1878,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["mit",{"_index":1989,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1914,"title":{},"body":{"index.html":{}}}],["module",{"_index":157,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":159,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/CategoriesModule.html":{},"modules/CommentsModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":1084,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":1088,"title":{},"body":{"modules/MailModule.html":{}}}],["moment",{"_index":914,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["more",{"_index":1931,"title":{},"body":{"index.html":{}}}],["moved",{"_index":1816,"title":{},"body":{"injectables/UsersService.html":{}}}],["multipart/form",{"_index":1628,"title":{},"body":{"controllers/UploadsController.html":{}}}],["multiple",{"_index":143,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["mysql",{"_index":1268,"title":{},"body":{"entities/Post.html":{}}}],["myśliwiec",{"_index":2001,"title":{},"body":{"index.html":{}}}],["name",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":1226,"title":{},"body":{"classes/PatchPostDto.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["nest",{"_index":1904,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":2005,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":938,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":1083,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"modules/CategoriesModule.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/PaginationProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1233,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1622,"title":{},"body":{"controllers/UploadsController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":416,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"classes/UpdateProductDto.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["new'})@apiresponse({status",{"_index":1279,"title":{},"body":{"controllers/PostsController.html":{}}}],["newurl",{"_index":1207,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${limit}&page=${nextpage",{"_index":1216,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${limit}&page=${page",{"_index":1215,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${limit}&page=${perviouspage",{"_index":1217,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${limit}&page=${totalpages",{"_index":1214,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${limit}&page=1",{"_index":1213,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":922,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["newusers",{"_index":1742,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":1755,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["next",{"_index":935,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe",{"_index":942,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nextpage",{"_index":1211,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1897,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1869,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":850,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":470,"title":{},"body":{"injectables/CatalogService.html":{},"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["notfoundexception('category",{"_index":478,"title":{},"body":{"injectables/CatalogService.html":{}}}],["notfoundexception('post",{"_index":624,"title":{},"body":{"injectables/CommentsService.html":{}}}],["notfoundexception('product",{"_index":487,"title":{},"body":{"injectables/CatalogService.html":{},"injectables/CommentsService.html":{},"injectables/ProductsService.html":{}}}],["notfoundexception('user",{"_index":621,"title":{},"body":{"injectables/CommentsService.html":{}}}],["npm",{"_index":1909,"title":{},"body":{"index.html":{}}}],["null",{"_index":548,"title":{},"body":{"entities/Comment.html":{},"classes/CreatePostDto.html":{}}}],["null'})@joincolumn({name",{"_index":540,"title":{},"body":{"entities/Comment.html":{}}}],["nullable",{"_index":501,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["number",{"_index":103,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["oauth2client",{"_index":1037,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(clientid",{"_index":1044,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":1031,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":721,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["object.assign(category",{"_index":480,"title":{},"body":{"injectables/CatalogService.html":{}}}],["object.assign(product",{"_index":488,"title":{},"body":{"injectables/CatalogService.html":{},"injectables/ProductsService.html":{}}}],["objectliteral",{"_index":1194,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":108,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["occured",{"_index":1814,"title":{},"body":{"injectables/UsersService.html":{}}}],["offer",{"_index":1986,"title":{},"body":{"index.html":{}}}],["official",{"_index":1937,"title":{},"body":{"index.html":{}}}],["onbaording",{"_index":1116,"title":{},"body":{"injectables/MailService.html":{}}}],["ondelete",{"_index":530,"title":{},"body":{"entities/Comment.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":146,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["onetomany",{"_index":508,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":504,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["onetoone",{"_index":1140,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(()=>post",{"_index":1141,"title":{},"body":{"entities/MetaOption.html":{}}}],["onetoone(undefined",{"_index":1135,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["only)'})@apiresponse({status",{"_index":1397,"title":{},"body":{"controllers/ProductsController.html":{}}}],["onmoduleinit",{"_index":1032,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1991,"title":{},"body":{"index.html":{}}}],["option.entity",{"_index":1157,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":1129,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:14",{"_index":1134,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:17",{"_index":1132,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:20",{"_index":1139,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:26",{"_index":1138,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:8",{"_index":1133,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":1105,"title":{},"body":{"modules/MailModule.html":{},"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":1156,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":1144,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:14",{"_index":1146,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":776,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["options.dto.ts",{"_index":795,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":797,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":1155,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":1149,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":1160,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:15",{"_index":1164,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:9",{"_index":1162,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":775,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["options/meta",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":1159,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["orderby('comment.createdat",{"_index":639,"title":{},"body":{"injectables/CommentsService.html":{}}}],["out",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/CommentsModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["override",{"_index":1115,"title":{},"body":{"injectables/MailService.html":{}}}],["overview",{"_index":2010,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1851,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":561,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":1168,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":1187,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":1190,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":1335,"title":{},"body":{"injectables/PostsService.html":{}}}],["paginationmodule",{"_index":174,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":1183,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":1192,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":1197,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":1198,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":1001,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":412,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":436,"title":{},"body":{"controllers/CatalogController.html":{}}}],["param('postid",{"_index":596,"title":{},"body":{"controllers/CommentsController.html":{}}}],["param('userid",{"_index":1304,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":1713,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":1008,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":1011,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["parent",{"_index":513,"title":{},"body":{"entities/Comment.html":{}}}],["parseintpipe",{"_index":1294,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1977,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":1229,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/UpdateProductDto.html":{}}}],["partialtype(createpostdto",{"_index":1225,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createproductdto",{"_index":1545,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createuserdto",{"_index":1232,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["pass",{"_index":1096,"title":{},"body":{"modules/MailModule.html":{}}}],["password",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["passwords",{"_index":1478,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["patch",{"_index":411,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":1421,"title":{},"body":{"controllers/ProductsController.html":{}}}],["patch('categories/:id",{"_index":435,"title":{},"body":{"controllers/CatalogController.html":{}}}],["patch('products/:id",{"_index":444,"title":{},"body":{"controllers/CatalogController.html":{}}}],["patchpostdto",{"_index":1223,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":1357,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurls",{"_index":1365,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":1351,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":1361,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":1367,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":1363,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":1359,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.tags.length",{"_index":1346,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":1355,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchuser",{"_index":1682,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":1731,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":1708,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":1230,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":1086,"title":{},"body":{"modules/MailModule.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["path.extname(file.originalname",{"_index":1608,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["payload",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["per",{"_index":1700,"title":{},"body":{"controllers/UsersController.html":{}}}],["permanently",{"_index":1815,"title":{},"body":{"injectables/UsersService.html":{}}}],["permission",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["permissions",{"_index":140,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["person",{"_index":740,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":788,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pervious",{"_index":1179,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["perviouspage",{"_index":1212,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pg",{"_index":1871,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":1935,"title":{},"body":{"index.html":{}}}],["playload",{"_index":1052,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["please",{"_index":820,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["plesae",{"_index":921,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["port",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["position",{"_index":1702,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":725,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":283,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CatalogController.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":573,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@matches(/^[a",{"_index":745,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post('categories",{"_index":432,"title":{},"body":{"controllers/CatalogController.html":{}}}],["post('create",{"_index":1684,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('file",{"_index":1632,"title":{},"body":{"controllers/UploadsController.html":{}}}],["post('products",{"_index":441,"title":{},"body":{"controllers/CatalogController.html":{}}}],["post('refresh",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@auth(authtype.none)@useinterceptors(classserializerinterceptor",{"_index":1687,"title":{},"body":{"controllers/UsersController.html":{}}}],["post)=>post.metaoptions",{"_index":1142,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.'})@get('post/:postid",{"_index":574,"title":{},"body":{"controllers/CommentsController.html":{}}}],["post.author",{"_index":1673,"title":{},"body":{"entities/User.html":{}}}],["post.comments",{"_index":525,"title":{},"body":{"entities/Comment.html":{}}}],["post.content",{"_index":1356,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":808,"title":{},"body":{"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":701,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:106",{"_index":763,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:11",{"_index":1228,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:16",{"_index":765,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:24",{"_index":729,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:36",{"_index":754,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:44",{"_index":760,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:52",{"_index":713,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:60",{"_index":742,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:69",{"_index":718,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:78",{"_index":734,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:97",{"_index":723,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":810,"title":{},"body":{"injectables/CreatePostProvider.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurls",{"_index":1364,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":1136,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.posttype",{"_index":1360,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.provider",{"_index":1320,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.provider.ts",{"_index":800,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["post.provider.ts:11",{"_index":804,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.provider.ts:31",{"_index":806,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.publishon",{"_index":1366,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":1362,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":1358,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":1369,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":1354,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["postid",{"_index":527,"title":{},"body":{"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{}}}],["postquery",{"_index":1286,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["postquery.limit",{"_index":1339,"title":{},"body":{"injectables/PostsService.html":{}}}],["postquery.page",{"_index":1340,"title":{},"body":{"injectables/PostsService.html":{}}}],["postrepository",{"_index":612,"title":{},"body":{"injectables/CommentsService.html":{}}}],["posts",{"_index":827,"title":{},"body":{"injectables/CreatePostProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":1316,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.dto",{"_index":1300,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.dto.ts",{"_index":994,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"coverage.html":{}}}],["posts.dto.ts:11",{"_index":999,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.dto.ts:16",{"_index":998,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts/posts.module",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":1269,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":175,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":802,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["postsservice",{"_index":1296,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":755,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":1266,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":704,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":1265,"title":{},"body":{"entities/Post.html":{}}}],["precision",{"_index":1385,"title":{},"body":{"entities/Product.html":{}}}],["prefix",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["price",{"_index":832,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["primarygeneratedcolumn",{"_index":495,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/CatalogService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":913,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["product",{"_index":219,"title":{"entities/Product.html":{}},"body":{"modules/AppModule.html":{},"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["product'})@apiresponse({status",{"_index":387,"title":{},"body":{"controllers/CatalogController.html":{}}}],["product'})@isnumber()@isnotempty",{"_index":834,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product'})@isstring()@isnotempty",{"_index":836,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product'})@isstring()@isoptional",{"_index":842,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.category",{"_index":505,"title":{},"body":{"entities/Category.html":{}}}],["product.comments",{"_index":529,"title":{},"body":{"entities/Comment.html":{}}}],["product.dto",{"_index":422,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":830,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["product.dto.ts:13",{"_index":1547,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:16",{"_index":840,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:17",{"_index":1549,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:21",{"_index":837,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts:25",{"_index":1551,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:26",{"_index":841,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:31",{"_index":843,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:40",{"_index":846,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:45",{"_index":839,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:50",{"_index":835,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:9",{"_index":1548,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.entity",{"_index":509,"title":{},"body":{"entities/Category.html":{}}}],["productdata",{"_index":483,"title":{},"body":{"injectables/CatalogService.html":{}}}],["productid",{"_index":532,"title":{},"body":{"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{}}}],["production",{"_index":1916,"title":{},"body":{"index.html":{}}}],["productrepository",{"_index":461,"title":{},"body":{"injectables/CatalogService.html":{},"injectables/ProductsService.html":{}}}],["products",{"_index":494,"title":{},"body":{"entities/Category.html":{},"controllers/ProductsController.html":{}}}],["products'})@apiresponse({status",{"_index":1400,"title":{},"body":{"controllers/ProductsController.html":{}}}],["products.controller",{"_index":1436,"title":{},"body":{"modules/ProductsModule.html":{}}}],["productscontroller",{"_index":1391,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":602,"title":{"modules/ProductsModule.html":{}},"body":{"modules/CommentsModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsrepository",{"_index":610,"title":{},"body":{"injectables/CommentsService.html":{}}}],["productsservice",{"_index":1414,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["productstatus",{"_index":844,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"miscellaneous/enumerations.html":{}}}],["productstatus.none",{"_index":851,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product})@roles(userrole.admin)@get(':id",{"_index":1406,"title":{},"body":{"controllers/ProductsController.html":{}}}],["product})@roles(userrole.admin)@patch(':id",{"_index":1412,"title":{},"body":{"controllers/ProductsController.html":{}}}],["product})@roles(userrole.admin)@post",{"_index":1398,"title":{},"body":{"controllers/ProductsController.html":{}}}],["profileconfig",{"_index":1781,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profileconfiguration",{"_index":1791,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":1896,"title":{},"body":{"index.html":{}}}],["project",{"_index":1907,"title":{},"body":{"index.html":{}}}],["promise",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CatalogService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["promise.all",{"_index":984,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":135,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["propereties",{"_index":1353,"title":{},"body":{"injectables/PostsService.html":{}}}],["properties",{"_index":99,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuardTsGuard.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Product.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":252,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["provider",{"_index":1336,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/CommentsModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt.provider",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/catalog.service",{"_index":419,"title":{},"body":{"controllers/CatalogController.html":{},"modules/CatalogModule.html":{}}}],["providers/comments.service",{"_index":578,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{}}}],["providers/create",{"_index":1319,"title":{},"body":{"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["providers/find",{"_index":1783,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/generate",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/google",{"_index":1022,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["providers/hashing.provider",{"_index":314,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/mail.service",{"_index":1081,"title":{},"body":{"modules/MailModule.html":{}}}],["providers/meta",{"_index":1148,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/pagination.provider",{"_index":1185,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/posts.service",{"_index":1297,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/products.service",{"_index":1415,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["providers/refresh",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/sign",{"_index":317,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/tags.service",{"_index":1504,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/upload",{"_index":1639,"title":{},"body":{"modules/UploadsModule.html":{}}}],["providers/uploads.service",{"_index":1625,"title":{},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{}}}],["providers/users",{"_index":1778,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/users.service",{"_index":1714,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":730,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published'})@isenum(poststatus)@isnotempty",{"_index":759,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":705,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":576,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["query'})@apiquery({name",{"_index":1697,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":593,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/UsersController.html":{}}}],["query('page",{"_index":592,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/UsersController.html":{}}}],["query('productid",{"_index":591,"title":{},"body":{"controllers/CommentsController.html":{}}}],["query.dto",{"_index":1003,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":1218,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:14",{"_index":1221,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:9",{"_index":1220,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["querybuilder",{"_index":632,"title":{},"body":{"injectables/CommentsService.html":{}}}],["querybuilder.andwhere('comment.productid",{"_index":636,"title":{},"body":{"injectables/CommentsService.html":{}}}],["querybuilder.getmanyandcount",{"_index":642,"title":{},"body":{"injectables/CommentsService.html":{}}}],["queryrunner",{"_index":1743,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":1756,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":1747,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":1752,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.save(newuser",{"_index":1754,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":1770,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1762,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":1750,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["questions",{"_index":1960,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":786,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1998,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":1925,"title":{},"body":{"index.html":{}}}],["real",{"_index":1974,"title":{},"body":{"index.html":{}}}],["recommended",{"_index":848,"title":{},"body":{"classes/CreateProductDto.html":{},"miscellaneous/enumerations.html":{}}}],["record",{"_index":120,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["reflect",{"_index":1873,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["refresh",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtoken",{"_index":983,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":268,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokendto.refreshtoken",{"_index":1458,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(@body",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(refreshtokendto",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(refreshtokensdto",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokensdto",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokensprovider",{"_index":308,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["region",{"_index":1593,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["registered",{"_index":1692,"title":{},"body":{"controllers/UsersController.html":{}}}],["release",{"_index":1767,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["remove",{"_index":1394,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["remove(@param('id",{"_index":1425,"title":{},"body":{"controllers/ProductsController.html":{}}}],["remove(id",{"_index":1408,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["replies",{"_index":514,"title":{},"body":{"entities/Comment.html":{}}}],["repository",{"_index":460,"title":{},"body":{"injectables/CatalogService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository.findandcount",{"_index":1200,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["req",{"_index":1295,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":905,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('could",{"_index":1751,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["requesttimeoutexception('failed",{"_index":1604,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["requesttimeoutexception('unable",{"_index":1344,"title":{},"body":{"injectables/PostsService.html":{}}}],["requesttimeoutexception(error",{"_index":928,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["required",{"_index":688,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiredroles",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["requiredroles.includes(payload.role",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["requiring",{"_index":1942,"title":{},"body":{"index.html":{}}}],["reset",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/CommentsModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resource",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["resources",{"_index":1954,"title":{},"body":{"index.html":{}}}],["response",{"_index":1277,"title":{},"body":{"controllers/PostsController.html":{}}}],["response.interceptor",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":930,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:11",{"_index":933,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:15",{"_index":937,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["responsible",{"_index":1798,"title":{},"body":{"injectables/UsersService.html":{}}}],["result",{"_index":1753,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["results",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"guards/AllowGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"modules/CategoriesModule.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["return",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1699,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":758,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["role",{"_index":101,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"entities/User.html":{}}}],["roles",{"_index":417,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(userrole.admin",{"_index":431,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["roles(userrole.admin)@delete",{"_index":1283,"title":{},"body":{"controllers/PostsController.html":{}}}],["roles_key",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rollback",{"_index":1759,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["routes",{"_index":2035,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":1911,"title":{},"body":{"index.html":{}}}],["runner",{"_index":1771,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["runs",{"_index":1928,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":109,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["ryunner",{"_index":1746,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["s3",{"_index":1583,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["sale",{"_index":847,"title":{},"body":{"classes/CreateProductDto.html":{},"miscellaneous/enumerations.html":{}}}],["salt",{"_index":360,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["save",{"_index":1370,"title":{},"body":{"injectables/PostsService.html":{}}}],["scalable",{"_index":1901,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1386,"title":{},"body":{"entities/Product.html":{}}}],["scheduled",{"_index":757,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":706,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["sdk",{"_index":1585,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["secret",{"_index":981,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["secretaccesskey",{"_index":1591,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["secure",{"_index":1093,"title":{},"body":{"modules/MailModule.html":{}}}],["senduserwelcome",{"_index":1108,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserwelcome(user",{"_index":1112,"title":{},"body":{"injectables/MailService.html":{}}}],["sent",{"_index":1046,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["serialize",{"_index":735,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":781,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series'})@isenum(posttype)@isnotempty",{"_index":728,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":1631,"title":{},"body":{"controllers/UploadsController.html":{},"index.html":{}}}],["server})@post('file",{"_index":1617,"title":{},"body":{"controllers/UploadsController.html":{}}}],["service",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreatePostProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/PostsService.html":{}}}],["set",{"_index":539,"title":{},"body":{"entities/Comment.html":{}}}],["setmetadata",{"_index":1712,"title":{},"body":{"controllers/UsersController.html":{}}}],["setmetadata('authtype",{"_index":1725,"title":{},"body":{"controllers/UsersController.html":{}}}],["setmetadata(auth_type_key",{"_index":2033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":2034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1908,"title":{},"body":{"index.html":{}}}],["side",{"_index":1902,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":792,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sign",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":276,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signindto.password",{"_index":1476,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["signinprovider",{"_index":309,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signtoken",{"_index":966,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":970,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken>(userid",{"_index":975,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["simple",{"_index":1944,"title":{},"body":{"index.html":{}}}],["size",{"_index":1555,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["skip",{"_index":1201,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["skip((page",{"_index":637,"title":{},"body":{"injectables/CommentsService.html":{}}}],["slug",{"_index":707,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":749,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["social/google",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["softdelete",{"_index":1496,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete(@query('id",{"_index":1511,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":1500,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":1522,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":1530,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id:number",{"_index":1539,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"guards/AllowGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"modules/CategoriesModule.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":753,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["specefic",{"_index":1009,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["special",{"_index":888,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":572,"title":{},"body":{"controllers/CommentsController.html":{}}}],["specifications",{"_index":833,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["sponsors",{"_index":1994,"title":{},"body":{"index.html":{}}}],["src/.../active",{"_index":2022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":2025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1880,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":2024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":2023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1886,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../file",{"_index":1882,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1893,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":1884,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":1885,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../userrole.enum.ts",{"_index":1887,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":153,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":255,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":257,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:20",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:28",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":456,"title":{},"body":{"modules/CatalogModule.html":{},"modules/CommentsModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":310,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/UsersModule.html":{}}}],["src/auth/constants/auth.constants",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"controllers/PostsController.html":{}}}],["src/auth/constants/auth.constants.ts",{"_index":1831,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/active",{"_index":582,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":1717,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1833,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/roles.decorator",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/CatalogController.html":{},"controllers/PostsController.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":1834,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refresh",{"_index":1452,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":1461,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:10",{"_index":1465,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:6",{"_index":1463,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/auth",{"_index":112,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/auth/guards/authentication.guard.ts/authentication.guard.ts.guard.ts",{"_index":105,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication.guard.ts/authentication.guard.ts.guard.ts:24",{"_index":345,"title":{},"body":{"guards/AuthenticationGuardTsGuard.html":{}}}],["src/auth/guards/authentication.guard.ts/authentication.guard.ts.guard.ts:29",{"_index":346,"title":{},"body":{"guards/AuthenticationGuardTsGuard.html":{}}}],["src/auth/guards/authentication.guard.ts/authentication.guard.ts.guard.ts:9",{"_index":106,"title":{},"body":{"guards/AllowGuard.html":{}}}],["src/auth/inteface/active",{"_index":96,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreatePostProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:25",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:29",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:33",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:9",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":347,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:12",{"_index":353,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:7",{"_index":356,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":963,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":906,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":1071,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:5",{"_index":1074,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:7",{"_index":1073,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1454,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":1466,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/social/dtos/google",{"_index":1066,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":1014,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":1029,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/catalogs/catalog.controller.ts",{"_index":365,"title":{},"body":{"controllers/CatalogController.html":{},"coverage.html":{}}}],["src/catalogs/catalog.controller.ts:22",{"_index":383,"title":{},"body":{"controllers/CatalogController.html":{}}}],["src/catalogs/catalog.controller.ts:30",{"_index":405,"title":{},"body":{"controllers/CatalogController.html":{}}}],["src/catalogs/catalog.controller.ts:41",{"_index":395,"title":{},"body":{"controllers/CatalogController.html":{}}}],["src/catalogs/catalog.controller.ts:49",{"_index":389,"title":{},"body":{"controllers/CatalogController.html":{}}}],["src/catalogs/catalog.controller.ts:57",{"_index":409,"title":{},"body":{"controllers/CatalogController.html":{}}}],["src/catalogs/catalog.controller.ts:68",{"_index":399,"title":{},"body":{"controllers/CatalogController.html":{}}}],["src/catalogs/catalogs.module.ts",{"_index":452,"title":{},"body":{"modules/CatalogModule.html":{}}}],["src/catalogs/providers/catalog.service.ts",{"_index":458,"title":{},"body":{"injectables/CatalogService.html":{},"coverage.html":{}}}],["src/catalogs/providers/catalog.service.ts:12",{"_index":462,"title":{},"body":{"injectables/CatalogService.html":{}}}],["src/catalogs/providers/catalog.service.ts:21",{"_index":464,"title":{},"body":{"injectables/CatalogService.html":{}}}],["src/catalogs/providers/catalog.service.ts:29",{"_index":468,"title":{},"body":{"injectables/CatalogService.html":{}}}],["src/catalogs/providers/catalog.service.ts:42",{"_index":466,"title":{},"body":{"injectables/CatalogService.html":{}}}],["src/catalogs/providers/catalog.service.ts:50",{"_index":465,"title":{},"body":{"injectables/CatalogService.html":{}}}],["src/catalogs/providers/catalog.service.ts:69",{"_index":469,"title":{},"body":{"injectables/CatalogService.html":{}}}],["src/catalogs/providers/catalog.service.ts:82",{"_index":467,"title":{},"body":{"injectables/CatalogService.html":{}}}],["src/categories/categories.module.ts",{"_index":491,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/categories/category.entity",{"_index":453,"title":{},"body":{"modules/CatalogModule.html":{},"injectables/CatalogService.html":{}}}],["src/categories/category.entity.ts",{"_index":493,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/categories/category.entity.ts:10",{"_index":503,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/category.entity.ts:13",{"_index":506,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/category.entity.ts:7",{"_index":496,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/dtos/create",{"_index":420,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/categories/dtos/update",{"_index":423,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/categories/product.entity",{"_index":454,"title":{},"body":{"modules/CatalogModule.html":{},"injectables/CatalogService.html":{},"entities/Comment.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["src/categories/product.entity.ts",{"_index":1374,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/categories/product.entity.ts:14",{"_index":1380,"title":{},"body":{"entities/Product.html":{}}}],["src/categories/product.entity.ts:17",{"_index":1383,"title":{},"body":{"entities/Product.html":{}}}],["src/categories/product.entity.ts:20",{"_index":1379,"title":{},"body":{"entities/Product.html":{}}}],["src/categories/product.entity.ts:23",{"_index":1382,"title":{},"body":{"entities/Product.html":{}}}],["src/categories/product.entity.ts:26",{"_index":1387,"title":{},"body":{"entities/Product.html":{}}}],["src/categories/product.entity.ts:29",{"_index":1388,"title":{},"body":{"entities/Product.html":{}}}],["src/categories/product.entity.ts:36",{"_index":1389,"title":{},"body":{"entities/Product.html":{}}}],["src/categories/product.entity.ts:39",{"_index":1376,"title":{},"body":{"entities/Product.html":{}}}],["src/categories/product.entity.ts:42",{"_index":1378,"title":{},"body":{"entities/Product.html":{}}}],["src/comments/comment.entity",{"_index":1264,"title":{},"body":{"entities/Post.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["src/comments/comment.entity.ts",{"_index":510,"title":{},"body":{"entities/Comment.html":{},"coverage.html":{}}}],["src/comments/comment.entity.ts:18",{"_index":521,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/comment.entity.ts:21",{"_index":517,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/comment.entity.ts:27",{"_index":533,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/comment.entity.ts:31",{"_index":542,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/comment.entity.ts:35",{"_index":528,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/comment.entity.ts:38",{"_index":524,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/comment.entity.ts:41",{"_index":535,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/comment.entity.ts:44",{"_index":520,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/comment.entity.ts:47",{"_index":537,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/comments.controller.ts",{"_index":550,"title":{},"body":{"controllers/CommentsController.html":{},"coverage.html":{}}}],["src/comments/comments.controller.ts:34",{"_index":559,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/comments/comments.controller.ts:44",{"_index":566,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/comments/comments.controller.ts:55",{"_index":575,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/comments/comments.module.ts",{"_index":603,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/comments/dtos/create",{"_index":653,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/comments/providers/comments.service.ts",{"_index":608,"title":{},"body":{"injectables/CommentsService.html":{},"coverage.html":{}}}],["src/comments/providers/comments.service.ts:12",{"_index":613,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/providers/comments.service.ts:24",{"_index":614,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/providers/comments.service.ts:58",{"_index":615,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/providers/comments.service.ts:82",{"_index":616,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/common/interceptors/data",{"_index":929,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":1002,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":1334,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":1169,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":1318,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":1184,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":1333,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":1186,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:10",{"_index":1189,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:18",{"_index":1191,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/mail/mail.module.ts",{"_index":1079,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/providers/mail.service",{"_index":907,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/mail/providers/mail.service.ts",{"_index":1107,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/providers/mail.service.ts:6",{"_index":1111,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/providers/mail.service.ts:9",{"_index":1113,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":1840,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":794,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":700,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":993,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":1224,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":1889,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":1890,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":546,"title":{},"body":{"entities/Comment.html":{},"injectables/CommentsService.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":1235,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:23",{"_index":1244,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:30",{"_index":1260,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:38",{"_index":1247,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:46",{"_index":1253,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:54",{"_index":1254,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:60",{"_index":1242,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:66",{"_index":1250,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:72",{"_index":1243,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:78",{"_index":1249,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:84",{"_index":1246,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:89",{"_index":1238,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:95",{"_index":1258,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:98",{"_index":1240,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":1270,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:35",{"_index":1288,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:54",{"_index":1281,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:70",{"_index":1293,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:76",{"_index":1284,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module",{"_index":606,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/posts/posts.module.ts",{"_index":1315,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/create",{"_index":799,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":1322,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:124",{"_index":1328,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:17",{"_index":1324,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:55",{"_index":1325,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:59",{"_index":1330,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:69",{"_index":1332,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/products/products.controller.ts",{"_index":1392,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.controller.ts:19",{"_index":1399,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:27",{"_index":1413,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:35",{"_index":1410,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:43",{"_index":1402,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:51",{"_index":1407,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.module",{"_index":605,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/products/products.module.ts",{"_index":1435,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/providers/products.service.ts",{"_index":1438,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/products/providers/products.service.ts:15",{"_index":1443,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:19",{"_index":1445,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:27",{"_index":1442,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:32",{"_index":1447,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:38",{"_index":1446,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:9",{"_index":1441,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/tags/dtos/create",{"_index":855,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":809,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":1520,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:19",{"_index":1526,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:24",{"_index":1529,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:34",{"_index":1527,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:43",{"_index":1531,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":1524,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":1263,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":1480,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":1488,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":1491,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:29",{"_index":1485,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:35",{"_index":1490,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:42",{"_index":1486,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:47",{"_index":1489,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:50",{"_index":1482,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:53",{"_index":1492,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:56",{"_index":1484,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:7",{"_index":1487,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":1495,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:16",{"_index":1498,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:21",{"_index":1499,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:27",{"_index":1502,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":1317,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":1516,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/uploads/enums/file",{"_index":1888,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/uploads/interfaces/upload",{"_index":1570,"title":{},"body":{"interfaces/UploadFile.html":{},"coverage.html":{}}}],["src/uploads/providers/upload",{"_index":1573,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["src/uploads/providers/uploads.service.ts",{"_index":1643,"title":{},"body":{"injectables/UploadsService.html":{},"coverage.html":{}}}],["src/uploads/providers/uploads.service.ts:15",{"_index":1646,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/providers/uploads.service.ts:32",{"_index":1647,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/uploads.controller.ts",{"_index":1612,"title":{},"body":{"controllers/UploadsController.html":{},"coverage.html":{}}}],["src/uploads/uploads.controller.ts:29",{"_index":1618,"title":{},"body":{"controllers/UploadsController.html":{}}}],["src/uploads/uploads.entity.ts",{"_index":1553,"title":{},"body":{"entities/Upload.html":{},"coverage.html":{}}}],["src/uploads/uploads.entity.ts:15",{"_index":1557,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/uploads.entity.ts:22",{"_index":1560,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/uploads.entity.ts:29",{"_index":1561,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/uploads.entity.ts:37",{"_index":1564,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/uploads.entity.ts:44",{"_index":1559,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/uploads.entity.ts:51",{"_index":1562,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/uploads.entity.ts:54",{"_index":1556,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/uploads.entity.ts:57",{"_index":1565,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/uploads.module.ts",{"_index":1637,"title":{},"body":{"modules/UploadsModule.html":{}}}],["src/users/dtos/create",{"_index":681,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":1007,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":1231,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/enums/userrole.enum",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/CatalogController.html":{},"controllers/PostsController.html":{}}}],["src/users/enums/userrole.enum.ts",{"_index":1891,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/interfaces/google",{"_index":1069,"title":{},"body":{"interfaces/GoogleUser.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":663,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":947,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["src/users/providers/users",{"_index":1733,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":1788,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:100",{"_index":1803,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:126",{"_index":1794,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:130",{"_index":1800,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:134",{"_index":1801,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:139",{"_index":1793,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:27",{"_index":1792,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:69",{"_index":1795,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:76",{"_index":1797,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":545,"title":{},"body":{"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{},"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":1663,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:10",{"_index":1670,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:17",{"_index":1667,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:24",{"_index":1671,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:32",{"_index":1666,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:40",{"_index":1672,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:47",{"_index":1669,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:54",{"_index":1675,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:57",{"_index":1674,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:60",{"_index":1665,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1678,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:56",{"_index":1706,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:68",{"_index":1688,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":1685,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:82",{"_index":1709,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":313,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":1776,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":1748,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["start:dev",{"_index":1915,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1917,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":996,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["started",{"_index":1895,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1906,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1825,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":116,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["status",{"_index":429,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["stay",{"_index":1980,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1927,"title":{},"body":{"index.html":{}}}],["story",{"_index":727,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1940,"title":{},"body":{"index.html":{}}}],["strict",{"_index":1106,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":1765,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["string):promise",{"_index":1338,"title":{},"body":{"injectables/PostsService.html":{}}}],["sub",{"_index":102,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["subject",{"_index":1118,"title":{},"body":{"injectables/MailService.html":{}}}],["successfully",{"_index":430,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apioperation({summary",{"_index":1278,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":558,"title":{},"body":{"controllers/CommentsController.html":{}}}],["successfully'})@roles(userrole.admin)@delete(':id",{"_index":1409,"title":{},"body":{"controllers/ProductsController.html":{}}}],["successfully'})@roles(userrole.admin)@patch",{"_index":1292,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully.'})@roles(userrole.admin)@delete('categories/:id",{"_index":394,"title":{},"body":{"controllers/CatalogController.html":{}}}],["successfully.'})@roles(userrole.admin)@delete('products/:id",{"_index":398,"title":{},"body":{"controllers/CatalogController.html":{}}}],["successfully.'})@roles(userrole.admin)@patch('categories/:id",{"_index":404,"title":{},"body":{"controllers/CatalogController.html":{}}}],["successfully.'})@roles(userrole.admin)@patch('products/:id",{"_index":408,"title":{},"body":{"controllers/CatalogController.html":{}}}],["successfully.'})@roles(userrole.admin)@post",{"_index":1280,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully.'})@roles(userrole.admin)@post('categories",{"_index":382,"title":{},"body":{"controllers/CatalogController.html":{}}}],["successfully.'})@roles(userrole.admin)@post('products",{"_index":388,"title":{},"body":{"controllers/CatalogController.html":{}}}],["summary",{"_index":428,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1961,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":1656,"title":{},"body":{"injectables/UploadsService.html":{}}}],["sure",{"_index":826,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["svg",{"_index":2008,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":972,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1850,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1849,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":822,"title":{"entities/Tag.html":{}},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":1503,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":856,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:10",{"_index":863,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:19",{"_index":868,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:24",{"_index":859,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:29",{"_index":865,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:35",{"_index":861,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":1518,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":1256,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":708,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":1517,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":819,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["tags/soft",{"_index":1510,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags/tags.module",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":1494,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagservice",{"_index":811,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["tagsmodule",{"_index":176,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":1525,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":803,"title":{"injectables/TagsService.html":{}},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":1202,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["take(limit",{"_index":638,"title":{},"body":{"injectables/CommentsService.html":{}}}],["tap",{"_index":939,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["team",{"_index":1117,"title":{},"body":{"injectables/MailService.html":{}}}],["template",{"_index":1099,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["templates",{"_index":1102,"title":{},"body":{"modules/MailModule.html":{}}}],["test",{"_index":1920,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1923,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1922,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1918,"title":{},"body":{"index.html":{}}}],["text",{"_index":1241,"title":{},"body":{"entities/Post.html":{},"entities/Product.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1993,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":121,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["this.authservice.refreshtokens(refreshtokensdto",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":128,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["this.catalogservice.createcategory(createcategorydto",{"_index":434,"title":{},"body":{"controllers/CatalogController.html":{}}}],["this.catalogservice.createproduct(createproductdto",{"_index":443,"title":{},"body":{"controllers/CatalogController.html":{}}}],["this.catalogservice.deletecategory(id",{"_index":440,"title":{},"body":{"controllers/CatalogController.html":{}}}],["this.catalogservice.deleteproduct(id",{"_index":448,"title":{},"body":{"controllers/CatalogController.html":{}}}],["this.catalogservice.updatecategory(id",{"_index":437,"title":{},"body":{"controllers/CatalogController.html":{}}}],["this.catalogservice.updateproduct(id",{"_index":445,"title":{},"body":{"controllers/CatalogController.html":{}}}],["this.categoryrepository.create(createcategorydto",{"_index":475,"title":{},"body":{"injectables/CatalogService.html":{}}}],["this.categoryrepository.findoneby",{"_index":477,"title":{},"body":{"injectables/CatalogService.html":{}}}],["this.categoryrepository.remove(category",{"_index":481,"title":{},"body":{"injectables/CatalogService.html":{}}}],["this.categoryrepository.save(category",{"_index":476,"title":{},"body":{"injectables/CatalogService.html":{}}}],["this.commentsrepository.create",{"_index":627,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentsrepository.createquerybuilder('comment",{"_index":633,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentsrepository.save(comment",{"_index":629,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentsservice.createcomment(createcommentdto",{"_index":590,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.getallcomments(productid",{"_index":594,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.getcommentsforpost(postid",{"_index":597,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.configservice.get('appconfig.apiversion",{"_index":945,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.configservice.get('appconfig.awsaccesskeyid",{"_index":1590,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.configservice.get('appconfig.awsbucketname",{"_index":1597,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.configservice.get('appconfig.awsregion",{"_index":1594,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.configservice.get('appconfig.awssecretaccesskey",{"_index":1592,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.creategoogleuserprovider.creategoogleuser(googleuser",{"_index":1821,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.createpostprovider.create(createpostdto",{"_index":1337,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.createuserprovider.createuser(createuserdto",{"_index":1808,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.datasource.createqueryrunner",{"_index":1744,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["this.extracttokenfromheader(request",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findbyid(id",{"_index":1451,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.findonebygoogleidprovider.findonebygoogleid(googleid",{"_index":1820,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findoneuserbyemailprovider.findonebyemail(email",{"_index":1819,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.generatefilename(file",{"_index":1600,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.generatetokenprovider.generatetokens(user",{"_index":1460,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["this.generatetokensprovider.generatetokens(newuser",{"_index":1062,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokensprovider.generatetokens(user",{"_index":1060,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleauthenticationservice.authenticate(googletokendto",{"_index":1028,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.comparepassword",{"_index":1475,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":924,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":987,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":978,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.googleclientid",{"_index":1040,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.googleclientsecret",{"_index":1042,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.issuer",{"_index":980,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":991,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":982,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":976,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.mailerservice.sendmail",{"_index":1114,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.senduserwelcome(newuser",{"_index":927,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.metaoptionsrepository.create",{"_index":1166,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.save(metaoption",{"_index":1167,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptionsdto",{"_index":1152,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.oauthclient",{"_index":1043,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":1048,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.paginationprovider.paginatequery",{"_index":1341,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findoneby",{"_index":623,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.postsrepository",{"_index":1342,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.create",{"_index":823,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.postsrepository.delete(id",{"_index":1372,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":1350,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":824,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":1307,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":1311,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(postquery",{"_index":1306,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":1309,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.productrepository.create",{"_index":484,"title":{},"body":{"injectables/CatalogService.html":{}}}],["this.productrepository.create(createproductdto",{"_index":1450,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productrepository.find",{"_index":1448,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productrepository.findone",{"_index":1449,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productrepository.findoneby",{"_index":486,"title":{},"body":{"injectables/CatalogService.html":{}}}],["this.productrepository.remove(product",{"_index":489,"title":{},"body":{"injectables/CatalogService.html":{},"injectables/ProductsService.html":{}}}],["this.productrepository.save(product",{"_index":485,"title":{},"body":{"injectables/CatalogService.html":{},"injectables/ProductsService.html":{}}}],["this.productsrepository.findoneby",{"_index":626,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.productsservice.create(createproductdto",{"_index":1420,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findall",{"_index":1427,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findbyid(id",{"_index":1430,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.remove(id",{"_index":1426,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.update(id",{"_index":1423,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.reflector.get",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.reflector.getallandoverride",{"_index":124,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{}}}],["this.refreshtokensprovider.refreshtokens(refreshtokendto",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":1206,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":1205,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signinprovider.signin(signindto",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken",{"_index":985,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken(user.id",{"_index":990,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":1533,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":1538,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":1535,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":1534,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":1540,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":1506,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":1509,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":817,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":1343,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softremove(id",{"_index":1512,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.uploadsrepository.create(uploadfile",{"_index":1660,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadsrepository.save(upload",{"_index":1661,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadsservice.uploadfile(file",{"_index":1634,"title":{},"body":{"controllers/UploadsController.html":{}}}],["this.uploadtoawsprovider.fileupload(file",{"_index":1657,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.userscreatemanyprovider.createmany(createusersdto",{"_index":1818,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":923,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.create(googleuser",{"_index":676,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.usersrepository.findone",{"_index":910,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.findoneby",{"_index":619,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby({googleid",{"_index":954,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["this.usersrepository.save(newuser",{"_index":925,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.save(user",{"_index":677,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.usersservice.creategoogleuser",{"_index":1061,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.createmany(users",{"_index":1730,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":1727,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuseresparamdto",{"_index":1724,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyemail(signindto.email",{"_index":1471,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersservice.findonebygoogleid(googleid",{"_index":1058,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.findonebyid(sub",{"_index":1459,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.usersservice.findonebyid(user.sub",{"_index":816,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["throw",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/CatalogService.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":738,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":1975,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":1248,"title":{},"body":{"entities/Post.html":{},"injectables/UploadToAwsProvider.html":{}}}],["title",{"_index":709,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["title'})@isstring()@minlength(4)@isnotempty()@maxlength(512",{"_index":764,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["token",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"controllers/UploadsController.html":{}}}],["token.dto",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["token.dto.ts",{"_index":1067,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":1068,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["token.dto.ts:6",{"_index":1453,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":110,"title":{},"body":{"guards/AllowGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/AuthenticationGuardTsGuard.html":{},"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:19",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:27",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:57",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/AuthenticationGuardTsGuard.html":{},"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["tokens",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["tokens')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.provider",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":964,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:11",{"_index":1456,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:23",{"_index":973,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:35",{"_index":1457,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:38",{"_index":969,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:9",{"_index":967,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["total",{"_index":641,"title":{},"body":{"injectables/CommentsService.html":{}}}],["totalitem",{"_index":1173,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalitems",{"_index":1199,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":1175,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1999,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":1749,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["transformer",{"_index":697,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transport",{"_index":1091,"title":{},"body":{"modules/MailModule.html":{}}}],["trim",{"_index":1607,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["true",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"entities/Comment.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@exclude",{"_index":1668,"title":{},"body":{"entities/User.html":{}}}],["true})@joincolumn({name",{"_index":526,"title":{},"body":{"entities/Comment.html":{}}}],["true})@jointable",{"_index":1257,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":691,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["ttry",{"_index":915,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["twitter",{"_index":2004,"title":{},"body":{"index.html":{}}}],["type",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"guards/AllowGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type(()=>number",{"_index":1013,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["type.enum",{"_index":113,"title":{},"body":{"guards/AllowGuard.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuardTsGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["type.enum.ts",{"_index":1881,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":472,"title":{},"body":{"injectables/CatalogService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"injectables/ProductsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"modules/CatalogModule.html":{},"modules/CommentsModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":457,"title":{},"body":{"modules/CatalogModule.html":{}}}],["typeormmodule.forfeature([comment",{"_index":607,"title":{},"body":{"modules/CommentsModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":1158,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":1321,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1437,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":1519,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([upload",{"_index":1642,"title":{},"body":{"modules/UploadsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1786,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":1234,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["types.enum",{"_index":1567,"title":{},"body":{"entities/Upload.html":{},"injectables/UploadsService.html":{}}}],["types.enum.ts",{"_index":1883,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":1905,"title":{},"body":{"index.html":{}}}],["u",{"_index":1703,"title":{},"body":{"controllers/UsersController.html":{}}}],["unable",{"_index":912,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception('incorrect",{"_index":1479,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception('invalid",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["unauthorizedexception('token",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["unauthorizedexception('user",{"_index":961,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["unauthorizedexception(error",{"_index":1065,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["unautorized",{"_index":1063,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["undefined",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CommentsService.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"entities/Upload.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["undefined'])@apioperation({summary",{"_index":1616,"title":{},"body":{"controllers/UploadsController.html":{}}}],["undefined})@isenum(productstatus)@isoptional",{"_index":845,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["undefined})@isenum(userrole)@isoptional",{"_index":891,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":690,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@isarray()@isint({each",{"_index":762,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":722,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@roles(userrole.admin)@get",{"_index":1401,"title":{},"body":{"controllers/ProductsController.html":{}}}],["uniq",{"_index":828,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["unique",{"_index":1252,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1919,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CatalogService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":2020,"title":{},"body":{"properties.html":{}}}],["update",{"_index":402,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["update(@param('id",{"_index":1422,"title":{},"body":{"controllers/ProductsController.html":{}}}],["update(id",{"_index":1411,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["update(patchpostdto",{"_index":1331,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatecategory",{"_index":371,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{}}}],["updatecategory(id",{"_index":400,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{}}}],["updatecategorydto",{"_index":401,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updated",{"_index":403,"title":{},"body":{"controllers/CatalogController.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":1227,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedat",{"_index":515,"title":{},"body":{"entities/Comment.html":{}}}],["updatedate",{"_index":1131,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["updatedatecolumn",{"_index":536,"title":{},"body":{"entities/Comment.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["updatepost",{"_index":1274,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":1308,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":1290,"title":{},"body":{"controllers/PostsController.html":{}}}],["updateproduct",{"_index":372,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{}}}],["updateproduct(id",{"_index":406,"title":{},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{}}}],["updateproductdto",{"_index":407,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/CatalogController.html":{},"injectables/CatalogService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updates",{"_index":1291,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["upload",{"_index":1552,"title":{"entities/Upload.html":{}},"body":{"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":1619,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadfile",{"_index":1569,"title":{"interfaces/UploadFile.html":{}},"body":{"interfaces/UploadFile.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["uploadfile(@uploadedfile",{"_index":1633,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadfile(file",{"_index":1614,"title":{},"body":{"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["uploadresult",{"_index":1595,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploadresult.key",{"_index":1603,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploads",{"_index":1613,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploads.controller",{"_index":1638,"title":{},"body":{"modules/UploadsModule.html":{}}}],["uploads.entity",{"_index":1641,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["uploads/uploads.module",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["uploadscontroller",{"_index":1611,"title":{"controllers/UploadsController.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"coverage.html":{}}}],["uploadsmodule",{"_index":177,"title":{"modules/UploadsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UploadsModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadsrepository",{"_index":1645,"title":{},"body":{"injectables/UploadsService.html":{}}}],["uploadsservice",{"_index":1624,"title":{"injectables/UploadsService.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadtoawsprovider",{"_index":1572,"title":{"injectables/UploadToAwsProvider.html":{}},"body":{"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["ur",{"_index":821,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["url",{"_index":744,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{}}}],["url\"'})@maxlength(512",{"_index":867,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["url(this.request.url",{"_index":1208,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["urls",{"_index":1203,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["useclass",{"_index":253,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["used",{"_index":144,"title":{},"body":{"guards/AllowGuard.html":{},"guards/AuthenticationGuardTsGuard.html":{},"injectables/UsersService.html":{}}}],["usefactory",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["useguards",{"_index":410,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":427,"title":{},"body":{"controllers/CatalogController.html":{},"controllers/CommentsController.html":{}}}],["useinterceptors",{"_index":1620,"title":{},"body":{"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":1726,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1627,"title":{},"body":{"controllers/UploadsController.html":{}}}],["useinterceptors(undefined)@apiheaders(['undefined",{"_index":1615,"title":{},"body":{"controllers/UploadsController.html":{}}}],["user",{"_index":97,"title":{"entities/User.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AllowGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuardTsGuard.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.comments",{"_index":538,"title":{},"body":{"entities/Comment.html":{}}}],["user.decorator",{"_index":583,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{}}}],["user.decorator.ts",{"_index":1832,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":696,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":871,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":877,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:17",{"_index":879,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":875,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":890,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:41",{"_index":892,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":988,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{}}}],["user.entity",{"_index":673,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":1125,"title":{},"body":{"injectables/MailService.html":{}}}],["user.id",{"_index":986,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["user.interface",{"_index":675,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["user.interface.ts",{"_index":1070,"title":{},"body":{"interfaces/GoogleUser.html":{},"coverage.html":{}}}],["user.password",{"_index":1477,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.posts",{"_index":1236,"title":{},"body":{"entities/Post.html":{}}}],["user.provider",{"_index":1780,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.provider.ts",{"_index":665,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:16",{"_index":902,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:19",{"_index":671,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.provider.ts:35",{"_index":904,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:8",{"_index":668,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.role",{"_index":989,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["user?.[field",{"_index":2032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useres",{"_index":1693,"title":{},"body":{"controllers/UsersController.html":{}}}],["userid",{"_index":541,"title":{},"body":{"entities/Comment.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["userrole",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/CatalogController.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["userrole.user",{"_index":897,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["users",{"_index":684,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreatePostProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":1777,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":1716,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.dto.ts",{"_index":683,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:19",{"_index":692,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["users.service.ts",{"_index":1811,"title":{},"body":{"injectables/UsersService.html":{}}}],["users/enums/userrole.enum",{"_index":1417,"title":{},"body":{"controllers/ProductsController.html":{}}}],["users/user.entity",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1677,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemany",{"_index":1806,"title":{},"body":{"injectables/UsersService.html":{}}}],["userscreatemanyprovider",{"_index":1732,"title":{"injectables/UsersCreateManyProvider.html":{}},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":178,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":611,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":332,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservise",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["uses",{"_index":751,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["using",{"_index":1057,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["ut",{"_index":1347,"title":{},"body":{"injectables/PostsService.html":{}}}],["uuid",{"_index":1588,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uuidv4",{"_index":1587,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uuidv4()}${extension",{"_index":1610,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["v4",{"_index":1586,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["validatenested",{"_index":694,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validation",{"_index":737,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationschema",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":651,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"dependencies.html":{}}}],["value",{"_index":567,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":726,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":498,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["variable",{"_index":1828,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2021,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":1045,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["version",{"_index":2018,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1968,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1958,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1971,"title":{},"body":{"index.html":{}}}],["void",{"_index":1036,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["want",{"_index":1704,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":1913,"title":{},"body":{"index.html":{}}}],["website",{"_index":2002,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":1119,"title":{},"body":{"injectables/MailService.html":{}}}],["where('comment.postid",{"_index":643,"title":{},"body":{"injectables/CommentsService.html":{}}}],["without",{"_index":752,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["working",{"_index":1957,"title":{},"body":{"index.html":{}}}],["world",{"_index":259,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1983,"title":{},"body":{"index.html":{}}}],["yes",{"_index":568,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/GenerateTokensProvider.html":{}}}],["you'd",{"_index":1997,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1924,"title":{},"body":{"index.html":{}}}],["z0",{"_index":746,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":883,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":882,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":881,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatalogModule.html":{},"modules/CommentsModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { Request } from 'express';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constants';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from 'src/auth/decorators/roles.decorator';\nimport { userRole } from 'src/users/enums/userRole.enum';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n    private readonly reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException('Token is missing');\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(\n        token,\n        this.jwtConfiguration,\n      );\n      request[REQUEST_USER_KEY] = payload;\n\n      // Проверяем роли пользователя\n      const requiredRoles = this.reflector.get(\n        ROLES_KEY,\n        context.getHandler(),\n      );\n      if (requiredRoles && !requiredRoles.includes(payload.role)) {\n        throw new ForbiddenException('You do not have permission to access this resource');\n      }\n\n      return true;\n    } catch (err) {\n      throw new UnauthorizedException('Invalid token');\n    }\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/inteface/active-user-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n    sub: number;\n    email: string;\n    role: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AllowGuard.html":{"url":"guards/AllowGuard.html","title":"guard - AllowGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AllowGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication.guard.ts/authentication.guard.ts.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                            CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication.guard.ts/authentication.guard.ts.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constants';\n\nclass AllowGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    return true;\n  }\n}\n\n@Injectable()\nexport class AuthenticationGuardTsGuard implements CanActivate {\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  private readonly authTypeGuardmap: Record = {\n      [AuthType.Bearer]: this.accessTokenGuard,\n      [AuthType.None]: { canActivate: () => true },\n    };\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) { }\n  async canActivate(context: ExecutionContext): Promise {\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY,\n      [context.getHandler(), context.getClass()],\n    ) ?? [AuthenticationGuardTsGuard.defaultAuthType];\n\n    const guards = authTypes.map((type) => this.authTypeGuardmap[type]).flat();\n\n    // Declare the default error\n    let error = new UnauthorizedException();\n\n    for (const instance of guards) {\n      // Decalre a new constant\n      const canActivate = await Promise.resolve(\n        // Here the AccessToken Guard Will be fired and check if user has permissions to acces\n        // Later Multiple AuthTypes can be used even if one of them returns true\n        // The user is Authorised to access the resource\n        instance.canActivate(context),\n      ).catch((err) => {\n        error = err;\n      });\n\n      if (canActivate) {\n        return true;\n      }\n    }\n\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCatalogModule\n\nCatalogModule\n\nAppModule -->\n\nCatalogModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CatalogModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UploadsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n/**\n * Importing Entities\n */\nimport { User } from './users/user.entity';\nimport { UsersModule } from './users/users.module';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport enviromentValidation from './config/enviroment.validation';\nimport jwtConfig from './auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport { AuthenticationGuardTsGuard } from './auth/guards/authentication.guard.ts/authentication.guard.ts.guard';\nimport { DataResponseInterceptor } from './common/interceptors/data-response/data-response.interceptor';\nimport { UploadsModule } from './uploads/uploads.module';\nimport { MailModule } from './mail/mail.module';\nimport { CatalogModule } from './catalogs/catalogs.module';\nimport { Product } from './categories/product.entity';\nimport { Comment } from './comments/comment.entity';\nimport { CommentsModule } from './comments/comments.module';\n\n\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [UsersModule,\n    CommentsModule,\n    PostsModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      //envFilePath: ['.env.development'],\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: enviromentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        entities: [\n          User,\n          Product,\n          Comment, // Добавляем сущность Comment\n          // Другие сущности...\n        ],\n        synchronize: configService.get('database.synchronize'),\n        port: configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        host: configService.get('database.host'),\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        database: configService.get('database.name'),\n      }),\n    }),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    TagsModule,\n    MetaOptionsModule,\n    PaginationModule,\n    UploadsModule,\n    MailModule,\n    CatalogModule,\n  ],\n  controllers: [AppController],\n  providers:\n    [\n      AppService,\n      {\n        provide: APP_GUARD,\n        useClass: AuthenticationGuardTsGuard,\n      },\n      {\n        provide: APP_INTERCEPTOR,\n        useClass: DataResponseInterceptor,\n      },\n      AccessTokenGuard,\n    ],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokensDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh-tokens')@HttpCode(HttpStatus.OK)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokensDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')@HttpCode(HttpStatus.OK)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { Auth } from './decorators/auth.decorator';\nimport { AuthType } from './enums/auth-type.enum';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        /**\n         * Injecting Auth Service\n         */\n        private readonly authService: AuthService,\n    ){}\n\n    @Post('sign-in')\n    @HttpCode(HttpStatus.OK)\n    @Auth(AuthType.None)\n    public async signIn(@Body() signInDto: SignInDto){\n        return this.authService.signIn(signInDto)\n    }\n\n    //Refresh tokens\n    @Post('refresh-tokens')\n    @HttpCode(HttpStatus.OK)\n    @Auth(AuthType.None)\n    public async refreshTokens(@Body() refreshTokensDto: RefreshTokenDto){\n        return this.authService.refreshTokens(refreshTokensDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAccessTokenGuard \n\nAccessTokenGuard \n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAccessTokenGuard  -->\n\nAuthModule->AccessTokenGuard \n\n\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccessTokenGuard\n                        \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AccessTokenGuard } from './guards/access-token/access-token.guard';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\n\n@Module({\n  controllers: [AuthController],\n  imports: [\n    forwardRef(() => UsersModule),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider,\n      useClass: BcryptProvider,\n    },\n    SignInProvider,\n    AccessTokenGuard,\n    GenerateTokensProvider,\n    RefreshTokensProvider,\n    GoogleAuthenticationService,\n  ],\n  exports: [AuthService, HashingProvider, AccessTokenGuard, JwtModule, ConfigModule], // Экспорт ConfigModule\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersServise: UsersService, signInProvider: SignInProvider, refreshTokensProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersServise\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { SignInProvider } from './sign-in.provider';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { RefreshTokensProvider } from './refresh-tokens.provider';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersServise: UsersService,\n\n    /**\n     * Inject signInProvider\n     */\n    private readonly signInProvider: SignInProvider,\n\n    /**\n     * Inject refreshTokensProvider\n     */\n    private readonly refreshTokensProvider: RefreshTokensProvider,\n  ) {}\n\n  public async signIn(signInDto: SignInDto) {\n    return await this.signInProvider.signIn(signInDto);\n  }\n\n  public isAuth() {\n    return true;\n  }\n\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    return await this.refreshTokensProvider.refreshTokens(refreshTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuardTsGuard.html":{"url":"guards/AuthenticationGuardTsGuard.html","title":"guard - AuthenticationGuardTsGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuardTsGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication.guard.ts/authentication.guard.ts.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardmap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication.guard.ts/authentication.guard.ts.guard.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication.guard.ts/authentication.guard.ts.guard.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constants';\n\nclass AllowGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    return true;\n  }\n}\n\n@Injectable()\nexport class AuthenticationGuardTsGuard implements CanActivate {\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  private readonly authTypeGuardmap: Record = {\n      [AuthType.Bearer]: this.accessTokenGuard,\n      [AuthType.None]: { canActivate: () => true },\n    };\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) { }\n  async canActivate(context: ExecutionContext): Promise {\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY,\n      [context.getHandler(), context.getClass()],\n    ) ?? [AuthenticationGuardTsGuard.defaultAuthType];\n\n    const guards = authTypes.map((type) => this.authTypeGuardmap[type]).flat();\n\n    // Declare the default error\n    let error = new UnauthorizedException();\n\n    for (const instance of guards) {\n      // Decalre a new constant\n      const canActivate = await Promise.resolve(\n        // Here the AccessToken Guard Will be fired and check if user has permissions to acces\n        // Later Multiple AuthTypes can be used even if one of them returns true\n        // The user is Authorised to access the resource\n        instance.canActivate(context),\n      ).catch((err) => {\n        error = err;\n      });\n\n      if (canActivate) {\n        return true;\n      }\n    }\n\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n            \n                \ncomparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt'\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider{\n    public async hashPassword(data: string | Buffer): Promise {\n        //Generate salt\n        const salt = await bcrypt.genSalt();\n        return bcrypt.hash(data, salt)\n    }\n    comparePassword(data: string | Buffer, encrypted: string): Promise {\n        return bcrypt.compare(data, encrypted);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CatalogController.html":{"url":"controllers/CatalogController.html","title":"controller - CatalogController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CatalogController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/catalogs/catalog.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                catalog\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                createCategory\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                createProduct\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                deleteCategory\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                deleteProduct\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                updateCategory\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCategory(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new category'})@ApiResponse({status: 201, description: 'Category created successfully.'})@Roles(userRole.ADMIN)@Post('categories')\n                \n            \n\n                    \n                        \n                            Defined in src/catalogs/catalog.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Add a new product'})@ApiResponse({status: 201, description: 'Product created successfully.'})@Roles(userRole.ADMIN)@Post('products')\n                \n            \n\n                    \n                        \n                            Defined in src/catalogs/catalog.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCategory(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a category'})@ApiResponse({status: 200, description: 'Category deleted successfully.'})@Roles(userRole.ADMIN)@Delete('categories/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/catalogs/catalog.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a product'})@ApiResponse({status: 200, description: 'Product deleted successfully.'})@Roles(userRole.ADMIN)@Delete('products/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/catalogs/catalog.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCategory(id: number, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a category'})@ApiResponse({status: 200, description: 'Category updated successfully.'})@Roles(userRole.ADMIN)@Patch('categories/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/catalogs/catalog.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(id: number, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a product'})@ApiResponse({status: 200, description: 'Product updated successfully.'})@Roles(userRole.ADMIN)@Patch('products/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/catalogs/catalog.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, UseGuards, Patch, Param, Delete } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { userRole } from 'src/users/enums/userRole.enum';\nimport { CatalogService } from './providers/catalog.service';\nimport { CreateCategoryDto } from 'src/categories/dtos/create-category.dto';\nimport { CreateProductDto } from 'src/categories/dtos/create-product.dto';\nimport { UpdateCategoryDto } from 'src/categories/dtos/update-categoty.dto';\nimport { UpdateProductDto } from 'src/categories/dtos/update-product.dto';\n\n@ApiTags('Catalog')\n@Controller('catalog')\n@UseGuards(AccessTokenGuard)\nexport class CatalogController {\n  constructor(private readonly catalogService: CatalogService) {}\n\n  @ApiOperation({ summary: 'Create a new category' })\n  @ApiResponse({ status: 201, description: 'Category created successfully.' })\n  @Roles(userRole.ADMIN)\n  @Post('categories')\n  createCategory(@Body() createCategoryDto: CreateCategoryDto) {\n    return this.catalogService.createCategory(createCategoryDto);\n  }\n\n  @ApiOperation({ summary: 'Update a category' })\n  @ApiResponse({ status: 200, description: 'Category updated successfully.' })\n  @Roles(userRole.ADMIN)\n  @Patch('categories/:id')\n  updateCategory(\n    @Param('id') id: number,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n  ) {\n    return this.catalogService.updateCategory(id, updateCategoryDto);\n  }\n\n  @ApiOperation({ summary: 'Delete a category' })\n  @ApiResponse({ status: 200, description: 'Category deleted successfully.' })\n  @Roles(userRole.ADMIN)\n  @Delete('categories/:id')\n  deleteCategory(@Param('id') id: number) {\n    return this.catalogService.deleteCategory(id);\n  }\n\n  @ApiOperation({ summary: 'Add a new product' })\n  @ApiResponse({ status: 201, description: 'Product created successfully.' })\n  @Roles(userRole.ADMIN)\n  @Post('products')\n  createProduct(@Body() createProductDto: CreateProductDto) {\n    return this.catalogService.createProduct(createProductDto);\n  }\n\n  @ApiOperation({ summary: 'Update a product' })\n  @ApiResponse({ status: 200, description: 'Product updated successfully.' })\n  @Roles(userRole.ADMIN)\n  @Patch('products/:id')\n  updateProduct(\n    @Param('id') id: number,\n    @Body() updateProductDto: UpdateProductDto,\n  ) {\n    return this.catalogService.updateProduct(id, updateProductDto);\n  }\n\n  @ApiOperation({ summary: 'Delete a product' })\n  @ApiResponse({ status: 200, description: 'Product deleted successfully.' })\n  @Roles(userRole.ADMIN)\n  @Delete('products/:id')\n  deleteProduct(@Param('id') id: number) {\n    return this.catalogService.deleteProduct(id);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CatalogModule.html":{"url":"modules/CatalogModule.html","title":"module - CatalogModule","body":"\n                   \n\n\n\n\n    Modules\n    CatalogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CatalogModule\n\n\n\ncluster_CatalogModule_providers\n\n\n\ncluster_CatalogModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nCatalogModule\n\nCatalogModule\n\nCatalogModule -->\n\nAuthModule->CatalogModule\n\n\n\n\n\nCatalogService\n\nCatalogService\n\nCatalogModule -->\n\nCatalogService->CatalogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/catalogs/catalogs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CatalogService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CatalogController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Category } from 'src/categories/category.entity';\nimport { Product } from 'src/categories/product.entity';\nimport { CatalogService } from './providers/catalog.service';\nimport { CatalogController } from './catalog.controller';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Category, Product]),\n    AuthModule, // Добавляем AuthModule\n    ConfigModule\n  ],\n  controllers: [CatalogController],\n  providers: [CatalogService],\n})\nexport class CatalogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CatalogService.html":{"url":"injectables/CatalogService.html","title":"injectable - CatalogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CatalogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/catalogs/providers/catalog.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                    Async\n                                deleteProduct\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                            \n                                    Async\n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository, productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/catalogs/providers/catalog.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCategory(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/catalogs/providers/catalog.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/catalogs/providers/catalog.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCategory(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/catalogs/providers/catalog.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/catalogs/providers/catalog.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCategory(id: number, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/catalogs/providers/catalog.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(id: number, updateProductDto: UpdateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/catalogs/providers/catalog.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Category } from 'src/categories/category.entity';\nimport { Product } from 'src/categories/product.entity';\nimport { CreateCategoryDto } from 'src/categories/dtos/create-category.dto';\nimport { CreateProductDto } from 'src/categories/dtos/create-product.dto';\nimport { UpdateProductDto } from 'src/categories/dtos/update-product.dto';\nimport { UpdateCategoryDto } from 'src/categories/dtos/update-categoty.dto';\n\n@Injectable()\nexport class CatalogService {\n  constructor(\n    @InjectRepository(Category)\n    private readonly categoryRepository: Repository,\n\n    @InjectRepository(Product)\n    private readonly productRepository: Repository,\n  ) {}\n\n  async createCategory(\n    createCategoryDto: CreateCategoryDto,\n  ): Promise {\n    const category = this.categoryRepository.create(createCategoryDto);\n    return await this.categoryRepository.save(category);\n  }\n\n  // Update Category\n  async updateCategory(\n    id: number,\n    updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    const category = await this.categoryRepository.findOneBy({ id });\n    if (!category) {\n      throw new NotFoundException('Category not found');\n    }\n    Object.assign(category, updateCategoryDto);\n    return await this.categoryRepository.save(category);\n  }\n\n  // Delete Category\n  async deleteCategory(id: number): Promise {\n    const category = await this.categoryRepository.findOneBy({ id });\n    if (!category) {\n      throw new NotFoundException('Category not found');\n    }\n    await this.categoryRepository.remove(category);\n  }\n\n  async createProduct(createProductDto: CreateProductDto) {\n    const { categoryId, ...productData } = createProductDto;\n\n    const category = await this.categoryRepository.findOneBy({\n      id: categoryId,\n    });\n    if (!category) {\n      throw new NotFoundException('Category not found');\n    }\n\n    const product = this.productRepository.create({\n      ...productData,\n      category,\n    });\n\n    return this.productRepository.save(product);\n  }\n\n  // Update Product\n  async updateProduct(\n    id: number,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    const product = await this.productRepository.findOneBy({ id });\n    if (!product) {\n      throw new NotFoundException('Product not found');\n    }\n    Object.assign(product, updateProductDto);\n    return await this.productRepository.save(product);\n  }\n\n  // Delete Product\n  async deleteProduct(id: number): Promise {\n    const product = await this.productRepository.findOneBy({ id });\n    if (!product) {\n      throw new NotFoundException('Product not found');\n    }\n    await this.productRepository.remove(product);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\n@Module({})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                products\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/category.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/category.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, product => product.category)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/category.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { Product } from './product.entity';\n\n@Entity()\nexport class Category {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  name: string;\n\n  @OneToMany(() => Product, (product) => product.category)\n  products: Product[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comment.html":{"url":"entities/Comment.html","title":"entity - Comment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                parent\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                    \n                                product\n                            \n                            \n                                    \n                                replies\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, comment => comment.replies, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.comments, {nullable: true})@JoinColumn({name: 'postId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, product => product.comments, {onDelete: 'CASCADE'})@JoinColumn({name: 'productId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.parent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.comments, {onDelete: 'SET NULL'})@JoinColumn({name: 'userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  JoinColumn,\n} from 'typeorm';\nimport { User } from 'src/users/user.entity';\nimport { Product } from 'src/categories/product.entity';\nimport { Post } from 'src/posts/post.entity';\n\n@Entity()\nexport class Comment {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('text')\n  content: string;\n\n  @ManyToOne(() => Product, (product) => product.comments, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'productId' })\n  product: Product;\n\n  @ManyToOne(() => User, (user) => user.comments, { onDelete: 'SET NULL' })\n  @JoinColumn({ name: 'userId' })\n  user: User;\n\n  @ManyToOne(() => Post, (post) => post.comments, { nullable: true })\n  @JoinColumn({ name: 'postId' })\n  post: Post;\n\n  @ManyToOne(() => Comment, (comment) => comment.replies, { nullable: true })\n  parent: Comment;\n\n  @OneToMany(() => Comment, (comment) => comment.parent)\n  replies: Comment[];\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentsController.html":{"url":"controllers/CommentsController.html","title":"controller - CommentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createComment\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getAllComments\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getCommentsForPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createComment(createCommentDto: CreateCommentDto, user: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new comment'})@ApiResponse({status: 201, description: 'Comment created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/comments/comments.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllComments(productId?: number, page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all comments'})@ApiResponse({status: 200, description: 'List of all comments.'})@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/comments/comments.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getCommentsForPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCommentsForPost(postId: number, page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get comments for a specific post'})@ApiResponse({status: 200, description: 'List of comments for the post.'})@Get('post/:postId')\n                \n            \n\n                    \n                        \n                            Defined in src/comments/comments.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Param,\n  Get,\n  UseGuards,\n  Query,\n} from '@nestjs/common';\nimport { CommentsService } from './providers/comments.service';\nimport { CreateCommentDto } from './dtos/create-comment.dto';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { ActiveUser } from 'src/auth/decorators/active-user.decorator';\nimport { User } from 'src/users/user.entity';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { ActiveUserData } from 'src/auth/inteface/active-user-data.interface';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Comment } from './comment.entity';\n\n@ApiTags('Comments')\n@Controller('comments')\n@UseGuards(AccessTokenGuard)\nexport class CommentsController {\n  constructor(\n    private readonly commentsService: CommentsService,\n    @InjectRepository(Comment)\n    private readonly commentsRepository: Repository,\n  ) {}\n\n  @ApiOperation({ summary: 'Create a new comment' })\n  @ApiResponse({ status: 201, description: 'Comment created successfully' })\n  @Post()\n  async createComment(\n    @Body() createCommentDto: CreateCommentDto,\n    @ActiveUser() user: ActiveUserData,\n  ) {\n    return this.commentsService.createComment(createCommentDto, user);\n  }\n\n  @ApiOperation({ summary: 'Get all comments' })\n  @ApiResponse({ status: 200, description: 'List of all comments.' })\n  @Get()\n  async getAllComments(\n    @Query('productId') productId?: number,\n    @Query('page') page = 1,\n    @Query('limit') limit = 10,\n  ) {\n    return this.commentsService.getAllComments(productId, page, limit);\n  }\n\n  @ApiOperation({ summary: 'Get comments for a specific post' })\n  @ApiResponse({ status: 200, description: 'List of comments for the post.' })\n  @Get('post/:postId')\n  async getCommentsForPost(\n    @Param('postId') postId: number,\n    @Query('page') page = 1,\n    @Query('limit') limit = 10,\n  ) {\n    return this.commentsService.getCommentsForPost(postId, page, limit);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_exports\n\n\n\ncluster_CommentsModule_imports\n\n\n\ncluster_CommentsModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsModule -->\n\nAuthModule->CommentsModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nCommentsModule -->\n\nPostsModule->CommentsModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nCommentsModule -->\n\nProductsModule->CommentsModule\n\n\n\n\n\nCommentsService \n\nCommentsService \n\nCommentsService  -->\n\nCommentsModule->CommentsService \n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/comments/comments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            ProductsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommentsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CommentsService } from './providers/comments.service';\nimport { CommentsController } from './comments.controller';\nimport { Comment } from './comment.entity';\nimport { User } from 'src/users/user.entity';\nimport { Product } from 'src/categories/product.entity';\nimport { ProductsModule } from 'src/products/products.module';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { PostsModule } from 'src/posts/posts.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Comment, User, Product]),\n    ProductsModule, // Import ProductsModule\n    AuthModule,\n    PostsModule\n  ],\n  providers: [CommentsService],\n  controllers: [CommentsController],\n  exports: [CommentsService],\n})\nexport class CommentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentsService.html":{"url":"injectables/CommentsService.html","title":"injectable - CommentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/providers/comments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getCommentsForPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository, productsRepository: Repository, usersRepository: Repository, postRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/comments/providers/comments.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createComment(createCommentDto: CreateCommentDto, activeUser: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/comments/providers/comments.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                activeUser\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllComments(productId?: number, page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/comments/providers/comments.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCommentsForPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCommentsForPost(postId: number, page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/comments/providers/comments.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Comment } from '../comment.entity';\nimport { CreateCommentDto } from '../dtos/create-comment.dto';\nimport { Product } from 'src/categories/product.entity';\nimport { User } from 'src/users/user.entity';\nimport { ActiveUserData } from 'src/auth/inteface/active-user-data.interface';\nimport { Post } from 'src/posts/post.entity';\n\n@Injectable()\nexport class CommentsService {\n  constructor(\n    @InjectRepository(Comment)\n    private readonly commentsRepository: Repository,\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n    @InjectRepository(Post)\n    private readonly postRepository: Repository,\n  ) {}\n\n  async createComment(createCommentDto: CreateCommentDto, activeUser: ActiveUserData) {\n    const user = await this.usersRepository.findOneBy({ id: activeUser.sub });\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n  \n    let post: Post | undefined;\n    let product: Product | undefined;\n  \n    if (createCommentDto.postId) {\n      post = await this.postRepository.findOneBy({ id: createCommentDto.postId });\n      if (!post) {\n        throw new NotFoundException('Post not found');\n      }\n    }\n  \n    if (createCommentDto.productId) {\n      product = await this.productsRepository.findOneBy({ id: createCommentDto.productId });\n      if (!product) {\n        throw new NotFoundException('Product not found');\n      }\n    }\n  \n    const comment = this.commentsRepository.create({\n      content: createCommentDto.content,\n      user,\n      post,\n      product,\n    });\n  \n    return this.commentsRepository.save(comment);\n  }  \n\n  // Method to fetch all comments\n  async getAllComments(productId?: number, page = 1, limit = 10) {\n    const queryBuilder = this.commentsRepository.createQueryBuilder('comment')\n      .leftJoinAndSelect('comment.product', 'product')\n      .leftJoinAndSelect('comment.user', 'user');\n\n    if (productId) {\n      queryBuilder.andWhere('comment.productId = :productId', { productId });\n    }\n\n    queryBuilder\n      .skip((page - 1) * limit)\n      .take(limit)\n      .orderBy('comment.createdAt', 'DESC');\n\n    const [comments, total] = await queryBuilder.getManyAndCount();\n\n    return {\n      data: comments,\n      total,\n      page,\n      limit,\n    };\n  }\n\n  async getCommentsForPost(postId: number, page = 1, limit = 10) {\n    const queryBuilder = this.commentsRepository.createQueryBuilder('comment')\n      .leftJoinAndSelect('comment.user', 'user')\n      .where('comment.postId = :postId', { postId })\n      .skip((page - 1) * limit)\n      .take(limit)\n      .orderBy('comment.createdAt', 'DESC');\n  \n    const [comments, total] = await queryBuilder.getManyAndCount();\n  \n    return {\n      data: comments,\n      total,\n      page,\n      limit,\n    };\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dtos/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/create-category.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, MaxLength } from 'class-validator';\n\nexport class CreateCategoryDto {\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(96)\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dtos/create-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                postId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                productId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dtos/create-comment.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dtos/create-comment.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dtos/create-comment.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class CreateCommentDto {\n  @IsNotEmpty()\n  @IsString()\n  content: string;\n\n  @IsOptional()\n  @IsNumber()\n  productId?: number;\n\n  @IsOptional()\n  @IsNumber()\n  postId?: number; // ID поста, к которому привязывается комментарий\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateGoogleUserProvider.html":{"url":"injectables/CreateGoogleUserProvider.html","title":"injectable - CreateGoogleUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateGoogleUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-google-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-google-user.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-google-user.provider.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\nimport { GoogleUser } from '../interfaces/google-user.interface';\n\n@Injectable()\nexport class CreateGoogleUserProvider {\n    constructor(\n        /**\n         * Inject usersRepository\n         */\n        @InjectRepository(User)\n        private readonly usersRepository: Repository,\n    ){\n\n    }\n\n    public async createGoogleUser(googleUser: GoogleUser){\n        try{\n            const user = this.usersRepository.create(googleUser);\n            return await this.usersRepository.save(user)\n        } catch(error){\n            throw new ConflictException(error, {\n                description: 'Could Not Create A New User',\n            })\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-users.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\n\nimport { ApiProperty } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\n\nexport class CreateManyUsersDto {\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    items: {\n      type: 'User',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrls\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'The post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrls\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured images for your blog post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@IsArray()@IsUrl({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Possible values: post, page. story, series'})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})@IsDate()@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example - 'my url', example: 'my blog post'})@IsString()@IsNotEmpty()@MaxLength(256)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'Possible values: draft, scheduled. review, published'})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the title'})@IsString()@MinLength(4)@IsNotEmpty()@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsString, Matches, MinLength, IsOptional, IsJSON, IsUrl, IsDate, IsArray, ValidateNested, MaxLength, IsInt } from \"class-validator\";\nimport { postStatus } from \"../enums/postStatus.enum\";\nimport { postType } from \"../enums/postType.enum\";\nimport { CreatePostMetaOptionsDto } from \"../../meta-options/dtos/create-post-meta-options.dto\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class CreatePostDto {\n    @ApiProperty({\n        description: \"This is the title\"\n    })\n    @IsString()\n    @MinLength(4)\n    @IsNotEmpty()\n    @MaxLength(512)\n    title: string;\n\n    @ApiProperty({\n        enum: postType,\n        description: \"Possible values: post, page. story, series\"\n    })\n    @IsEnum(postType)\n    @IsNotEmpty()\n    postType: postType;\n\n    @ApiProperty({\n        description: \"For example - 'my url\",\n        example: \"my blog post\"\n    })\n    @IsString()\n    @IsNotEmpty()\n    @MaxLength(256)\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n    })\n    slug: string;\n\n    @ApiProperty({\n        enum: postStatus,\n        description: \"Possible values: draft, scheduled. review, published\"\n    })\n    @IsEnum(postStatus)\n    @IsNotEmpty()\n    status: postStatus;\n\n    @ApiPropertyOptional({\n        description: \"This is the content of the post\",\n        example: \"The post content\"\n    })\n    @IsString()\n    @IsOptional()\n    content?: string;\n\n    @ApiPropertyOptional({\n        description: \"Serialize your JSON object else a validation error will be thrown\",\n        example: '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }'\n    })\n    @IsOptional()\n    @IsJSON()\n    schema?: string;\n\n    @ApiPropertyOptional({\n        description: 'Featured images for your blog post',\n        example: 'http://localhost.com/images/image1.jpg',\n    })\n    @IsOptional()\n    @IsArray()\n    @IsUrl({}, { each: true })\n    featuredImageUrls?: string[];\n\n    @ApiPropertyOptional({\n        description: 'The date on which the blog post is published',\n        example: '2024-03-16T07:46:32+0000',\n    })\n    @IsDate()\n    @IsOptional()\n    @Type(() => Date)\n    publishOn?: Date;\n\n    @ApiPropertyOptional({\n        type: 'object',\n        required: false,\n        items: {\n            type: 'object',\n            properties: {\n                metaValue: {\n                    type: 'json',\n                    description: 'The metaValue is a JSON string',\n                    example: '{\"sidebarEnabled\": true}',\n                },\n            },\n        },\n    })\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CreatePostMetaOptionsDto)\n    metaOptions?: CreatePostMetaOptionsDto | null;\n\n    @ApiPropertyOptional({\n        description: 'Array of ids of tags',\n        example: [1, 2],\n    })\n    @IsOptional()\n    @IsArray()\n    @IsInt({ each: true })\n    tags?: number[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from \"class-validator\";\n\nexport class CreatePostMetaOptionsDto{\n    @IsNotEmpty()\n    @IsJSON() \n    metaValue: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreatePostProvider.html":{"url":"injectables/CreatePostProvider.html","title":"injectable - CreatePostProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreatePostProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/create-post.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, tagsService: TagsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/create-post.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/create-post.provider.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Body, ConflictException, Injectable } from '@nestjs/common';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { ActiveUserData } from 'src/auth/inteface/active-user-data.interface';\n\n@Injectable()\nexport class CreatePostProvider {\n\n    constructor(\n        /**\n         * Injecting users service\n         */\n\n        private readonly usersService: UsersService,\n        /**\n         * Inject postsRepository\n         */\n        @InjectRepository(Post)\n        private readonly postsRepository: Repository,\n\n        /**\n         * Inject TagService\n         */\n        private readonly tagsService: TagsService,\n    ) { }\n\n    public async create(createPostDto: CreatePostDto, user: ActiveUserData) {\n        let author = undefined;\n        let tags = undefined;\n\n        try {\n            //Find author from db by authorId\n            author = await this.usersService.findOneById(user.sub)\n\n            //Find tags\n            tags = await this.tagsService.findMultipleTags(createPostDto.tags)\n        } catch (error) {\n            throw new ConflictException(error);\n        }\n\n        if (createPostDto.tags.length != tags.length) {\n            throw new BadRequestException; ('Please check ur tag Ids')\n        }\n\n        //create Post\n        let post = this.postsRepository.create({\n            ...createPostDto,\n            author: author,\n            tags: tags\n        })\n\n        try {\n            //return the post\n            return await this.postsRepository.save(post);\n        } catch (error) {\n            throw new ConflictException(error, {\n                description: 'Make sure posts slug is uniq and not a duplicate'\n            })\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dtos/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                categoryId\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                specifications\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Category ID for the product'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/create-product.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description of the product'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/create-product.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'URL of the product image'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/create-product.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the product'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/create-product.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Price of the product'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/create-product.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        specifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Specifications of the product'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/create-product.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status of the product', enum: ProductStatus, default: undefined})@IsEnum(ProductStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/create-product.dto.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsNumber, IsOptional, IsEnum } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport enum ProductStatus {\n  NEW = 'новинка',\n  SALE = 'акция',\n  RECOMMENDED = 'рекомендуем',\n  HIT = 'хит',\n  NONE = 'обычный',\n}\n\nexport class CreateProductDto {\n  @ApiProperty({ description: 'Name of the product' })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({ description: 'Description of the product' })\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty({ description: 'Price of the product' })\n  @IsNumber()\n  @IsNotEmpty()\n  price: number;\n\n  @ApiProperty({ description: 'Specifications of the product' })\n  @IsString()\n  @IsOptional()\n  specifications?: string;\n\n  @ApiProperty({\n    description: 'Status of the product',\n    enum: ProductStatus,\n    default: ProductStatus.NONE,\n  })\n  @IsEnum(ProductStatus)\n  @IsOptional()\n  status?: ProductStatus;\n\n  @ApiProperty({ description: 'URL of the product image' })\n  @IsString()\n  @IsOptional()\n  imageUrl?: string;\n\n  @ApiProperty({ description: 'Category ID for the product' })\n  @IsNumber()\n  @IsNotEmpty()\n  categoryId: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateTagDto {\n    @ApiProperty()\n    @IsString()\n    @MinLength(3)\n    @IsNotEmpty()\n    @MaxLength(256)\n    name: string;\n    @ApiProperty()\n    @IsString()\n    @IsNotEmpty()\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message:\n            'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n    })\n    @MaxLength(512)\n    slug: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsString()\n    description: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsJSON()\n    schema: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsUrl()\n    @MaxLength(1024)\n    featuredImageUrl?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         userRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Role of the user', enum: userRole, default: undefined})@IsEnum(userRole)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MaxLength, MinLength } from \"class-validator\";\nimport { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum } from \"class-validator\";\nimport { userRole } from \"../enums/userRole.enum\";\n\nexport class CreateUserDto {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n    \n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName?: string;\n\n    @IsString()\n    @IsEmail()\n    @IsNotEmpty()\n    @MaxLength(96)\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @MaxLength(96)\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n        message: 'Minimum eight characters, at least one letter, one number and one special character'\n    })\n    password: string;\n\n    @ApiPropertyOptional({\n        description: \"Role of the user\",\n        enum: userRole,\n        default: userRole.USER,\n    })\n    @IsEnum(userRole)\n    @IsOptional()\n    role?: userRole;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, hashingProvider: HashingProvider, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MailService } from 'src/mail/providers/mail.service';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    /**\n     * Inject usersRepository\n     */\n\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n    /**\n     * Inject HashingProvider\n     */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n    /**\n     * Inject mailService\n     */\n    private readonly mailService: MailService,\n  ) {}\n\n  public async createUser(createUserDto: CreateUserDto) {\n    let existingUser = undefined;\n\n    try {\n      //Check for existing\n      existingUser = await this.usersRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please ttry later',\n        {\n          description: 'Error connecting to db',\n        },\n      );\n    }\n\n    //Handle execption\n    if (existingUser) {\n      throw new BadRequestException(\n        'The user already exists, plesae check you email',\n      );\n    }\n\n    //Create a new user\n    let newUser = this.usersRepository.create({\n      ...createUserDto,\n      password: await this.hashingProvider.hashPassword(createUserDto.password),\n    });\n\n    try {\n      newUser = await this.usersRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please ttry later',\n        {\n          description: 'Erroe connecting to the db',\n        },\n      );\n    }\n\n    try {\n      this.mailService.sendUserWelcome(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response/data-response.interceptor.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response/data-response.interceptor.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Observable, tap, map } from 'rxjs';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  constructor(\n    private readonly configService:ConfigService,\n  ){}\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => ({\n        apiVersion: this.configService.get('appConfig.apiVersion'),\n        data: data,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByGoogleIdProvider.html":{"url":"injectables/FindOneByGoogleIdProvider.html","title":"injectable - FindOneByGoogleIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByGoogleIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-by-google-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-by-google-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-by-google-id.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneByGoogleIdProvider {\n    constructor(\n        /**\n         * Inject usersRepository\n         */\n        @InjectRepository(User)\n        private readonly usersRepository: Repository,\n    ){}\n\n    public async findOneByGoogleId(googleId: string){\n        return await this.usersRepository.findOneBy({googleId});\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByEmailProvider.html":{"url":"injectables/FindOneUserByEmailProvider.html","title":"injectable - FindOneUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-email.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-email.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneUserByEmailProvider {\n    constructor(\n        /**\n         * Inject usersRepository\n         */\n        @InjectRepository(User)\n        private readonly usersRepository: Repository\n    ) { }\n\n    public async findOneByEmail(email: string) {\n        let user: User | undefined = undefined;\n\n        try {\n            user = await this.usersRepository.findOneBy({\n                email: email\n            });\n        }catch(error){\n            throw new RequestTimeoutException(error, {\n                description: 'Could not fetch the user',\n            });\n        }\n\n        if (!user){\n            throw new UnauthorizedException('User does not exist')\n        }\n\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:23\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { User } from 'src/users/user.entity';\nimport { ActiveUserData } from '../inteface/active-user-data.interface';\n\n@Injectable()\nexport class GenerateTokensProvider {\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Inject jwtConfiguration\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  public async signToken>(userId: number, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn,\n      },\n    );\n  }\n\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n      //Generate The Access Token\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTtl,\n        {\n          email: user.email,\n          role: user.role,\n        },\n      ),\n      //Generate the refreshToken\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenttl),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto.html":{"url":"classes/GetPostsBaseDto.html","title":"class - GetPostsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\n\nimport { IntersectionType } from '@nestjs/swagger';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { Type } from 'class-transformer';\n\nclass GetPostsBaseDto {\n    @IsDate()\n    @IsOptional()\n    @Type(() => Date)\n    startDate?: Date;\n\n    @IsDate()\n    @IsOptional()\n    @Type(() => Date)\n    endDate?: Date;\n}\n\nexport class GetPostsDto extends IntersectionType(\n    GetPostsBaseDto,\n    PaginationQueryDto,\n) { }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsDto.html":{"url":"classes/GetPostsDto.html","title":"class - GetPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n    GetPostsBaseDto,\n    PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\n\nimport { IntersectionType } from '@nestjs/swagger';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { Type } from 'class-transformer';\n\nclass GetPostsBaseDto {\n    @IsDate()\n    @IsOptional()\n    @Type(() => Date)\n    startDate?: Date;\n\n    @IsDate()\n    @IsOptional()\n    @Type(() => Date)\n    endDate?: Date;\n}\n\nexport class GetPostsDto extends IntersectionType(\n    GetPostsBaseDto,\n    PaginationQueryDto,\n) { }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get a user with a specefic id', example: '12'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class GetUsersParamDto {\n    @ApiPropertyOptional({\n        description: \"Get a user with a specefic id\",\n        example: \"12\"\n    })\n    @IsOptional()\n    @IsInt()\n    @Type(()=>Number)\n    id?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\nimport { AuthType } from '../enums/auth-type.enum';\nimport { Auth } from '../decorators/auth.decorator';\n\n@Auth(AuthType.None)\n@Controller('auth/google-authentication')\nexport class GoogleAuthenticationController {\n  constructor(\n    /**\n     * Inject googleAuthenticationSerivce\n     */\n    private readonly googleAuthenticationService: GoogleAuthenticationService,\n  ) {}\n\n  @Post()\n  public authenticate(@Body() googleTokenDto:GoogleTokenDto){\n    return this.googleAuthenticationService.authenticate(googleTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtConfiguration: ConfigType<>, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  OnModuleInit,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n  private oauthClient: OAuth2Client;\n\n  constructor(\n    /**\n     * Inject UsersService\n     */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n    /**\n     * Inject jwtConfiguration\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n    /**\n     * Inject generateTokensProvider\n     */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  onModuleInit() {\n    const clientId = this.jwtConfiguration.googleClientId;\n    const clientSecret = this.jwtConfiguration.googleClientSecret;\n    this.oauthClient = new OAuth2Client(clientId, clientSecret);\n  }\n\n  public async authenticate(googleTokenDto: GoogleTokenDto) {\n    try {\n      //verify the google token sent by User\n      const loginTicket = await this.oauthClient.verifyIdToken({\n        idToken: googleTokenDto.token,\n      });\n\n      //extract the playload from google jwt\n      const {\n        email,\n        sub: googleId,\n        given_name: firstName,\n        family_name: lastName,\n      } = loginTicket.getPayload();\n\n      // find the user in the db using the googleid\n      const user = await this.usersService.findOneByGoogleId(googleId);\n      //if gooleid exist generate token\n      if (user) {\n        return this.generateTokensProvider.generateTokens(user);\n      }\n      //if not, create a new user and then generate tokens\n      const newUser = await this.usersService.createGoogleUser({\n        email: email,\n        firstName: firstName,\n        lastName: lastName,\n        googleId: googleId,\n      });\n\n      return this.generateTokensProvider.generateTokens(newUser);\n    } catch (error) {\n      //throw unautorized exception\n      throw new UnauthorizedException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from \"class-validator\";\n\nexport class GoogleTokenDto{\n    @IsNotEmpty()\n    token: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GoogleUser.html":{"url":"interfaces/GoogleUser.html","title":"interface - GoogleUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GoogleUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/google-user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            googleId\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        googleId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface GoogleUser{\n    email: string;\n    firstName: string;\n    lastName: string;\n    googleId: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n    abstract hashPassword(data: string | Buffer): Promise;\n\n    abstract comparePassword(\n        data:string|Buffer,\n        encrypted: string,\n    ): Promise\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { MailService } from './providers/mail.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { join } from 'path';\nimport { EjsAdapter } from '@nestjs-modules/mailer/dist/adapters/ejs.adapter';\n\n@Global()\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      useFactory: async (config: ConfigService) => ({\n        transport: {\n          host: config.get('appConfig.mailHost'),\n          secure: false,\n          port: 2525,\n          auth: {\n            user: config.get('appConfig.smtpUsername'),\n            pass: config.get('appConfig.smtpPassword'),\n          },\n        },\n        defaults: {\n          from: `My Blog `,\n        },\n        template: {\n          dir: join(__dirname, 'templates'),\n          adapter: new EjsAdapter({ inlineCssEnabled: true }),\n          options: {\n            strict: false,\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendUserWelcome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/providers/mail.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendUserWelcome\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendUserWelcome(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { User } from 'src/users/user.entity';\n\n@Injectable()\nexport class MailService {\n  constructor(private mailerService: MailerService) {}\n\n  async sendUserWelcome(user: User): Promise {\n    await this.mailerService.sendMail({\n      to: user.email,\n      // override default from\n      from: '\"Onbaording Team\" ',\n      subject: 'Welcome to NestJs Blog',\n      // `.ejs` extension is appended automatically to template\n      template: './welcome',\n      // Context is available in email template\n      context: {\n        name: user.firstName,\n        email: user.email,\n        loginUrl: 'http://localhost:3000',\n      },\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/posts/post.entity\";\nimport { Column, CreateDateColumn, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n\n@Entity()\nexport class MetaOption{\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: 'json',\n        nullable: false\n    })\n    metaValue: string;\n    \n    @CreateDateColumn()\n    createDate: Date;\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n    @OneToOne(()=>Post, (post)=>post.metaOptions, {\n        onDelete: 'CASCADE',\n    })\n    @JoinColumn()\n    post: Post\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n    constructor(\n        /**\n         * Inject metaoptions service\n         */\n        private readonly metaOptionsService: MetaOptionsService,\n    ){}\n    @Post()\n    public create(@Body() createPostMetaOptionsDto: CreatePostMetaOptionsDto){\n        return this.metaOptionsService.create(createPostMetaOptionsDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService]\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\nimport { Repository } from 'typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\n\nexport class MetaOptionsService {\n    constructor(\n        @InjectRepository(MetaOption)\n        private readonly metaOptionsRepository: Repository \n    ){}\n\n    public async create(createPostMetaOptionsDto: CreatePostMetaOptionsDto){\n        let metaoption = this.metaOptionsRepository.create(\n            createPostMetaOptionsDto,\n        )\n        return await this.metaOptionsRepository.save(metaoption)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated{\n    data: T[];\n    meta:{\n        itemsPerPage: number,    \n        totalItem: number,    \n        currentPage: number,    \n        totalPages: number,    \n    };\n    links: {\n        first: string;\n        last: string;\n        current: string;\n        next: string;\n        pervious: string;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider]\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:18\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport {REQUEST} from '@nestjs/core'\nimport { Request } from 'express';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n\n@Injectable()\nexport class PaginationProvider {\n    constructor(\n        /**\n         * Inject request\n         */\n        @Inject(REQUEST)\n        private readonly request: Request,\n    ){}\n    public async paginateQuery(\n        paginationQuery: PaginationQueryDto,\n        repository: Repository,\n    ): Promise> {\n        let limit = paginationQuery.limit;\n        let page = paginationQuery.page;\n\n        const [data, totalItems] = await repository.findAndCount({\n            skip: (page - 1) * limit,\n            take: limit,\n        });\n\n        let results = await repository.findAndCount({\n            skip: (page - 1) * limit,\n            take: limit,\n        });\n\n        \n        /**\n         * Create request URLS\n        */\n       const baseURL = this.request.protocol + '://' + this.request.headers.host + '/';\n       const newUrl = new URL(this.request.url, baseURL);\n       \n       console.log(newUrl);\n       \n       const totalPages = Math.ceil(totalItems / limit);\n\n       const nextPage = page === totalPages ? page : page + 1;\n\n       const perviousPage = page === 1 ? page : page - 1;\n\n       return {\n        data,\n        meta: {\n            itemsPerPage: limit,\n            totalItem: totalItems, // Здесь исправлено\n            currentPage: page,\n            totalPages,\n        },\n        links: {\n            first: `${newUrl.origin}${newUrl.pathname}?limit=${limit}&page=1`,\n            last: `${newUrl.origin}${newUrl.pathname}?limit=${limit}&page=${totalPages}`,\n            current: `${newUrl.origin}${newUrl.pathname}?limit=${limit}&page=${page}`,\n            next: `${newUrl.origin}${newUrl.pathname}?limit=${limit}&page=${nextPage}`,\n            pervious: `${newUrl.origin}${newUrl.pathname}?limit=${limit}&page=${perviousPage}`,\n        },\n    };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nexport class PaginationQueryDto {\n  @IsOptional()\n  @IsPositive()\n  @Type(() => Number) // Преобразование в число\n  limit?: number;\n\n  @IsOptional()\n  @IsPositive()\n  @Type(() => Number) // Преобразование в число\n  page?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the post that need to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dto\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto){\n    @ApiProperty({\n        description: \"The id of the post that need to be updated\"\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id: number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto){}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrls\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrls\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { postType } from './enums/postType.enum';\nimport { postStatus } from './enums/postStatus.enum';\nimport { CreatePostMetaOptionsDto } from '../meta-options/dtos/create-post-meta-options.dto';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\nimport { Comment } from 'src/comments/comment.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    enum: postType,\n    nullable: false,\n    default: postType.POST,\n  })\n  postType: postType;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: postStatus,\n    nullable: false,\n    default: postStatus.DRAFT,\n  })\n  status: postStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n  })\n  featuredImageUrls?: string[];\n\n  @Column({\n    type: 'timestamp', // 'datetime' in mysql\n    nullable: true,\n  })\n  publishOn?: Date;\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    eager: true,\n  })\n  metaOptions?: MetaOption;\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n\n  @ManyToMany(() => Tag, (tag) => tag.posts, {\n    eager: true,\n  })\n  @JoinTable()\n  tags?: Tag[];\n\n  @OneToMany(() => Comment, (comment) => comment.post)\n  comments: Comment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is created successfully'})@ApiOperation({summary: 'Create a new'})@ApiResponse({status: 201, description: 'New created successfully.'})@Roles(userRole.ADMIN)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(userRole.ADMIN)@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string, postQuery: GetPostsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        GET localhost:3000/posts/:userId\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Roles(userRole.ADMIN)@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Body,\n  Patch,\n  Delete,\n  Query,\n  ParseIntPipe,\n  Req,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsDto } from './dtos/get-posts.dto';\nimport { request } from 'http';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constants';\nimport { ActiveUser } from 'src/auth/decorators/active-user.decorator';\nimport { ActiveUserData } from 'src/auth/inteface/active-user-data.interface';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { userRole } from 'src/users/enums/userRole.enum';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  /**\n   * GET localhost:3000/posts/:userId\n   */\n\n  @Get('/:userId?')\n  public getPosts(\n    @Param('userId') userId: string,\n    @Query() postQuery: GetPostsDto,\n  ) {\n    console.log(postQuery);\n    return this.postsService.findAll(postQuery, userId);\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post is created successfully',\n  })\n  @ApiOperation({ summary: 'Create a new' })\n  @ApiResponse({ status: 201, description: 'New created successfully.' })\n  @Roles(userRole.ADMIN)\n  @Post()\n  public createPost(\n    @Body() createPostDto: CreatePostDto,\n    @ActiveUser() user: ActiveUserData,\n  ) {\n    return this.postsService.create(createPostDto, user);\n  }\n\n  @ApiOperation({\n    summary: 'Updates an existing blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'A 200 response if the post is updated successfully',\n  })\n  @Roles(userRole.ADMIN)\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.update(patchPostDto);\n  }\n\n  @Roles(userRole.ADMIN)\n  @Delete()\n  public deletePost(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostsModule -->\n\nCreatePostProvider->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreatePostProvider\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { CreatePostProvider } from './providers/create-post.provider';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService, CreatePostProvider],\n  imports: [\n    UsersModule, \n    TagsModule, \n    TypeOrmModule.forFeature([Post, MetaOption]),\n    PaginationModule,\n  ],\n  exports: [TypeOrmModule]\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionsRepository: Repository, tagsService: TagsService, paginationProvider: PaginationProvider, createPostProvider: CreatePostProvider)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createPostProvider\n                                                  \n                                                        \n                                                                        CreatePostProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Creating new posts\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(postQuery: GetPostsDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Body, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dtos/patch-post.dto';\nimport { GetPostsDto } from '../dtos/get-posts.dto';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { CreatePostProvider } from './create-post.provider';\nimport { ActiveUserData } from 'src/auth/inteface/active-user-data.interface';\n\n@Injectable()\nexport class PostsService {\n\n    constructor(\n        /**\n         * Injecting users service\n         */\n\n        private readonly usersService: UsersService,\n        /**\n         * Inject postsRepository\n         */\n        @InjectRepository(Post)\n        private readonly postsRepository: Repository,\n        /**\n         * Inject MetaOptionsRepository\n         */\n        @InjectRepository(MetaOption)\n        private readonly metaOptionsRepository: Repository,\n\n        /**\n         * Inject TagService\n         */\n        private readonly tagsService: TagsService,\n\n        /**\n         * Injecting pagination provider\n         */\n        private readonly paginationProvider: PaginationProvider,\n\n        /**\n         * Inject createPostProvider\n         */\n        private readonly createPostProvider: CreatePostProvider,\n    ) { }\n\n    /**\n     * Creating new posts\n     */\n    public async create(createPostDto: CreatePostDto, user: ActiveUserData) {\n        return await this.createPostProvider.create(createPostDto, user);\n      }\n\n    public async findAll(postQuery: GetPostsDto, userId: string):Promise> {\n        const limit = postQuery.limit;\n        const page = postQuery.page;\n\n        return await this.paginationProvider.paginateQuery(\n            { limit, page },\n            this.postsRepository,\n        );\n    }\n\n    public async update(patchPostDto: PatchPostDto) {\n\n        let tags = undefined;\n        let post = undefined;\n\n        //Find the tags\n        try {\n            tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n        } catch (error) {\n            throw new RequestTimeoutException('Unable to process ur request at the moment, please try later')\n        }\n\n        /**\n         * Number of the tags should be equal\n         */\n\n        if (!tags || tags.length !== patchPostDto.tags.length) {\n            throw new BadRequestException(\n                'Please check ut tag Ids and ensure they are correct'\n            )\n        }\n        //Find the post\n        try {\n            post = await this.postsRepository.findOneBy({\n                id: patchPostDto.id,\n            })\n        } catch (error) {\n            throw new RequestTimeoutException('Unable to process ur request at the moment, please try later')\n        }\n\n        if (!post) {\n            throw new BadRequestException('The post Id does not exist')\n        }\n\n        //Update the propereties\n        post.title = patchPostDto.title ?? post.title;\n        post.content = patchPostDto.content ?? post.content;\n        post.status = patchPostDto.status ?? post.status;\n        post.postType = patchPostDto.postType ?? post.postType;\n        post.slug = patchPostDto.slug ?? post.slug;\n        post.featuredImageUrls = patchPostDto.featuredImageUrls ?? post.featuredImageUrls;\n        post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n\n        //Assign the new tags\n        post.tags = tags;\n        //Save the post and return\n        try {\n            await this.postsRepository.save(post);\n        } catch (error) {\n            throw new RequestTimeoutException('Unable to process ur request at the moment, please try later')\n        }\n\n        return post;\n    }\n\n    public async delete(id: number) {\n        //Deleting the post\n        await this.postsRepository.delete(id);\n\n        //confiramtion\n        return { deleted: true, id };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                imageUrl\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                specifications\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, category => category.products)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/product.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/product.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/product.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/product.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/product.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/product.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/product.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        specifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/product.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: undefined, default: 'обычный'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/product.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\nimport { Category } from './category.entity';\nimport { Comment } from 'src/comments/comment.entity';\n\n@Entity()\nexport class Product {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  name: string;\n\n  @Column({ type: 'text', nullable: true })\n  description: string;\n\n  @Column({ type: 'varchar', length: 1024, nullable: true })\n  imageUrl: string;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2, nullable: false })\n  price: number;\n\n  @Column({ type: 'text', nullable: true })\n  specifications: string;\n\n  @Column({\n    type: 'enum',\n    enum: ['новинка', 'акция', 'рекомендуем', 'хит', 'обычный'],\n    default: 'обычный',\n  })\n  status: string;\n\n  @ManyToOne(() => Category, (category) => category.products)\n  category: Category;\n\n  @OneToMany(() => Comment, (comment) => comment.product)\n  comments: Comment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new product (admin only)'})@ApiResponse({status: 201, description: 'Product created successfully', type: Product})@Roles(userRole.ADMIN)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all products'})@ApiResponse({status: 200, description: 'List of products', type: undefined})@Roles(userRole.ADMIN)@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get a product by ID'})@ApiResponse({status: 200, description: 'Product details', type: Product})@Roles(userRole.ADMIN)@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a product (admin only)'})@ApiResponse({status: 200, description: 'Product deleted successfully'})@Roles(userRole.ADMIN)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a product (admin only)'})@ApiResponse({status: 200, description: 'Product updated successfully', type: Product})@Roles(userRole.ADMIN)@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param, Patch, Delete, UseGuards } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { ProductsService } from './providers/products.service';\nimport { CreateProductDto } from 'src/categories/dtos/create-product.dto';\nimport { UpdateProductDto } from 'src/categories/dtos/update-product.dto';\nimport { Product } from 'src/categories/product.entity';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { userRole } from '../users/enums/userRole.enum';\n\n@ApiTags('Products')\n@Controller('products')\nexport class ProductsController {\n  constructor(private readonly productsService: ProductsService) {}\n\n  @ApiOperation({ summary: 'Create a new product (admin only)' })\n  @ApiResponse({ status: 201, description: 'Product created successfully', type: Product })\n  @Roles(userRole.ADMIN)\n  @Post()\n  create(@Body() createProductDto: CreateProductDto): Promise {\n    return this.productsService.create(createProductDto);\n  }\n\n  @ApiOperation({ summary: 'Update a product (admin only)' })\n  @ApiResponse({ status: 200, description: 'Product updated successfully', type: Product })\n  @Roles(userRole.ADMIN)\n  @Patch(':id')\n  update(@Param('id') id: number, @Body() updateProductDto: UpdateProductDto): Promise {\n    return this.productsService.update(id, updateProductDto);\n  }\n\n  @ApiOperation({ summary: 'Delete a product (admin only)' })\n  @ApiResponse({ status: 200, description: 'Product deleted successfully' })\n  @Roles(userRole.ADMIN)\n  @Delete(':id')\n  remove(@Param('id') id: number): Promise {\n    return this.productsService.remove(id);\n  }\n\n  @ApiOperation({ summary: 'Get all products' })\n  @ApiResponse({ status: 200, description: 'List of products', type: [Product] })\n  @Roles(userRole.ADMIN)\n  @Get()\n  findAll(): Promise {\n    return this.productsService.findAll();\n  }\n\n  @ApiOperation({ summary: 'Get a product by ID' })\n  @ApiResponse({ status: 200, description: 'Product details', type: Product })\n  @Roles(userRole.ADMIN)\n  @Get(':id')\n  findOne(@Param('id') id: number): Promise {\n    return this.productsService.findById(id);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_ProductsModule_imports\n\n\n\ncluster_ProductsModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nAuthModule->ProductsModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from 'src/categories/product.entity';\nimport { ProductsService } from './providers/products.service';\nimport { ProductsController } from './products.controller';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Product]),\n    AuthModule, // Add AuthModule here\n  ],\n  providers: [ProductsService],\n  controllers: [ProductsController],\n  exports: [TypeOrmModule, ProductsService],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/products.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateProductDto: UpdateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Product } from 'src/categories/product.entity';\nimport { CreateProductDto } from 'src/categories/dtos/create-product.dto';\nimport { UpdateProductDto } from 'src/categories/dtos/update-product.dto';\n\n@Injectable()\nexport class ProductsService {\n  constructor(\n    @InjectRepository(Product)\n    private readonly productRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.productRepository.find();\n  }\n\n  async findById(id: number): Promise {\n    const product = await this.productRepository.findOne({ where: { id } });\n    if (!product) {\n      throw new NotFoundException('Product not found');\n    }\n    return product;\n  }\n\n  async create(createProductDto: CreateProductDto): Promise {\n    const product = this.productRepository.create(createProductDto);\n    return this.productRepository.save(product);\n  }\n\n  async update(id: number, updateProductDto: UpdateProductDto): Promise {\n    const product = await this.findById(id);\n    Object.assign(product, updateProductDto);\n    return this.productRepository.save(product);\n  }\n\n  async remove(id: number): Promise {\n    const product = await this.findById(id);\n    await this.productRepository.remove(product);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class RefreshTokenDto{\n    @IsNotEmpty()\n    @IsString()\n    refreshToken: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokensProvider, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { ActiveUserData } from '../inteface/active-user-data.interface';\n\n@Injectable()\nexport class RefreshTokensProvider {\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Inject jwtConfiguration\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n\n    /**\n     * Inject generateTokenProvider\n     */\n    private readonly generateTokenProvider: GenerateTokensProvider,\n\n    /**\n     * Inject usersService\n     */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    try {\n      //verify the refresh token using jwtService\n      const { sub } = await this.jwtService.verifyAsync>(\n        refreshTokenDto.refreshToken,\n        {\n          secret: this.jwtConfiguration.secret,\n          audience: this.jwtConfiguration.audience,\n          issuer: this.jwtConfiguration.issuer,\n        },\n      );\n      //Fetch user from the database\n\n      const user = await this.usersService.findOneById(sub);\n      //Generate the tokens\n      return await this.generateTokenProvider.generateTokens(user);\n    } catch (error) {\n        throw new UnauthorizedException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class SignInDto{\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashingProvider: HashingProvider, jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { HashingProvider } from './hashing.provider';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\nimport { ActiveUserData } from '../inteface/active-user-data.interface';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\n\n@Injectable()\nexport class SignInProvider {\n\n    constructor(\n        /**\n         * Inject usersService\n         */\n        @Inject(forwardRef(() => UsersService))\n        private readonly usersService: UsersService,\n\n        /**\n         * Iject hashingProvider\n         */\n        private readonly hashingProvider: HashingProvider,\n\n        /**\n         * Inject jwtService\n         */\n        private readonly jwtService: JwtService,\n\n        /**\n         * Inject jwtConfiguration\n         */\n        @Inject(jwtConfig.KEY)\n        private readonly jwtConfiguration: ConfigType,\n\n        /**\n         * Inject generateTokenProvider\n         */\n        private readonly generateTokenProvider : GenerateTokensProvider,\n\n\n    ) { }\n\n    public async signIn(signInDto: SignInDto) {\n        //Find the user using email ID\n        //Throw an exception user not found\n        let user = await this.usersService.findOneByEmail(signInDto.email)\n\n        //Compare password to the hash\n        let isEqual: boolean = false;\n\n        try {\n            isEqual = await this.hashingProvider.comparePassword(\n                signInDto.password,\n                user.password,\n            )\n        } catch (error) {\n            throw new RequestTimeoutException(error, {\n                description: 'Could not compare passwords'\n            })\n        }\n\n        if (!isEqual) {\n            throw new UnauthorizedException('Incorrect Password')\n        }\n\n        return await this.generateTokenProvider.generateTokens(user)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:53\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/posts/post.entity\";\nimport { Column, CreateDateColumn, DeleteDateColumn, Entity, ManyToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class Tag{\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: 'varchar',\n        length: 256,\n        nullable: false,\n        unique: true,\n    })\n    name: string;\n\n    @Column({\n        type: 'varchar',\n        length: 256,\n        nullable: false,\n        unique: true,\n    })\n    slug: string;\n\n    @Column({\n        type: 'text',\n        nullable: true,\n    })\n    description?: string;\n\n    @Column({\n        type: 'text',\n        nullable: true,\n    })\n    schema?: string;\n\n    @Column({\n        type: 'varchar',\n        length: 1024,\n        nullable: true,\n    })\n    featuredImageUrl: string;\n\n    @ManyToMany(()=>Post, (post)=> post.tags, {\n        onDelete: 'CASCADE',\n    })\n    posts: Post[];\n\n    @CreateDateColumn()\n    createDate: Date;\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n    @DeleteDateColumn()\n    deletedAt: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, ParseIntPipe, Post, Query } from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { TagsService } from './providers/tags.service';\n\n@Controller('tags')\nexport class TagsController {\n\n    constructor(\n        /**\n         * Inject tagsService\n         */\n        private readonly tagsService: TagsService\n    ){}\n\n    @Post()\n    public create(@Body() createTagDto: CreateTagDto){\n        return this.tagsService.create(createTagDto)\n    }\n\n    @Delete()\n    public async delete(@Query('id', ParseIntPipe) id:number){\n        return this.tagsService.delete(id);\n    }\n\n    // /tags/soft-delete\n    @Delete('soft-delete')\n    public async softDelete(@Query('id', ParseIntPipe) id:number){\n        return this.tagsService.softRemove(id);\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService]\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { Repository, In } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n\n    constructor(\n        /**\n         * Inject tagsRepository\n         */\n\n        @InjectRepository(Tag)\n        private readonly tagsRepository: Repository\n    ){}\n\n    public async create(createTagDto: CreateTagDto){\n        let tag = this.tagsRepository.create(createTagDto);\n        return await this.tagsRepository.save(tag)\n    }\n\n    public async findMultipleTags(tags: number[]){\n        let results = await this.tagsRepository.find({\n            where: {\n                id: In(tags)\n            }\n        })\n\n        return results;\n    }\n\n    public async delete(id:number){\n        await this.tagsRepository.delete(id);\n\n        return {\n            deleted: true,\n            id\n        }\n    }\n\n    public async softRemove(id:number){\n        await this.tagsRepository.softDelete(id);\n\n        return {\n            softDelete: true,\n            id\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dtos/update-categoty.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/update-categoty.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/update-categoty.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class UpdateCategoryDto {\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  name?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  description?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dtos/update-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateProductDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                price\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                specifications\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/update-product.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/update-product.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/update-product.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        specifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/update-product.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(ProductStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/update-product.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto, ProductStatus } from './create-product.dto';\nimport { IsEnum, IsNotEmpty, IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  name?: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsOptional()\n  @IsNumber()\n  price?: number;\n\n  @IsOptional()\n  @IsString()\n  specifications?: string;\n\n  @IsOptional()\n  @IsEnum(ProductStatus)\n  status?: ProductStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Upload.html":{"url":"entities/Upload.html","title":"entity - Upload","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/uploads.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                mime\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                size\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/uploads.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/uploads.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        mime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 128, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/uploads.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/uploads.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/uploads.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/uploads.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: fileTypes, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/uploads.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/uploads.entity.ts:57\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport { fileTypes } from './enums/file-types.enum';\n\n@Entity()\nexport class Upload {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  path: string;\n\n  @Column({\n    type: 'enum',\n    enum: fileTypes,\n    default: fileTypes.IMAGE,\n    nullable: false,\n  })\n  type: string;\n\n  @Column({\n    type: 'varchar',\n    length: 128,\n    nullable: false,\n  })\n  mime: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  size: number;\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadFile.html":{"url":"interfaces/UploadFile.html","title":"interface - UploadFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/interfaces/upload-file.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mime\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UploadFile {\n    name: string;\n    path: string;\n    type: string;\n    mime: string;\n    size: number;\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadToAwsProvider.html":{"url":"injectables/UploadToAwsProvider.html","title":"injectable - UploadToAwsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadToAwsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/upload-to-aws.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                fileUpload\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/upload-to-aws.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        fileUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    fileUpload(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as path from 'path';\n\nimport { Injectable, RequestTimeoutException } from '@nestjs/common';\n\nimport { ConfigService } from '@nestjs/config';\nimport { Express } from 'express';\nimport { S3 } from 'aws-sdk';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable()\nexport class UploadToAwsProvider {\n  constructor(private readonly configService: ConfigService) {}\n\n  public async fileUpload(file: Express.Multer.File) {\n    const s3 = new S3({\n      accessKeyId: this.configService.get('appConfig.awsAccessKeyId'),\n      secretAccessKey: this.configService.get('appConfig.awsSecretAccessKey'),\n      region: this.configService.get('appConfig.awsRegion'),\n    });\n\n    try {\n      const uploadResult = await s3\n        .upload({\n          Bucket: this.configService.get('appConfig.awsBucketName'), // Убедитесь, что Bucket корректный\n          Body: file.buffer,\n          Key: this.generateFileName(file),\n          ContentType: file.mimetype,\n        })\n        .promise();\n\n      return uploadResult.Key;\n    } catch (error) {\n      throw new RequestTimeoutException('Failed to upload file to S3', {\n        cause: error,\n      });\n    }\n  }\n\n  private generateFileName(file: Express.Multer.File): string {\n    let name = file.originalname.split('.')[0].replace(/\\s/g, '').trim();\n    let extension = path.extname(file.originalname);\n    let timeStamp = new Date().getTime().toString().trim();\n    return `${name}-${timeStamp}-${uuidv4()}${extension}`;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadsController.html":{"url":"controllers/UploadsController.html","title":"controller - UploadsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/uploads.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                uploads\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@ApiHeaders(['undefined', 'undefined'])@ApiOperation({summary: Upload a new image to the server})@Post('file')\n                \n            \n\n                    \n                        \n                            Defined in src/uploads/uploads.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiHeaders, ApiOperation } from '@nestjs/swagger';\nimport { Express } from 'express';\nimport { UploadsService } from './providers/uploads.service';\n\n@Controller('uploads')\nexport class UploadsController {\n  constructor(\n    /**\n     * inject uploadsService\n     */\n    private readonly uploadsService: UploadsService,\n  ) {}\n  @UseInterceptors(FileInterceptor('file'))\n  @ApiHeaders([\n    { name: 'Content-Type', description: 'multipart/form-data' },\n    { name: 'Authorization', description: 'Bearer Token' },\n  ])\n  @ApiOperation({\n    summary: `Upload a new image to the server`,\n  })\n  @Post('file')\n  public uploadFile(@UploadedFile() file: Express.Multer.File) {\n    return this.uploadsService.uploadFile(file);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadsModule.html":{"url":"modules/UploadsModule.html","title":"module - UploadsModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\n\n\nUploadsModule\n\nUploadsModule\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/uploads/uploads.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadToAwsProvider\n                        \n                        \n                            UploadsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UploadsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UploadsController } from './uploads.controller';\nimport { UploadsService } from './providers/uploads.service';\nimport { UploadToAwsProvider } from './providers/upload-to-aws.provider';\nimport { Upload } from './uploads.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  controllers: [UploadsController],\n  providers: [UploadsService, UploadToAwsProvider],\n  imports: [TypeOrmModule.forFeature([Upload])],\n})\nexport class UploadsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadsService.html":{"url":"injectables/UploadsService.html","title":"injectable - UploadsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/uploads.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadToAwsProvider: UploadToAwsProvider, configService: ConfigService, uploadsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/uploads.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadToAwsProvider\n                                                  \n                                                        \n                                                                        UploadToAwsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/uploads.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n} from '@nestjs/common';\nimport { UploadFile } from '../interfaces/upload-file.interface';\nimport { UploadToAwsProvider } from './upload-to-aws.provider';\nimport { fileTypes } from '../enums/file-types.enum';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Upload } from '../uploads.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class UploadsService {\n  constructor(\n    /**\n     * Inject uploadToAwsProvider\n     */\n    private readonly uploadToAwsProvider: UploadToAwsProvider,\n    /**\n     * inject configService\n     */\n    private readonly configService: ConfigService,\n    /**\n     * inject uploadsRepository\n     */\n    @InjectRepository(Upload)\n    private uploadsRepository: Repository,\n  ) {}\n  \n  public async uploadFile(file: Express.Multer.File) {\n    if (\n      !['image/gif', 'image/jpeg', 'image/jpg', 'image/png'].includes(file.mimetype)\n    ) {\n      throw new BadRequestException('MIME type not supported');\n    }\n    try {\n      const path = await this.uploadToAwsProvider.fileUpload(file);\n      const uploadFile: UploadFile = {\n        name: path,\n        path: `https://${this.configService.get('appConfig.awsCloudfrontUrl')}/${path}`,\n        type: fileTypes.IMAGE,\n        mime: file.mimetype,\n        size: file.size,\n      };\n      const upload = this.uploadsRepository.create(uploadFile);\n      return await this.uploadsRepository.save(upload);\n    } catch (error) {\n      throw new ConflictException('Failed to upload file', { cause: error });\n    }\n  }  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         userRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: userRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:54\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { userRole } from './enums/userRole.enum';\nimport { Post } from 'src/posts/post.entity';\nimport { Exclude } from 'class-transformer';\nimport { Comment } from 'src/comments/comment.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  @Exclude()\n  password?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n  })\n  @Exclude()\n  googleId?: string;\n\n  @Column({\n    type: 'enum',\n    enum: userRole,\n    default: userRole.USER,\n  })\n  role: userRole;\n\n  @OneToMany(() => Post, (post) => post.author)\n  posts: Post[];\n\n  @OneToMany(() => Comment, (comment) => comment.user)\n  comments: Comment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(AuthType.None)@UseInterceptors(ClassSerializerInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUseresParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches registered useres on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that u want api to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUseresParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Param,\n    Patch,\n    Post,\n    Query,\n    Body,\n    ParseIntPipe,\n    DefaultValuePipe,\n    UseInterceptors,\n    ClassSerializerInterceptor,\n    UseGuards,\n    SetMetadata,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiTags, ApiQuery, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-users.dto';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n\n    constructor(\n        private readonly usersService: UsersService,\n    ) { }\n\n    @Get('/:id?')\n    @ApiOperation({\n        summary: \"Fetches registered useres on the application\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"Users fetched successfully based on the query\"\n    })\n    @ApiQuery({\n        name: 'limit',\n        type: 'number',\n        required: false,\n        description: \"The number of entries returned per query\",\n        example: 10,\n    })\n    @ApiQuery({\n        name: 'page',\n        type: 'number',\n        required: false,\n        description: \"The position of the page number that u want api to return\",\n        example: 1,\n    })\n    public getUsers(\n        @Param() getUseresParamDto: GetUsersParamDto,\n        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n    ) {\n        return this.usersService.findAll(getUseresParamDto, limit, page);\n    }\n\n    @Post()\n    //@SetMetadata('authType', 'none')\n    @Auth(AuthType.None)\n    @UseInterceptors(ClassSerializerInterceptor)\n    public createUsers(\n        @Body() createUserDto: CreateUserDto,\n    ) {\n        return this.usersService.createUser(createUserDto);\n    }\n\n    @Post('create-many')\n    public createManyUsers(@Body() createManyUsersDto: CreateManyUsersDto) {\n        const users = createManyUsersDto.users;\n        return this.usersService.createMany(users);\n    }\n\n\n    @Patch()\n    public patchUser(@Body() patchUserDto: PatchUserDto) {\n        return patchUserDto;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersCreateManyProvider.html":{"url":"injectables/UsersCreateManyProvider.html","title":"injectable - UsersCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users-create-many.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users-create-many.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createUsersDto: CreateUserDto[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users-create-many.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUsersDto\n                                            \n                                                            CreateUserDto[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { DataSource } from 'typeorm';\n\nimport { User } from '../user.entity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\n\n@Injectable()\nexport class UsersCreateManyProvider {\n    constructor(\n        /**\n         * Inject the datasource\n         */\n        private dataSource: DataSource,\n    ) { }\n\n    public async createMany(createUsersDto: CreateUserDto[]) {\n        let newUsers: User[] = [];\n        const queryRunner = this.dataSource.createQueryRunner();\n\n        try {\n            // Connect the query ryunner to the datasource\n            await queryRunner.connect();\n            // Start the transaction\n            await queryRunner.startTransaction();\n        } catch (error) {\n            throw new RequestTimeoutException('Could not connect to the database');\n\n        }\n\n        try {\n            for (let user of createUsersDto) {\n                let newUser = queryRunner.manager.create(User, user);\n                let result = await queryRunner.manager.save(newUser);\n                newUsers.push(result);\n            }\n            await queryRunner.commitTransaction();\n        } catch (error) {\n            // since we have errors lets rollback the changes we made\n            await queryRunner.rollbackTransaction();\n            throw new ConflictException('Could not complete the transaction', {\n                description: String(error),\n            });\n        } finally {\n            try {\n                // you need to release a queryRunner which was manually instantiated\n                await queryRunner.release();\n            } catch (error) {\n                throw new RequestTimeoutException(\n                    'Could not release the query runner connection',\n                );\n            }\n        }\n\n        return newUsers;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateGoogleUserProvider\n                        \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneByGoogleIdProvider\n                        \n                        \n                            FindOneUserByEmailProvider\n                        \n                        \n                            UsersCreateManyProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersCreateManyProvider } from './providers/users-create-many.provider';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport profileConfig from './config/profile.config';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { FindOneUserByEmailProvider } from './providers/find-one-user-by-email.provider';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { FindOneByGoogleIdProvider } from './providers/find-one-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './providers/create-google-user.provider';\n\n@Module({\n    controllers: [UsersController],\n    providers: [\n        UsersService,\n        UsersCreateManyProvider,\n        CreateUserProvider,\n        FindOneUserByEmailProvider,\n        FindOneByGoogleIdProvider,\n        CreateGoogleUserProvider,\n    ],\n    exports: [UsersService],\n    imports: [TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n    forwardRef(() => AuthModule),\n    ],\n})\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Controller class for '/users' API endpoint\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, profileConfiguration: ConfigType<>, usersCreateManyProvider: UsersCreateManyProvider, dataSource: DataSource, createUserProvider: CreateUserProvider, findOneUserByEmailProvider: FindOneUserByEmailProvider, findOneByGoogleIdProvider: FindOneByGoogleIdProvider, createGoogleUserProvider: CreateGoogleUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UsersCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByGoogleIdProvider\n                                                  \n                                                        \n                                                                        FindOneByGoogleIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createGoogleUserProvider\n                                                  \n                                                        \n                                                                        CreateGoogleUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createUsersDto: CreateUserDto[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUsersDto\n                                            \n                                                            CreateUserDto[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUseresParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:76\n                        \n                    \n\n\n            \n                \n                        Public method responsible for handling GET request for '/users' endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUseresParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:100\n                        \n                    \n\n\n            \n                \n                        Public method used to find one user using the ID of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { Repository, DataSource } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from '../config/profile.config';\nimport { UsersCreateManyProvider } from './users-create-many.provider';\nimport { CreateUserProvider } from './create-user.provider';\nimport { FindOneUserByEmailProvider } from './find-one-user-by-email.provider';\nimport { FindOneByGoogleIdProvider } from './find-one-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './create-google-user.provider';\nimport { GoogleUser } from '../interfaces/google-user.interface';\n\n/**\n * Controller class for '/users' API endpoint\n */\n@Injectable()\nexport class UsersService {\n  constructor(\n    /*\n     * Injecting user Repository\n     */\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    @Inject(profileConfig.KEY)\n    private readonly profileConfiguration: ConfigType,\n\n    /**\n     * Inject UsersCreateMany provider\n     */\n    private readonly usersCreateManyProvider: UsersCreateManyProvider,\n\n    /**\n     * Inject Datasource\n     */\n    private readonly dataSource: DataSource,\n\n    /**\n     * Inject createUserProvider\n     */\n    private readonly createUserProvider: CreateUserProvider,\n\n    /**\n     * Inject findOneUserByEmailProvider\n     */\n    private readonly findOneUserByEmailProvider: FindOneUserByEmailProvider,\n\n    /**\n     * Inject findOneByGoogleIdProvier\n     */\n    private readonly findOneByGoogleIdProvider: FindOneByGoogleIdProvider,\n\n    /**\n     * Inject createGoogleUserProvider\n     */\n    private readonly createGoogleUserProvider: CreateGoogleUserProvider,\n  ) {}\n\n  public async createUser(createUserDto: CreateUserDto) {\n    return this.createUserProvider.createUser(createUserDto);\n  }\n\n  /**\n   * Public method responsible for handling GET request for '/users' endpoint\n   */\n  public findAll(\n    getUseresParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    throw new HttpException(\n      {\n        status: HttpStatus.MOVED_PERMANENTLY,\n        error: 'The API endpoint does not exist',\n        fileName: 'users.service.ts',\n        lineNumber: 88,\n      },\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        cause: new Error(),\n        description: 'Occured because the API endpoint was permanently moved',\n      },\n    );\n  }\n\n  /**\n   * Public method used to find one user using the ID of the user\n   */\n\n  public async findOneById(id: number) {\n    let user = undefined;\n\n    try {\n      user = await this.usersRepository.findOneBy({\n        id,\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the the datbase',\n        },\n      );\n    }\n\n    /**\n     * Handle the user does not exist\n     */\n    if (!user) {\n      throw new BadRequestException('The user id does not exist');\n    }\n\n    return user;\n  }\n\n  public async createMany(createUsersDto: CreateUserDto[]) {\n    return await this.usersCreateManyProvider.createMany(createUsersDto);\n  }\n\n  public async findOneByEmail(email: string) {\n    return await this.findOneUserByEmailProvider.findOneByEmail(email);\n  }\n\n  public async findOneByGoogleId(googleId: string) {\n    return await this.findOneByGoogleIdProvider.findOneByGoogleId(googleId);\n  }\n\n\n  public async createGoogleUser(googleUser: GoogleUser){\n    return await this.createGoogleUserProvider.createGoogleUser(googleUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication.guard.ts/authentication.guard.ts.guard.ts\n            \n            guard\n            AllowGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication.guard.ts/authentication.guard.ts.guard.ts\n            \n            guard\n            AuthenticationGuardTsGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/inteface/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/catalogs/catalog.controller.ts\n            \n            controller\n            CatalogController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/catalogs/providers/catalog.service.ts\n            \n            injectable\n            CatalogService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/categories/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/categories/dtos/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/categories/dtos/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/categories/dtos/update-categoty.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/categories/dtos/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/categories/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/comments/comment.entity.ts\n            \n            entity\n            Comment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/comments/comments.controller.ts\n            \n            controller\n            CommentsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/comments/dtos/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/comments/providers/comments.service.ts\n            \n            injectable\n            CommentsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mail/providers/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/posts/providers/create-post.provider.ts\n            \n            injectable\n            CreatePostProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/products/providers/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/uploads/interfaces/upload-file.interface.ts\n            \n            interface\n            UploadFile\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/uploads/providers/upload-to-aws.provider.ts\n            \n            injectable\n            UploadToAwsProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/uploads/providers/uploads.service.ts\n            \n            injectable\n            UploadsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/uploads/uploads.controller.ts\n            \n            controller\n            UploadsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/uploads/uploads.entity.ts\n            \n            entity\n            Upload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-users.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/google-user.interface.ts\n            \n            interface\n            GoogleUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/providers/create-google-user.provider.ts\n            \n            injectable\n            CreateGoogleUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-by-google-id.provider.ts\n            \n            injectable\n            FindOneByGoogleIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-email.provider.ts\n            \n            injectable\n            FindOneUserByEmailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users-create-many.provider.ts\n            \n            injectable\n            UsersCreateManyProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                33 %\n                (3/9)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            aws-sdk : ^2.1643.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.11.0\n        \n            joi : ^17.12.2\n        \n            nodemailer : ^6.9.13\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            fileTypes   (src/.../file-types.enum.ts)\n                        \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                        \n                            ProductStatus   (src/.../create-product.dto.ts)\n                        \n                        \n                            userRole   (src/.../userRole.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/uploads/enums/file-types.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        fileTypes\n                    \n                \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : image\n                            \n                        \n            \n        \n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n    src/categories/dtos/create-product.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ProductStatus\n                    \n                \n                        \n                            \n                                 NEW\n                            \n                        \n                        \n                            \n                                Value : новинка\n                            \n                        \n                        \n                            \n                                 SALE\n                            \n                        \n                        \n                            \n                                Value : акция\n                            \n                        \n                        \n                            \n                                 RECOMMENDED\n                            \n                        \n                        \n                            \n                                Value : рекомендуем\n                            \n                        \n                        \n                            \n                                 HIT\n                            \n                        \n                        \n                            \n                                Value : хит\n                            \n                        \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : обычный\n                            \n                        \n            \n        \n\n    src/users/enums/userRole.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        userRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CatalogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CatalogModule\n\n\n\ncluster_CatalogModule_providers\n\n\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_imports\n\n\n\ncluster_CommentsModule_exports\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nCatalogModule\n\nCatalogModule\n\nCatalogModule -->\n\nAuthModule->CatalogModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsModule -->\n\nAuthModule->CommentsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAccessTokenGuard \n\nAccessTokenGuard \n\nAccessTokenGuard  -->\n\nAuthModule->AccessTokenGuard \n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nAuthModule->ProductsModule\n\n\n\nAppModule -->\n\nCatalogModule->AppModule\n\n\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nCommentsService \n\nCommentsService \n\nCommentsService  -->\n\nCommentsModule->CommentsService \n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nCommentsModule -->\n\nPostsModule->CommentsModule\n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nCatalogService\n\nCatalogService\n\nCatalogModule -->\n\nCatalogService->CatalogModule\n\n\n\nCommentsModule -->\n\nProductsModule->CommentsModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostsModule -->\n\nCreatePostProvider->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    26 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    19 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (field: keyof ActiveUserData | undefined, ctx: ExecutionContext)=>{\n        const request = ctx.switchToHttp().getRequest();\n        const user: ActiveUserData = request[REQUEST_USER_KEY];\n\n        return field ? user?.[field] : user;\n    },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: userRole[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
